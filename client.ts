/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import { AxiosRequestConfig } from "axios";
import {
  AchTransactionsApi,
  BankAccountsApi,
  CompaniesApi,
  CompanyBenefitsApi,
  CompanyFormsApi,
  ContractorFormsApi,
  ContractorPaymentMethodApi,
  ContractorPaymentsApi,
  ContractorsApi,
  DepartmentsApi,
  EarningTypesApi,
  EmployeeAddressesApi,
  EmployeeBenefitsApi,
  EmployeeEmploymentsApi,
  EmployeeFormsApi,
  EmployeePaymentMethodApi,
  EmployeeTaxSetupApi,
  EmployeesApi,
  EventsApi,
  ExternalPayrollsApi,
  FederalTaxDetailsApi,
  FlowsApi,
  GarnishmentsApi,
  GeneratedDocumentsApi,
  HolidayPayPoliciesApi,
  IndustrySelectionApi,
  IntrospectionApi,
  InvoicesApi,
  JobsAndCompensationsApi,
  LocationsApi,
  NotificationsApi,
  PaySchedulesApi,
  PaymentConfigsApi,
  PayrollsApi,
  RecoveryCasesApi,
  SignatoriesApi,
  TaxRequirementsApi,
  TimeOffPoliciesApi,
  WebhooksApi,
} from "./api";
import { Configuration, ConfigurationParameters } from "./configuration";
import { GustoEmbeddedPayrollCustom } from "./client-custom";

export class GustoEmbeddedPayroll extends GustoEmbeddedPayrollCustom {
  readonly achTransactions: AchTransactionsApi;
  readonly bankAccounts: BankAccountsApi;
  readonly companies: CompaniesApi;
  readonly companyBenefits: CompanyBenefitsApi;
  readonly companyForms: CompanyFormsApi;
  readonly contractorForms: ContractorFormsApi;
  readonly contractorPaymentMethod: ContractorPaymentMethodApi;
  readonly contractorPayments: ContractorPaymentsApi;
  readonly contractors: ContractorsApi;
  readonly departments: DepartmentsApi;
  readonly earningTypes: EarningTypesApi;
  readonly employeeAddresses: EmployeeAddressesApi;
  readonly employeeBenefits: EmployeeBenefitsApi;
  readonly employeeEmployments: EmployeeEmploymentsApi;
  readonly employeeForms: EmployeeFormsApi;
  readonly employeePaymentMethod: EmployeePaymentMethodApi;
  readonly employeeTaxSetup: EmployeeTaxSetupApi;
  readonly employees: EmployeesApi;
  readonly events: EventsApi;
  readonly externalPayrolls: ExternalPayrollsApi;
  readonly federalTaxDetails: FederalTaxDetailsApi;
  readonly flows: FlowsApi;
  readonly garnishments: GarnishmentsApi;
  readonly generatedDocuments: GeneratedDocumentsApi;
  readonly holidayPayPolicies: HolidayPayPoliciesApi;
  readonly industrySelection: IndustrySelectionApi;
  readonly introspection: IntrospectionApi;
  readonly invoices: InvoicesApi;
  readonly jobsAndCompensations: JobsAndCompensationsApi;
  readonly locations: LocationsApi;
  readonly notifications: NotificationsApi;
  readonly paySchedules: PaySchedulesApi;
  readonly paymentConfigs: PaymentConfigsApi;
  readonly payrolls: PayrollsApi;
  readonly recoveryCases: RecoveryCasesApi;
  readonly signatories: SignatoriesApi;
  readonly taxRequirements: TaxRequirementsApi;
  readonly timeOffPolicies: TimeOffPoliciesApi;
  readonly webhooks: WebhooksApi;

  constructor(configurationParameters: ConfigurationParameters) {
    super(configurationParameters);
    const configuration = new Configuration(configurationParameters);
    this.achTransactions = new AchTransactionsApi(configuration);
    this.bankAccounts = new BankAccountsApi(configuration);
    this.companies = new CompaniesApi(configuration);
    this.companyBenefits = new CompanyBenefitsApi(configuration);
    this.companyForms = new CompanyFormsApi(configuration);
    this.contractorForms = new ContractorFormsApi(configuration);
    this.contractorPaymentMethod = new ContractorPaymentMethodApi(configuration);
    this.contractorPayments = new ContractorPaymentsApi(configuration);
    this.contractors = new ContractorsApi(configuration);
    this.departments = new DepartmentsApi(configuration);
    this.earningTypes = new EarningTypesApi(configuration);
    this.employeeAddresses = new EmployeeAddressesApi(configuration);
    this.employeeBenefits = new EmployeeBenefitsApi(configuration);
    this.employeeEmployments = new EmployeeEmploymentsApi(configuration);
    this.employeeForms = new EmployeeFormsApi(configuration);
    this.employeePaymentMethod = new EmployeePaymentMethodApi(configuration);
    this.employeeTaxSetup = new EmployeeTaxSetupApi(configuration);
    this.employees = new EmployeesApi(configuration);
    this.events = new EventsApi(configuration);
    this.externalPayrolls = new ExternalPayrollsApi(configuration);
    this.federalTaxDetails = new FederalTaxDetailsApi(configuration);
    this.flows = new FlowsApi(configuration);
    this.garnishments = new GarnishmentsApi(configuration);
    this.generatedDocuments = new GeneratedDocumentsApi(configuration);
    this.holidayPayPolicies = new HolidayPayPoliciesApi(configuration);
    this.industrySelection = new IndustrySelectionApi(configuration);
    this.introspection = new IntrospectionApi(configuration);
    this.invoices = new InvoicesApi(configuration);
    this.jobsAndCompensations = new JobsAndCompensationsApi(configuration);
    this.locations = new LocationsApi(configuration);
    this.notifications = new NotificationsApi(configuration);
    this.paySchedules = new PaySchedulesApi(configuration);
    this.paymentConfigs = new PaymentConfigsApi(configuration);
    this.payrolls = new PayrollsApi(configuration);
    this.recoveryCases = new RecoveryCasesApi(configuration);
    this.signatories = new SignatoriesApi(configuration);
    this.taxRequirements = new TaxRequirementsApi(configuration);
    this.timeOffPolicies = new TimeOffPoliciesApi(configuration);
    this.webhooks = new WebhooksApi(configuration);
  }

}
