/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractorPayment } from '../models';
// @ts-ignore
import { ContractorPaymentReceipt } from '../models';
// @ts-ignore
import { ContractorPaymentsCreatePaymentRequest } from '../models';
// @ts-ignore
import { ContractorPaymentsGetWithinTimePeriodTotalsResponse } from '../models';
// @ts-ignore
import { ContractorPaymentsPreviewDebitDate422Response } from '../models';
// @ts-ignore
import { ContractorPaymentsPreviewDebitDateRequest } from '../models';
// @ts-ignore
import { ContractorPaymentsPreviewDebitDateRequestContractorPaymentsInner } from '../models';
// @ts-ignore
import { ContractorPaymentsPreviewDebitDateResponse } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractorPaymentsApi - axios parameter creator
 * @export
 */
export const ContractorPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.  scope: `payrolls:run`
         * @summary Cancel a contractor payment
         * @param {string} companyId The UUID of the company
         * @param {string} contractorPaymentId The UUID of the contractor payment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: async (companyId: string, contractorPaymentId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelPayment', 'companyId', companyId)
            // verify required parameter 'contractorPaymentId' is not null or undefined
            assertParamExists('cancelPayment', 'contractorPaymentId', contractorPaymentId)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"contractor_payment_id"}}`, encodeURIComponent(String(contractorPaymentId !== undefined ? contractorPaymentId : `-contractor_payment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay a contractor. Information needed depends on the contractor\'s wage type (hourly vs fixed)  scope: `payrolls:run`
         * @summary Create a contractor payment
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorPaymentsCreatePaymentRequest} [contractorPaymentsCreatePaymentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: async (companyId: string, xGustoApiVersion?: '2024-03-01', contractorPaymentsCreatePaymentRequest?: ContractorPaymentsCreatePaymentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createPayment', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorPaymentsCreatePaymentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorPaymentsCreatePaymentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > 🚧 Demo action > > This action is only available in the Demo environment  Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment\'s `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.  scope: `payrolls:run`
         * @summary Fund a contractor payment [DEMO]
         * @param {string} contractorPaymentUuid The UUID of the contractor payment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundContractorPayment: async (contractorPaymentUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorPaymentUuid' is not null or undefined
            assertParamExists('fundContractorPayment', 'contractorPaymentUuid', contractorPaymentUuid)
            const localVarPath = `/v1/contractor_payments/{contractor_payment_uuid}/fund`
                .replace(`{${"contractor_payment_uuid"}}`, encodeURIComponent(String(contractorPaymentUuid !== undefined ? contractorPaymentUuid : `-contractor_payment_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractor_payments/{contractor_payment_uuid}/fund',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {string} companyId The UUID of the company
         * @param {string} contractorPaymentId The UUID of the contractor payment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayment: async (companyId: string, contractorPaymentId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSinglePayment', 'companyId', companyId)
            // verify required parameter 'contractorPaymentId' is not null or undefined
            assertParamExists('getSinglePayment', 'contractorPaymentId', contractorPaymentId)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"contractor_payment_id"}}`, encodeURIComponent(String(contractorPaymentId !== undefined ? contractorPaymentId : `-contractor_payment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a contractor payment receipt.  Notes: * Receipts are only available for direct deposit payments and are only available once those payments have been funded. * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status. * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single contractor payment receipt
         * @param {string} contractorPaymentUuid The UUID of the contractor payment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleReceipt: async (contractorPaymentUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorPaymentUuid' is not null or undefined
            assertParamExists('getSingleReceipt', 'contractorPaymentUuid', contractorPaymentUuid)
            const localVarPath = `/v1/contractor_payments/{contractor_payment_uuid}/receipt`
                .replace(`{${"contractor_payment_uuid"}}`, encodeURIComponent(String(contractorPaymentUuid !== undefined ? contractorPaymentUuid : `-contractor_payment_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractor_payments/{contractor_payment_uuid}/receipt',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {string} companyId The UUID of the company
         * @param {string} startDate The time period for which to retrieve contractor payments
         * @param {string} endDate The time period for which to retrieve contractor payments
         * @param {string} [contractorUuid] The UUID of the contractor. When specified, will load all payments for that contractor.
         * @param {boolean} [groupByDate] Display contractor payments results group by check date if set to true.
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithinTimePeriodTotals: async (companyId: string, startDate: string, endDate: string, contractorUuid?: string, groupByDate?: boolean, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getWithinTimePeriodTotals', 'companyId', companyId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getWithinTimePeriodTotals', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getWithinTimePeriodTotals', 'endDate', endDate)
            const localVarPath = `/v1/companies/{company_id}/contractor_payments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (contractorUuid !== undefined) {
                localVarQueryParameter['contractor_uuid'] = contractorUuid;
            }

            if (groupByDate !== undefined) {
                localVarQueryParameter['group_by_date'] = groupByDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractor_payments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a debit_date dependent on the ACH payment speed of the company.  If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.  scope: `payrolls:read`
         * @summary Preview contractor payment debit date
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorPaymentsPreviewDebitDateRequest} [contractorPaymentsPreviewDebitDateRequest] a list of contractor payments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDebitDate: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', contractorPaymentsPreviewDebitDateRequest?: ContractorPaymentsPreviewDebitDateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('previewDebitDate', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/contractor_payments/preview`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorPaymentsPreviewDebitDateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/contractor_payments/preview',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorPaymentsPreviewDebitDateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorPaymentsApi - functional programming interface
 * @export
 */
export const ContractorPaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorPaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.  scope: `payrolls:run`
         * @summary Cancel a contractor payment
         * @param {ContractorPaymentsApiCancelPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPayment(requestParameters: ContractorPaymentsApiCancelPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPayment(requestParameters.companyId, requestParameters.contractorPaymentId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pay a contractor. Information needed depends on the contractor\'s wage type (hourly vs fixed)  scope: `payrolls:run`
         * @summary Create a contractor payment
         * @param {ContractorPaymentsApiCreatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayment(requestParameters: ContractorPaymentsApiCreatePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPayment>> {
            const contractorPaymentsCreatePaymentRequest: ContractorPaymentsCreatePaymentRequest = {
                contractor_uuid: requestParameters.contractor_uuid,
                date: requestParameters.date,
                payment_method: requestParameters.payment_method,
                wage: requestParameters.wage,
                hours: requestParameters.hours,
                bonus: requestParameters.bonus,
                reimbursement: requestParameters.reimbursement
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayment(requestParameters.companyId, requestParameters.xGustoApiVersion, contractorPaymentsCreatePaymentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > 🚧 Demo action > > This action is only available in the Demo environment  Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment\'s `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.  scope: `payrolls:run`
         * @summary Fund a contractor payment [DEMO]
         * @param {ContractorPaymentsApiFundContractorPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundContractorPayment(requestParameters: ContractorPaymentsApiFundContractorPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundContractorPayment(requestParameters.contractorPaymentUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {ContractorPaymentsApiGetSinglePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePayment(requestParameters: ContractorPaymentsApiGetSinglePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPayment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePayment(requestParameters.companyId, requestParameters.contractorPaymentId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a contractor payment receipt.  Notes: * Receipts are only available for direct deposit payments and are only available once those payments have been funded. * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status. * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single contractor payment receipt
         * @param {ContractorPaymentsApiGetSingleReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleReceipt(requestParameters: ContractorPaymentsApiGetSingleReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleReceipt(requestParameters.contractorPaymentUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {ContractorPaymentsApiGetWithinTimePeriodTotalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithinTimePeriodTotals(requestParameters: ContractorPaymentsApiGetWithinTimePeriodTotalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentsGetWithinTimePeriodTotalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithinTimePeriodTotals(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.contractorUuid, requestParameters.groupByDate, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a debit_date dependent on the ACH payment speed of the company.  If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.  scope: `payrolls:read`
         * @summary Preview contractor payment debit date
         * @param {ContractorPaymentsApiPreviewDebitDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewDebitDate(requestParameters: ContractorPaymentsApiPreviewDebitDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentsPreviewDebitDateResponse>> {
            const contractorPaymentsPreviewDebitDateRequest: ContractorPaymentsPreviewDebitDateRequest = {
                contractor_payments: requestParameters.contractor_payments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewDebitDate(requestParameters.companyUuid, requestParameters.xGustoApiVersion, contractorPaymentsPreviewDebitDateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractorPaymentsApi - factory interface
 * @export
 */
export const ContractorPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorPaymentsApiFp(configuration)
    return {
        /**
         * Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.  scope: `payrolls:run`
         * @summary Cancel a contractor payment
         * @param {ContractorPaymentsApiCancelPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment(requestParameters: ContractorPaymentsApiCancelPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pay a contractor. Information needed depends on the contractor\'s wage type (hourly vs fixed)  scope: `payrolls:run`
         * @summary Create a contractor payment
         * @param {ContractorPaymentsApiCreatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(requestParameters: ContractorPaymentsApiCreatePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPayment> {
            return localVarFp.createPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > 🚧 Demo action > > This action is only available in the Demo environment  Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment\'s `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.  scope: `payrolls:run`
         * @summary Fund a contractor payment [DEMO]
         * @param {ContractorPaymentsApiFundContractorPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundContractorPayment(requestParameters: ContractorPaymentsApiFundContractorPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPayment> {
            return localVarFp.fundContractorPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single contractor payments  scope: `payrolls:read`
         * @summary Get a single contractor payment
         * @param {ContractorPaymentsApiGetSinglePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayment(requestParameters: ContractorPaymentsApiGetSinglePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPayment> {
            return localVarFp.getSinglePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a contractor payment receipt.  Notes: * Receipts are only available for direct deposit payments and are only available once those payments have been funded. * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status. * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single contractor payment receipt
         * @param {ContractorPaymentsApiGetSingleReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleReceipt(requestParameters: ContractorPaymentsApiGetSingleReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentReceipt> {
            return localVarFp.getSingleReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
         * @summary Get contractor payments for a company
         * @param {ContractorPaymentsApiGetWithinTimePeriodTotalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithinTimePeriodTotals(requestParameters: ContractorPaymentsApiGetWithinTimePeriodTotalsRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentsGetWithinTimePeriodTotalsResponse> {
            return localVarFp.getWithinTimePeriodTotals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a debit_date dependent on the ACH payment speed of the company.  If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.  scope: `payrolls:read`
         * @summary Preview contractor payment debit date
         * @param {ContractorPaymentsApiPreviewDebitDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewDebitDate(requestParameters: ContractorPaymentsApiPreviewDebitDateRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentsPreviewDebitDateResponse> {
            return localVarFp.previewDebitDate(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelPayment operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiCancelPaymentRequest
 */
export type ContractorPaymentsApiCancelPaymentRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiCancelPayment
    */
    readonly companyId: string
    
    /**
    * The UUID of the contractor payment
    * @type {string}
    * @memberof ContractorPaymentsApiCancelPayment
    */
    readonly contractorPaymentId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiCancelPayment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for createPayment operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiCreatePaymentRequest
 */
export type ContractorPaymentsApiCreatePaymentRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiCreatePayment
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiCreatePayment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorPaymentsCreatePaymentRequest

/**
 * Request parameters for fundContractorPayment operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiFundContractorPaymentRequest
 */
export type ContractorPaymentsApiFundContractorPaymentRequest = {
    
    /**
    * The UUID of the contractor payment
    * @type {string}
    * @memberof ContractorPaymentsApiFundContractorPayment
    */
    readonly contractorPaymentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiFundContractorPayment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSinglePayment operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiGetSinglePaymentRequest
 */
export type ContractorPaymentsApiGetSinglePaymentRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiGetSinglePayment
    */
    readonly companyId: string
    
    /**
    * The UUID of the contractor payment
    * @type {string}
    * @memberof ContractorPaymentsApiGetSinglePayment
    */
    readonly contractorPaymentId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiGetSinglePayment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSingleReceipt operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiGetSingleReceiptRequest
 */
export type ContractorPaymentsApiGetSingleReceiptRequest = {
    
    /**
    * The UUID of the contractor payment
    * @type {string}
    * @memberof ContractorPaymentsApiGetSingleReceipt
    */
    readonly contractorPaymentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiGetSingleReceipt
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getWithinTimePeriodTotals operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiGetWithinTimePeriodTotalsRequest
 */
export type ContractorPaymentsApiGetWithinTimePeriodTotalsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly companyId: string
    
    /**
    * The time period for which to retrieve contractor payments
    * @type {string}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly startDate: string
    
    /**
    * The time period for which to retrieve contractor payments
    * @type {string}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly endDate: string
    
    /**
    * The UUID of the contractor. When specified, will load all payments for that contractor.
    * @type {string}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly contractorUuid?: string
    
    /**
    * Display contractor payments results group by check date if set to true.
    * @type {boolean}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly groupByDate?: boolean
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiGetWithinTimePeriodTotals
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for previewDebitDate operation in ContractorPaymentsApi.
 * @export
 * @interface ContractorPaymentsApiPreviewDebitDateRequest
 */
export type ContractorPaymentsApiPreviewDebitDateRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorPaymentsApiPreviewDebitDate
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentsApiPreviewDebitDate
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorPaymentsPreviewDebitDateRequest

/**
 * ContractorPaymentsApiGenerated - object-oriented interface
 * @export
 * @class ContractorPaymentsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractorPaymentsApiGenerated extends BaseAPI {
    /**
     * Cancels and deletes a contractor payment. If the contractor payment has already started processing, the payment cannot be cancelled.  scope: `payrolls:run`
     * @summary Cancel a contractor payment
     * @param {ContractorPaymentsApiCancelPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public cancelPayment(requestParameters: ContractorPaymentsApiCancelPaymentRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).cancelPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pay a contractor. Information needed depends on the contractor\'s wage type (hourly vs fixed)  scope: `payrolls:run`
     * @summary Create a contractor payment
     * @param {ContractorPaymentsApiCreatePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public createPayment(requestParameters: ContractorPaymentsApiCreatePaymentRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).createPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > 🚧 Demo action > > This action is only available in the Demo environment  Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment\'s `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.  scope: `payrolls:run`
     * @summary Fund a contractor payment [DEMO]
     * @param {ContractorPaymentsApiFundContractorPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public fundContractorPayment(requestParameters: ContractorPaymentsApiFundContractorPaymentRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).fundContractorPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single contractor payments  scope: `payrolls:read`
     * @summary Get a single contractor payment
     * @param {ContractorPaymentsApiGetSinglePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public getSinglePayment(requestParameters: ContractorPaymentsApiGetSinglePaymentRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).getSinglePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a contractor payment receipt.  Notes: * Receipts are only available for direct deposit payments and are only available once those payments have been funded. * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status. * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
     * @summary Get a single contractor payment receipt
     * @param {ContractorPaymentsApiGetSingleReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public getSingleReceipt(requestParameters: ContractorPaymentsApiGetSingleReceiptRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).getSingleReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an object containing individual contractor payments, within a given time period, including totals.  scope: `payrolls:read`
     * @summary Get contractor payments for a company
     * @param {ContractorPaymentsApiGetWithinTimePeriodTotalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public getWithinTimePeriodTotals(requestParameters: ContractorPaymentsApiGetWithinTimePeriodTotalsRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).getWithinTimePeriodTotals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a debit_date dependent on the ACH payment speed of the company.  If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.  scope: `payrolls:read`
     * @summary Preview contractor payment debit date
     * @param {ContractorPaymentsApiPreviewDebitDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentsApiGenerated
     */
    public previewDebitDate(requestParameters: ContractorPaymentsApiPreviewDebitDateRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentsApiFp(this.configuration).previewDebitDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
