/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeAddress } from '../models';
// @ts-ignore
import { EmployeeAddressesCreateHomeAddressRequest } from '../models';
// @ts-ignore
import { EmployeeAddressesCreateWorkAddressRequest } from '../models';
// @ts-ignore
import { EmployeeAddressesUpdateHomeAddressRequest } from '../models';
// @ts-ignore
import { EmployeeAddressesUpdateWorkAddressRequest } from '../models';
// @ts-ignore
import { EmployeeWorkAddress } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeAddressesApi - axios parameter creator
 * @export
 */
export const EmployeeAddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Create an employee\'s home address
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeAddressesCreateHomeAddressRequest} [employeeAddressesCreateHomeAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeAddress: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeAddressesCreateHomeAddressRequest?: EmployeeAddressesCreateHomeAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createHomeAddress', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/home_addresses`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAddressesCreateHomeAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/home_addresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAddressesCreateHomeAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The work address of an employee describes when an employee began working at an associated company location.  scope: `employees:manage`
         * @summary Create an employee work address
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeAddressesCreateWorkAddressRequest} [employeeAddressesCreateWorkAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkAddress: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeAddressesCreateWorkAddressRequest?: EmployeeAddressesCreateWorkAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createWorkAddress', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/work_addresses`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAddressesCreateWorkAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/work_addresses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAddressesCreateWorkAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used for deleting an employee\'s home address.  Cannot delete the employee\'s active home address.  scope: `employees:write`
         * @summary Delete an employee\'s home address
         * @param {string} homeAddressUuid The UUID of the home address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHome: async (homeAddressUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeAddressUuid' is not null or undefined
            assertParamExists('deleteHome', 'homeAddressUuid', homeAddressUuid)
            const localVarPath = `/v1/home_addresses/{home_address_uuid}`
                .replace(`{${"home_address_uuid"}}`, encodeURIComponent(String(homeAddressUuid !== undefined ? homeAddressUuid : `-home_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/home_addresses/{home_address_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used for deleting an employee\'s work address.  Cannot delete the employee\'s active work address.  scope: `employees:manage`
         * @summary Delete an employee\'s work address
         * @param {string} workAddressUuid The UUID of the work address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkAddress: async (workAddressUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workAddressUuid' is not null or undefined
            assertParamExists('deleteWorkAddress', 'workAddressUuid', workAddressUuid)
            const localVarPath = `/v1/work_addresses/{work_address_uuid}`
                .replace(`{${"work_address_uuid"}}`, encodeURIComponent(String(workAddressUuid !== undefined ? workAddressUuid : `-work_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/work_addresses/{work_address_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home address
         * @param {string} homeAddressUuid The UUID of the home address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddress: async (homeAddressUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeAddressUuid' is not null or undefined
            assertParamExists('getHomeAddress', 'homeAddressUuid', homeAddressUuid)
            const localVarPath = `/v1/home_addresses/{home_address_uuid}`
                .replace(`{${"home_address_uuid"}}`, encodeURIComponent(String(homeAddressUuid !== undefined ? homeAddressUuid : `-home_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/home_addresses/{home_address_uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home addresses
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddresses: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getHomeAddresses', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/home_addresses`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/home_addresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:read`
         * @summary Get an employee work address
         * @param {string} workAddressUuid The UUID of the work address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddress: async (workAddressUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workAddressUuid' is not null or undefined
            assertParamExists('getWorkAddress', 'workAddressUuid', workAddressUuid)
            const localVarPath = `/v1/work_addresses/{work_address_uuid}`
                .replace(`{${"work_address_uuid"}}`, encodeURIComponent(String(workAddressUuid !== undefined ? workAddressUuid : `-work_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/work_addresses/{work_address_uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of an employee\'s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: `employees:read`
         * @summary Get an employee\'s work addresses
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkAddresses: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listWorkAddresses', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/work_addresses`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/work_addresses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Update an employee\'s home address
         * @param {string} homeAddressUuid The UUID of the home address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeAddressesUpdateHomeAddressRequest} [employeeAddressesUpdateHomeAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeAddress: async (homeAddressUuid: string, xGustoApiVersion?: '2024-03-01', employeeAddressesUpdateHomeAddressRequest?: EmployeeAddressesUpdateHomeAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeAddressUuid' is not null or undefined
            assertParamExists('updateHomeAddress', 'homeAddressUuid', homeAddressUuid)
            const localVarPath = `/v1/home_addresses/{home_address_uuid}`
                .replace(`{${"home_address_uuid"}}`, encodeURIComponent(String(homeAddressUuid !== undefined ? homeAddressUuid : `-home_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAddressesUpdateHomeAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/home_addresses/{home_address_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAddressesUpdateHomeAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:manage`
         * @summary Update an employee work address
         * @param {string} workAddressUuid The UUID of the work address
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeAddressesUpdateWorkAddressRequest} [employeeAddressesUpdateWorkAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkAddress: async (workAddressUuid: string, xGustoApiVersion?: '2024-03-01', employeeAddressesUpdateWorkAddressRequest?: EmployeeAddressesUpdateWorkAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workAddressUuid' is not null or undefined
            assertParamExists('updateWorkAddress', 'workAddressUuid', workAddressUuid)
            const localVarPath = `/v1/work_addresses/{work_address_uuid}`
                .replace(`{${"work_address_uuid"}}`, encodeURIComponent(String(workAddressUuid !== undefined ? workAddressUuid : `-work_address_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeAddressesUpdateWorkAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/work_addresses/{work_address_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeAddressesUpdateWorkAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeAddressesApi - functional programming interface
 * @export
 */
export const EmployeeAddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeAddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Create an employee\'s home address
         * @param {EmployeeAddressesApiCreateHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHomeAddress(requestParameters: EmployeeAddressesApiCreateHomeAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAddress>> {
            const employeeAddressesCreateHomeAddressRequest: EmployeeAddressesCreateHomeAddressRequest = {
                street_1: requestParameters.street_1,
                street_2: requestParameters.street_2,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                effective_date: requestParameters.effective_date,
                courtesy_withholding: requestParameters.courtesy_withholding
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHomeAddress(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeAddressesCreateHomeAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The work address of an employee describes when an employee began working at an associated company location.  scope: `employees:manage`
         * @summary Create an employee work address
         * @param {EmployeeAddressesApiCreateWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkAddress(requestParameters: EmployeeAddressesApiCreateWorkAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeWorkAddress>> {
            const employeeAddressesCreateWorkAddressRequest: EmployeeAddressesCreateWorkAddressRequest = {
                location_uuid: requestParameters.location_uuid,
                effective_date: requestParameters.effective_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkAddress(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeAddressesCreateWorkAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used for deleting an employee\'s home address.  Cannot delete the employee\'s active home address.  scope: `employees:write`
         * @summary Delete an employee\'s home address
         * @param {EmployeeAddressesApiDeleteHomeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHome(requestParameters: EmployeeAddressesApiDeleteHomeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHome(requestParameters.homeAddressUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Used for deleting an employee\'s work address.  Cannot delete the employee\'s active work address.  scope: `employees:manage`
         * @summary Delete an employee\'s work address
         * @param {EmployeeAddressesApiDeleteWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkAddress(requestParameters: EmployeeAddressesApiDeleteWorkAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkAddress(requestParameters.workAddressUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home address
         * @param {EmployeeAddressesApiGetHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeAddress(requestParameters: EmployeeAddressesApiGetHomeAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeAddress(requestParameters.homeAddressUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home addresses
         * @param {EmployeeAddressesApiGetHomeAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeAddresses(requestParameters: EmployeeAddressesApiGetHomeAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeAddresses(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:read`
         * @summary Get an employee work address
         * @param {EmployeeAddressesApiGetWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkAddress(requestParameters: EmployeeAddressesApiGetWorkAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeWorkAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkAddress(requestParameters.workAddressUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of an employee\'s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: `employees:read`
         * @summary Get an employee\'s work addresses
         * @param {EmployeeAddressesApiListWorkAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkAddresses(requestParameters: EmployeeAddressesApiListWorkAddressesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeWorkAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkAddresses(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Update an employee\'s home address
         * @param {EmployeeAddressesApiUpdateHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHomeAddress(requestParameters: EmployeeAddressesApiUpdateHomeAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeAddress>> {
            const employeeAddressesUpdateHomeAddressRequest: EmployeeAddressesUpdateHomeAddressRequest = {
                version: requestParameters.version,
                street_1: requestParameters.street_1,
                street_2: requestParameters.street_2,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                effective_date: requestParameters.effective_date,
                courtesy_withholding: requestParameters.courtesy_withholding
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHomeAddress(requestParameters.homeAddressUuid, requestParameters.xGustoApiVersion, employeeAddressesUpdateHomeAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:manage`
         * @summary Update an employee work address
         * @param {EmployeeAddressesApiUpdateWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkAddress(requestParameters: EmployeeAddressesApiUpdateWorkAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeWorkAddress>> {
            const employeeAddressesUpdateWorkAddressRequest: EmployeeAddressesUpdateWorkAddressRequest = {
                version: requestParameters.version,
                location_uuid: requestParameters.location_uuid,
                effective_date: requestParameters.effective_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkAddress(requestParameters.workAddressUuid, requestParameters.xGustoApiVersion, employeeAddressesUpdateWorkAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeAddressesApi - factory interface
 * @export
 */
export const EmployeeAddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeAddressesApiFp(configuration)
    return {
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Create an employee\'s home address
         * @param {EmployeeAddressesApiCreateHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeAddress(requestParameters: EmployeeAddressesApiCreateHomeAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAddress> {
            return localVarFp.createHomeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The work address of an employee describes when an employee began working at an associated company location.  scope: `employees:manage`
         * @summary Create an employee work address
         * @param {EmployeeAddressesApiCreateWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkAddress(requestParameters: EmployeeAddressesApiCreateWorkAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeWorkAddress> {
            return localVarFp.createWorkAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Used for deleting an employee\'s home address.  Cannot delete the employee\'s active home address.  scope: `employees:write`
         * @summary Delete an employee\'s home address
         * @param {EmployeeAddressesApiDeleteHomeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHome(requestParameters: EmployeeAddressesApiDeleteHomeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHome(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Used for deleting an employee\'s work address.  Cannot delete the employee\'s active work address.  scope: `employees:manage`
         * @summary Delete an employee\'s work address
         * @param {EmployeeAddressesApiDeleteWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkAddress(requestParameters: EmployeeAddressesApiDeleteWorkAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home address
         * @param {EmployeeAddressesApiGetHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddress(requestParameters: EmployeeAddressesApiGetHomeAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAddress> {
            return localVarFp.getHomeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
         * @summary Get an employee\'s home addresses
         * @param {EmployeeAddressesApiGetHomeAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeAddresses(requestParameters: EmployeeAddressesApiGetHomeAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeAddress>> {
            return localVarFp.getHomeAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:read`
         * @summary Get an employee work address
         * @param {EmployeeAddressesApiGetWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkAddress(requestParameters: EmployeeAddressesApiGetWorkAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeWorkAddress> {
            return localVarFp.getWorkAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of an employee\'s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: `employees:read`
         * @summary Get an employee\'s work addresses
         * @param {EmployeeAddressesApiListWorkAddressesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkAddresses(requestParameters: EmployeeAddressesApiListWorkAddressesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeWorkAddress>> {
            return localVarFp.listWorkAddresses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
         * @summary Update an employee\'s home address
         * @param {EmployeeAddressesApiUpdateHomeAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeAddress(requestParameters: EmployeeAddressesApiUpdateHomeAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeAddress> {
            return localVarFp.updateHomeAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The work address of an employee is used for payroll tax purposes.  scope: `employees:manage`
         * @summary Update an employee work address
         * @param {EmployeeAddressesApiUpdateWorkAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkAddress(requestParameters: EmployeeAddressesApiUpdateWorkAddressRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeWorkAddress> {
            return localVarFp.updateWorkAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createHomeAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiCreateHomeAddressRequest
 */
export type EmployeeAddressesApiCreateHomeAddressRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeAddressesApiCreateHomeAddress
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiCreateHomeAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeAddressesCreateHomeAddressRequest

/**
 * Request parameters for createWorkAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiCreateWorkAddressRequest
 */
export type EmployeeAddressesApiCreateWorkAddressRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeAddressesApiCreateWorkAddress
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiCreateWorkAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeAddressesCreateWorkAddressRequest

/**
 * Request parameters for deleteHome operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiDeleteHomeRequest
 */
export type EmployeeAddressesApiDeleteHomeRequest = {
    
    /**
    * The UUID of the home address
    * @type {string}
    * @memberof EmployeeAddressesApiDeleteHome
    */
    readonly homeAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiDeleteHome
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for deleteWorkAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiDeleteWorkAddressRequest
 */
export type EmployeeAddressesApiDeleteWorkAddressRequest = {
    
    /**
    * The UUID of the work address
    * @type {string}
    * @memberof EmployeeAddressesApiDeleteWorkAddress
    */
    readonly workAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiDeleteWorkAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getHomeAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiGetHomeAddressRequest
 */
export type EmployeeAddressesApiGetHomeAddressRequest = {
    
    /**
    * The UUID of the home address
    * @type {string}
    * @memberof EmployeeAddressesApiGetHomeAddress
    */
    readonly homeAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiGetHomeAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getHomeAddresses operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiGetHomeAddressesRequest
 */
export type EmployeeAddressesApiGetHomeAddressesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeAddressesApiGetHomeAddresses
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiGetHomeAddresses
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getWorkAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiGetWorkAddressRequest
 */
export type EmployeeAddressesApiGetWorkAddressRequest = {
    
    /**
    * The UUID of the work address
    * @type {string}
    * @memberof EmployeeAddressesApiGetWorkAddress
    */
    readonly workAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiGetWorkAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listWorkAddresses operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiListWorkAddressesRequest
 */
export type EmployeeAddressesApiListWorkAddressesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeAddressesApiListWorkAddresses
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiListWorkAddresses
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateHomeAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiUpdateHomeAddressRequest
 */
export type EmployeeAddressesApiUpdateHomeAddressRequest = {
    
    /**
    * The UUID of the home address
    * @type {string}
    * @memberof EmployeeAddressesApiUpdateHomeAddress
    */
    readonly homeAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiUpdateHomeAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeAddressesUpdateHomeAddressRequest

/**
 * Request parameters for updateWorkAddress operation in EmployeeAddressesApi.
 * @export
 * @interface EmployeeAddressesApiUpdateWorkAddressRequest
 */
export type EmployeeAddressesApiUpdateWorkAddressRequest = {
    
    /**
    * The UUID of the work address
    * @type {string}
    * @memberof EmployeeAddressesApiUpdateWorkAddress
    */
    readonly workAddressUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeAddressesApiUpdateWorkAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeAddressesUpdateWorkAddressRequest

/**
 * EmployeeAddressesApiGenerated - object-oriented interface
 * @export
 * @class EmployeeAddressesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeAddressesApiGenerated extends BaseAPI {
    /**
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
     * @summary Create an employee\'s home address
     * @param {EmployeeAddressesApiCreateHomeAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public createHomeAddress(requestParameters: EmployeeAddressesApiCreateHomeAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).createHomeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The work address of an employee describes when an employee began working at an associated company location.  scope: `employees:manage`
     * @summary Create an employee work address
     * @param {EmployeeAddressesApiCreateWorkAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public createWorkAddress(requestParameters: EmployeeAddressesApiCreateWorkAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).createWorkAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used for deleting an employee\'s home address.  Cannot delete the employee\'s active home address.  scope: `employees:write`
     * @summary Delete an employee\'s home address
     * @param {EmployeeAddressesApiDeleteHomeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public deleteHome(requestParameters: EmployeeAddressesApiDeleteHomeRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).deleteHome(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used for deleting an employee\'s work address.  Cannot delete the employee\'s active work address.  scope: `employees:manage`
     * @summary Delete an employee\'s work address
     * @param {EmployeeAddressesApiDeleteWorkAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public deleteWorkAddress(requestParameters: EmployeeAddressesApiDeleteWorkAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).deleteWorkAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
     * @summary Get an employee\'s home address
     * @param {EmployeeAddressesApiGetHomeAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public getHomeAddress(requestParameters: EmployeeAddressesApiGetHomeAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).getHomeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:read`
     * @summary Get an employee\'s home addresses
     * @param {EmployeeAddressesApiGetHomeAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public getHomeAddresses(requestParameters: EmployeeAddressesApiGetHomeAddressesRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).getHomeAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The work address of an employee is used for payroll tax purposes.  scope: `employees:read`
     * @summary Get an employee work address
     * @param {EmployeeAddressesApiGetWorkAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public getWorkAddress(requestParameters: EmployeeAddressesApiGetWorkAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).getWorkAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of an employee\'s work addresses. Each address includes its effective date and a boolean signifying if it is the currently active work address.  scope: `employees:read`
     * @summary Get an employee\'s work addresses
     * @param {EmployeeAddressesApiListWorkAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public listWorkAddresses(requestParameters: EmployeeAddressesApiListWorkAddressesRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).listWorkAddresses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  Supports home address effective dating and courtesy withholding.  scope: `employees:write`
     * @summary Update an employee\'s home address
     * @param {EmployeeAddressesApiUpdateHomeAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public updateHomeAddress(requestParameters: EmployeeAddressesApiUpdateHomeAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).updateHomeAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The work address of an employee is used for payroll tax purposes.  scope: `employees:manage`
     * @summary Update an employee work address
     * @param {EmployeeAddressesApiUpdateWorkAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeAddressesApiGenerated
     */
    public updateWorkAddress(requestParameters: EmployeeAddressesApiUpdateWorkAddressRequest, options?: AxiosRequestConfig) {
        return EmployeeAddressesApiFp(this.configuration).updateWorkAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
