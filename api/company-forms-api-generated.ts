/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompanyFormsSignFormRequest } from '../models';
// @ts-ignore
import { Form } from '../models';
// @ts-ignore
import { FormPdf } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyFormsApi - axios parameter creator
 * @export
 */
export const CompanyFormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all company\'s forms  scope: `company_forms:read`
         * @summary Get all company forms
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForms: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllForms', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/forms`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/forms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a company form  scope: `company_forms:read`
         * @summary Get a company form
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById: async (formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getFormById', 'formId', formId)
            const localVarPath = `/v1/forms/{form_id}`
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/forms/{form_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the link to the form PDF  scope: `company_forms:read`
         * @summary Get a company form pdf
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink: async (formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getPdfLink', 'formId', formId)
            const localVarPath = `/v1/forms/{form_id}/pdf`
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/forms/{form_id}/pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign a company form  scope: `company_forms:sign`
         * @summary Sign a company form
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompanyFormsSignFormRequest} [companyFormsSignFormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signForm: async (formId: string, xGustoApiVersion?: '2024-03-01', companyFormsSignFormRequest?: CompanyFormsSignFormRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('signForm', 'formId', formId)
            const localVarPath = `/v1/forms/{form_id}/sign`
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyFormsSignFormRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/forms/{form_id}/sign',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyFormsSignFormRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyFormsApi - functional programming interface
 * @export
 */
export const CompanyFormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyFormsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all company\'s forms  scope: `company_forms:read`
         * @summary Get all company forms
         * @param {CompanyFormsApiGetAllFormsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForms(requestParameters: CompanyFormsApiGetAllFormsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Form>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForms(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a company form  scope: `company_forms:read`
         * @summary Get a company form
         * @param {CompanyFormsApiGetFormByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormById(requestParameters: CompanyFormsApiGetFormByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormById(requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the link to the form PDF  scope: `company_forms:read`
         * @summary Get a company form pdf
         * @param {CompanyFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfLink(requestParameters: CompanyFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormPdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfLink(requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign a company form  scope: `company_forms:sign`
         * @summary Sign a company form
         * @param {CompanyFormsApiSignFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signForm(requestParameters: CompanyFormsApiSignFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const companyFormsSignFormRequest: CompanyFormsSignFormRequest = {
                signature_text: requestParameters.signature_text,
                agree: requestParameters.agree,
                signed_by_ip_address: requestParameters.signed_by_ip_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.signForm(requestParameters.formId, requestParameters.xGustoApiVersion, companyFormsSignFormRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyFormsApi - factory interface
 * @export
 */
export const CompanyFormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyFormsApiFp(configuration)
    return {
        /**
         * Get a list of all company\'s forms  scope: `company_forms:read`
         * @summary Get all company forms
         * @param {CompanyFormsApiGetAllFormsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForms(requestParameters: CompanyFormsApiGetAllFormsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Form>> {
            return localVarFp.getAllForms(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a company form  scope: `company_forms:read`
         * @summary Get a company form
         * @param {CompanyFormsApiGetFormByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById(requestParameters: CompanyFormsApiGetFormByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Form> {
            return localVarFp.getFormById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the link to the form PDF  scope: `company_forms:read`
         * @summary Get a company form pdf
         * @param {CompanyFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink(requestParameters: CompanyFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FormPdf> {
            return localVarFp.getPdfLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign a company form  scope: `company_forms:sign`
         * @summary Sign a company form
         * @param {CompanyFormsApiSignFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signForm(requestParameters: CompanyFormsApiSignFormRequest, options?: AxiosRequestConfig): AxiosPromise<Form> {
            return localVarFp.signForm(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllForms operation in CompanyFormsApi.
 * @export
 * @interface CompanyFormsApiGetAllFormsRequest
 */
export type CompanyFormsApiGetAllFormsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompanyFormsApiGetAllForms
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyFormsApiGetAllForms
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getFormById operation in CompanyFormsApi.
 * @export
 * @interface CompanyFormsApiGetFormByIdRequest
 */
export type CompanyFormsApiGetFormByIdRequest = {
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof CompanyFormsApiGetFormById
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyFormsApiGetFormById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getPdfLink operation in CompanyFormsApi.
 * @export
 * @interface CompanyFormsApiGetPdfLinkRequest
 */
export type CompanyFormsApiGetPdfLinkRequest = {
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof CompanyFormsApiGetPdfLink
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyFormsApiGetPdfLink
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for signForm operation in CompanyFormsApi.
 * @export
 * @interface CompanyFormsApiSignFormRequest
 */
export type CompanyFormsApiSignFormRequest = {
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof CompanyFormsApiSignForm
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompanyFormsApiSignForm
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompanyFormsSignFormRequest

/**
 * CompanyFormsApiGenerated - object-oriented interface
 * @export
 * @class CompanyFormsApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyFormsApiGenerated extends BaseAPI {
    /**
     * Get a list of all company\'s forms  scope: `company_forms:read`
     * @summary Get all company forms
     * @param {CompanyFormsApiGetAllFormsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyFormsApiGenerated
     */
    public getAllForms(requestParameters: CompanyFormsApiGetAllFormsRequest, options?: AxiosRequestConfig) {
        return CompanyFormsApiFp(this.configuration).getAllForms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a company form  scope: `company_forms:read`
     * @summary Get a company form
     * @param {CompanyFormsApiGetFormByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyFormsApiGenerated
     */
    public getFormById(requestParameters: CompanyFormsApiGetFormByIdRequest, options?: AxiosRequestConfig) {
        return CompanyFormsApiFp(this.configuration).getFormById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the link to the form PDF  scope: `company_forms:read`
     * @summary Get a company form pdf
     * @param {CompanyFormsApiGetPdfLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyFormsApiGenerated
     */
    public getPdfLink(requestParameters: CompanyFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig) {
        return CompanyFormsApiFp(this.configuration).getPdfLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign a company form  scope: `company_forms:sign`
     * @summary Sign a company form
     * @param {CompanyFormsApiSignFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyFormsApiGenerated
     */
    public signForm(requestParameters: CompanyFormsApiSignFormRequest, options?: AxiosRequestConfig) {
        return CompanyFormsApiFp(this.configuration).signForm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
