/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExternalPayroll } from '../models';
// @ts-ignore
import { ExternalPayrollBasic } from '../models';
// @ts-ignore
import { ExternalPayrollTaxSuggestions } from '../models';
// @ts-ignore
import { ExternalPayrollsCreateNewPayrollRequest } from '../models';
// @ts-ignore
import { ExternalPayrollsUpdatePayrollItemsRequest } from '../models';
// @ts-ignore
import { ExternalPayrollsUpdatePayrollItemsRequestExternalPayrollItemsInner } from '../models';
// @ts-ignore
import { ExternalPayrollsUpdateTaxLiabilitiesRequest } from '../models';
// @ts-ignore
import { ExternalPayrollsUpdateTaxLiabilitiesRequestLiabilitySelectionsInner } from '../models';
// @ts-ignore
import { TaxLiabilitiesSelections } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExternalPayrollsApi - axios parameter creator
 * @export
 */
export const ExternalPayrollsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new external payroll for the company.  scope: `external_payrolls:write`
         * @summary Create a new external payroll for a company
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ExternalPayrollsCreateNewPayrollRequest} [externalPayrollsCreateNewPayrollRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPayroll: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', externalPayrollsCreateNewPayrollRequest?: ExternalPayrollsCreateNewPayrollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createNewPayroll', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalPayrollsCreateNewPayrollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalPayrollsCreateNewPayrollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an external payroll.  scope: `external_payrolls:write`
         * @summary Delete an external payroll
         * @param {string} companyUuid The UUID of the company
         * @param {string} externalPayrollId The UUID of the external payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayroll: async (companyUuid: string, externalPayrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('deletePayroll', 'companyUuid', companyUuid)
            // verify required parameter 'externalPayrollId' is not null or undefined
            assertParamExists('deletePayroll', 'externalPayrollId', externalPayrollId)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"external_payroll_id"}}`, encodeURIComponent(String(externalPayrollId !== undefined ? externalPayrollId : `-external_payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: `external_payrolls:write`
         * @summary Finalize tax liabilities options and convert into processed payrolls
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeTaxLiabilities: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('finalizeTaxLiabilities', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get an external payroll
         * @param {string} companyUuid The UUID of the company
         * @param {string} externalPayrollId The UUID of the external payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (companyUuid: string, externalPayrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getById', 'companyUuid', companyUuid)
            // verify required parameter 'externalPayrollId' is not null or undefined
            assertParamExists('getById', 'externalPayrollId', externalPayrollId)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"external_payroll_id"}}`, encodeURIComponent(String(externalPayrollId !== undefined ? externalPayrollId : `-external_payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tax liabilities from aggregate external payrolls for a company.  scope: `external_payrolls:read`
         * @summary Get tax liabilities
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxLiabilities: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getTaxLiabilities', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/tax_liabilities`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: `external_payrolls:read`
         * @summary Get tax suggestions for an external payroll
         * @param {string} companyUuid The UUID of the company
         * @param {string} externalPayrollId The UUID of the external payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxSuggestions: async (companyUuid: string, externalPayrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getTaxSuggestions', 'companyUuid', companyUuid)
            // verify required parameter 'externalPayrollId' is not null or undefined
            assertParamExists('getTaxSuggestions', 'externalPayrollId', externalPayrollId)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"external_payroll_id"}}`, encodeURIComponent(String(externalPayrollId !== undefined ? externalPayrollId : `-external_payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get external payrolls for a company
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('listForCompany', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an external payroll with a list of external payroll items  scope: `external_payrolls:write`
         * @summary Update an external payroll
         * @param {string} companyUuid The UUID of the company
         * @param {string} externalPayrollId The UUID of the external payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ExternalPayrollsUpdatePayrollItemsRequest} [externalPayrollsUpdatePayrollItemsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayrollItems: async (companyUuid: string, externalPayrollId: string, xGustoApiVersion?: '2024-03-01', externalPayrollsUpdatePayrollItemsRequest?: ExternalPayrollsUpdatePayrollItemsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('updatePayrollItems', 'companyUuid', companyUuid)
            // verify required parameter 'externalPayrollId' is not null or undefined
            assertParamExists('updatePayrollItems', 'externalPayrollId', externalPayrollId)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"external_payroll_id"}}`, encodeURIComponent(String(externalPayrollId !== undefined ? externalPayrollId : `-external_payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalPayrollsUpdatePayrollItemsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalPayrollsUpdatePayrollItemsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tax liabilities for a company.  scope: `external_payrolls:write`
         * @summary Update tax liabilities
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ExternalPayrollsUpdateTaxLiabilitiesRequest} [externalPayrollsUpdateTaxLiabilitiesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxLiabilities: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', externalPayrollsUpdateTaxLiabilitiesRequest?: ExternalPayrollsUpdateTaxLiabilitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('updateTaxLiabilities', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/external_payrolls/tax_liabilities`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalPayrollsUpdateTaxLiabilitiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalPayrollsUpdateTaxLiabilitiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalPayrollsApi - functional programming interface
 * @export
 */
export const ExternalPayrollsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalPayrollsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new external payroll for the company.  scope: `external_payrolls:write`
         * @summary Create a new external payroll for a company
         * @param {ExternalPayrollsApiCreateNewPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPayroll(requestParameters: ExternalPayrollsApiCreateNewPayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalPayroll>> {
            const externalPayrollsCreateNewPayrollRequest: ExternalPayrollsCreateNewPayrollRequest = {
                check_date: requestParameters.check_date,
                payment_period_start_date: requestParameters.payment_period_start_date,
                payment_period_end_date: requestParameters.payment_period_end_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPayroll(requestParameters.companyUuid, requestParameters.xGustoApiVersion, externalPayrollsCreateNewPayrollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an external payroll.  scope: `external_payrolls:write`
         * @summary Delete an external payroll
         * @param {ExternalPayrollsApiDeletePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePayroll(requestParameters: ExternalPayrollsApiDeletePayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePayroll(requestParameters.companyUuid, requestParameters.externalPayrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: `external_payrolls:write`
         * @summary Finalize tax liabilities options and convert into processed payrolls
         * @param {ExternalPayrollsApiFinalizeTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finalizeTaxLiabilities(requestParameters: ExternalPayrollsApiFinalizeTaxLiabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finalizeTaxLiabilities(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get an external payroll
         * @param {ExternalPayrollsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ExternalPayrollsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalPayroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.companyUuid, requestParameters.externalPayrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tax liabilities from aggregate external payrolls for a company.  scope: `external_payrolls:read`
         * @summary Get tax liabilities
         * @param {ExternalPayrollsApiGetTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxLiabilities(requestParameters: ExternalPayrollsApiGetTaxLiabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxLiabilitiesSelections>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaxLiabilities(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: `external_payrolls:read`
         * @summary Get tax suggestions for an external payroll
         * @param {ExternalPayrollsApiGetTaxSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxSuggestions(requestParameters: ExternalPayrollsApiGetTaxSuggestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalPayrollTaxSuggestions>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaxSuggestions(requestParameters.companyUuid, requestParameters.externalPayrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get external payrolls for a company
         * @param {ExternalPayrollsApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForCompany(requestParameters: ExternalPayrollsApiListForCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalPayrollBasic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForCompany(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an external payroll with a list of external payroll items  scope: `external_payrolls:write`
         * @summary Update an external payroll
         * @param {ExternalPayrollsApiUpdatePayrollItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayrollItems(requestParameters: ExternalPayrollsApiUpdatePayrollItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalPayroll>> {
            const externalPayrollsUpdatePayrollItemsRequest: ExternalPayrollsUpdatePayrollItemsRequest = {
                replace_fields: requestParameters.replace_fields,
                external_payroll_items: requestParameters.external_payroll_items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayrollItems(requestParameters.companyUuid, requestParameters.externalPayrollId, requestParameters.xGustoApiVersion, externalPayrollsUpdatePayrollItemsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update tax liabilities for a company.  scope: `external_payrolls:write`
         * @summary Update tax liabilities
         * @param {ExternalPayrollsApiUpdateTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaxLiabilities(requestParameters: ExternalPayrollsApiUpdateTaxLiabilitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxLiabilitiesSelections>>> {
            const externalPayrollsUpdateTaxLiabilitiesRequest: ExternalPayrollsUpdateTaxLiabilitiesRequest = {
                liability_selections: requestParameters.liability_selections
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaxLiabilities(requestParameters.companyUuid, requestParameters.xGustoApiVersion, externalPayrollsUpdateTaxLiabilitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalPayrollsApi - factory interface
 * @export
 */
export const ExternalPayrollsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalPayrollsApiFp(configuration)
    return {
        /**
         * Creates a new external payroll for the company.  scope: `external_payrolls:write`
         * @summary Create a new external payroll for a company
         * @param {ExternalPayrollsApiCreateNewPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPayroll(requestParameters: ExternalPayrollsApiCreateNewPayrollRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalPayroll> {
            return localVarFp.createNewPayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an external payroll.  scope: `external_payrolls:write`
         * @summary Delete an external payroll
         * @param {ExternalPayrollsApiDeletePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePayroll(requestParameters: ExternalPayrollsApiDeletePayrollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: `external_payrolls:write`
         * @summary Finalize tax liabilities options and convert into processed payrolls
         * @param {ExternalPayrollsApiFinalizeTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeTaxLiabilities(requestParameters: ExternalPayrollsApiFinalizeTaxLiabilitiesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.finalizeTaxLiabilities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get an external payroll
         * @param {ExternalPayrollsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ExternalPayrollsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalPayroll> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tax liabilities from aggregate external payrolls for a company.  scope: `external_payrolls:read`
         * @summary Get tax liabilities
         * @param {ExternalPayrollsApiGetTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxLiabilities(requestParameters: ExternalPayrollsApiGetTaxLiabilitiesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TaxLiabilitiesSelections>> {
            return localVarFp.getTaxLiabilities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: `external_payrolls:read`
         * @summary Get tax suggestions for an external payroll
         * @param {ExternalPayrollsApiGetTaxSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxSuggestions(requestParameters: ExternalPayrollsApiGetTaxSuggestionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ExternalPayrollTaxSuggestions>> {
            return localVarFp.getTaxSuggestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an external payroll for a given company.  scope: `external_payrolls:read`
         * @summary Get external payrolls for a company
         * @param {ExternalPayrollsApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany(requestParameters: ExternalPayrollsApiListForCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ExternalPayrollBasic>> {
            return localVarFp.listForCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an external payroll with a list of external payroll items  scope: `external_payrolls:write`
         * @summary Update an external payroll
         * @param {ExternalPayrollsApiUpdatePayrollItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayrollItems(requestParameters: ExternalPayrollsApiUpdatePayrollItemsRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalPayroll> {
            return localVarFp.updatePayrollItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update tax liabilities for a company.  scope: `external_payrolls:write`
         * @summary Update tax liabilities
         * @param {ExternalPayrollsApiUpdateTaxLiabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxLiabilities(requestParameters: ExternalPayrollsApiUpdateTaxLiabilitiesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TaxLiabilitiesSelections>> {
            return localVarFp.updateTaxLiabilities(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPayroll operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiCreateNewPayrollRequest
 */
export type ExternalPayrollsApiCreateNewPayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiCreateNewPayroll
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiCreateNewPayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ExternalPayrollsCreateNewPayrollRequest

/**
 * Request parameters for deletePayroll operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiDeletePayrollRequest
 */
export type ExternalPayrollsApiDeletePayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiDeletePayroll
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the external payroll
    * @type {string}
    * @memberof ExternalPayrollsApiDeletePayroll
    */
    readonly externalPayrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiDeletePayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for finalizeTaxLiabilities operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiFinalizeTaxLiabilitiesRequest
 */
export type ExternalPayrollsApiFinalizeTaxLiabilitiesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiFinalizeTaxLiabilities
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiFinalizeTaxLiabilities
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getById operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiGetByIdRequest
 */
export type ExternalPayrollsApiGetByIdRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiGetById
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the external payroll
    * @type {string}
    * @memberof ExternalPayrollsApiGetById
    */
    readonly externalPayrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiGetById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getTaxLiabilities operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiGetTaxLiabilitiesRequest
 */
export type ExternalPayrollsApiGetTaxLiabilitiesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiGetTaxLiabilities
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiGetTaxLiabilities
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getTaxSuggestions operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiGetTaxSuggestionsRequest
 */
export type ExternalPayrollsApiGetTaxSuggestionsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiGetTaxSuggestions
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the external payroll
    * @type {string}
    * @memberof ExternalPayrollsApiGetTaxSuggestions
    */
    readonly externalPayrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiGetTaxSuggestions
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listForCompany operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiListForCompanyRequest
 */
export type ExternalPayrollsApiListForCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiListForCompany
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiListForCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updatePayrollItems operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiUpdatePayrollItemsRequest
 */
export type ExternalPayrollsApiUpdatePayrollItemsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiUpdatePayrollItems
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the external payroll
    * @type {string}
    * @memberof ExternalPayrollsApiUpdatePayrollItems
    */
    readonly externalPayrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiUpdatePayrollItems
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ExternalPayrollsUpdatePayrollItemsRequest

/**
 * Request parameters for updateTaxLiabilities operation in ExternalPayrollsApi.
 * @export
 * @interface ExternalPayrollsApiUpdateTaxLiabilitiesRequest
 */
export type ExternalPayrollsApiUpdateTaxLiabilitiesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ExternalPayrollsApiUpdateTaxLiabilities
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ExternalPayrollsApiUpdateTaxLiabilities
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ExternalPayrollsUpdateTaxLiabilitiesRequest

/**
 * ExternalPayrollsApiGenerated - object-oriented interface
 * @export
 * @class ExternalPayrollsApiGenerated
 * @extends {BaseAPI}
 */
export class ExternalPayrollsApiGenerated extends BaseAPI {
    /**
     * Creates a new external payroll for the company.  scope: `external_payrolls:write`
     * @summary Create a new external payroll for a company
     * @param {ExternalPayrollsApiCreateNewPayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public createNewPayroll(requestParameters: ExternalPayrollsApiCreateNewPayrollRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).createNewPayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an external payroll.  scope: `external_payrolls:write`
     * @summary Delete an external payroll
     * @param {ExternalPayrollsApiDeletePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public deletePayroll(requestParameters: ExternalPayrollsApiDeletePayrollRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).deletePayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.  scope: `external_payrolls:write`
     * @summary Finalize tax liabilities options and convert into processed payrolls
     * @param {ExternalPayrollsApiFinalizeTaxLiabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public finalizeTaxLiabilities(requestParameters: ExternalPayrollsApiFinalizeTaxLiabilitiesRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).finalizeTaxLiabilities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an external payroll for a given company.  scope: `external_payrolls:read`
     * @summary Get an external payroll
     * @param {ExternalPayrollsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public getById(requestParameters: ExternalPayrollsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tax liabilities from aggregate external payrolls for a company.  scope: `external_payrolls:read`
     * @summary Get tax liabilities
     * @param {ExternalPayrollsApiGetTaxLiabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public getTaxLiabilities(requestParameters: ExternalPayrollsApiGetTaxLiabilitiesRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).getTaxLiabilities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tax suggestions for an external payroll. Earnings and/or benefits data must be saved prior to the calculation in order to retrieve accurate tax calculation.  scope: `external_payrolls:read`
     * @summary Get tax suggestions for an external payroll
     * @param {ExternalPayrollsApiGetTaxSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public getTaxSuggestions(requestParameters: ExternalPayrollsApiGetTaxSuggestionsRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).getTaxSuggestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an external payroll for a given company.  scope: `external_payrolls:read`
     * @summary Get external payrolls for a company
     * @param {ExternalPayrollsApiListForCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public listForCompany(requestParameters: ExternalPayrollsApiListForCompanyRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).listForCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an external payroll with a list of external payroll items  scope: `external_payrolls:write`
     * @summary Update an external payroll
     * @param {ExternalPayrollsApiUpdatePayrollItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public updatePayrollItems(requestParameters: ExternalPayrollsApiUpdatePayrollItemsRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).updatePayrollItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update tax liabilities for a company.  scope: `external_payrolls:write`
     * @summary Update tax liabilities
     * @param {ExternalPayrollsApiUpdateTaxLiabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalPayrollsApiGenerated
     */
    public updateTaxLiabilities(requestParameters: ExternalPayrollsApiUpdateTaxLiabilitiesRequest, options?: AxiosRequestConfig) {
        return ExternalPayrollsApiFp(this.configuration).updateTaxLiabilities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
