/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayPeriod } from '../models';
// @ts-ignore
import { PaySchedule } from '../models';
// @ts-ignore
import { PayScheduleAssignment } from '../models';
// @ts-ignore
import { PayScheduleAssignmentBody } from '../models';
// @ts-ignore
import { PayScheduleAssignmentBodyDepartmentsInner } from '../models';
// @ts-ignore
import { PayScheduleAssignmentBodyEmployeesInner } from '../models';
// @ts-ignore
import { PayScheduleAssignmentPreview } from '../models';
// @ts-ignore
import { PaySchedulesCreateNewRequest } from '../models';
// @ts-ignore
import { PaySchedulesPreviewPayScheduleDatesResponse } from '../models';
// @ts-ignore
import { PaySchedulesUpdatePayScheduleRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
// @ts-ignore
import { UnprocessedTerminationPayPeriod } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaySchedulesApi - axios parameter creator
 * @export
 */
export const PaySchedulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: `pay_schedules:write`
         * @summary Assign pay schedules for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayScheduleAssignmentBody} [payScheduleAssignmentBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeesToSchedules: async (companyId: string, xGustoApiVersion?: '2024-03-01', payScheduleAssignmentBody?: PayScheduleAssignmentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('assignEmployeesToSchedules', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/assign`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payScheduleAssignmentBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/assign',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payScheduleAssignmentBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
         * @summary Create a new pay schedule
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PaySchedulesCreateNewRequest} [paySchedulesCreateNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (companyId: string, xGustoApiVersion?: '2024-03-01', paySchedulesCreateNewRequest?: PaySchedulesCreateNewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNew', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paySchedulesCreateNewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paySchedulesCreateNewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignments: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAssignments', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/assignments`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/assignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {string} companyId The UUID of the company
         * @param {string} payScheduleId The UUID of the pay schedule
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyId: string, payScheduleId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getDetails', 'companyId', companyId)
            // verify required parameter 'payScheduleId' is not null or undefined
            assertParamExists('getDetails', 'payScheduleId', payScheduleId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"pay_schedule_id"}}`, encodeURIComponent(String(payScheduleId !== undefined ? payScheduleId : `-pay_schedule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {string} companyId The UUID of the company
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [payrollTypes] regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayPeriods: async (companyId: string, startDate?: string, endDate?: string, payrollTypes?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPayPeriods', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_periods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (payrollTypes !== undefined) {
                localVarQueryParameter['payroll_types'] = payrollTypes;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_periods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnprocessedTerminationPayPeriods: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getUnprocessedTerminationPayPeriods', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_periods/unprocessed_termination_pay_periods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listForCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: `pay_schedules:write`
         * @summary Preview pay schedule assignments for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayScheduleAssignmentBody} [payScheduleAssignmentBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewAssignmentsForCompany: async (companyId: string, xGustoApiVersion?: '2024-03-01', payScheduleAssignmentBody?: PayScheduleAssignmentBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('previewAssignmentsForCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/assignment_preview`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payScheduleAssignmentBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/assignment_preview',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payScheduleAssignmentBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a preview of a pay schedule with the specified parameters  scope: `pay_schedules:write`
         * @summary Preview pay schedule dates
         * @param {string} companyId The UUID of the company
         * @param {'Every week' | 'Every other week' | 'Twice per month' | 'Monthly'} [frequency] The frequency that employees on this pay schedule are paid with Gusto.
         * @param {string} [anchorPayDate] The first date that employees on this pay schedule are paid with Gusto.
         * @param {string} [anchorEndOfPayPeriod] The last date of the first pay period. This can be the same date as the anchor pay date.
         * @param {number} [day1] An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
         * @param {number} [day2] An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the \&quot;Twice per month\&quot; frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewPayScheduleDates: async (companyId: string, frequency?: 'Every week' | 'Every other week' | 'Twice per month' | 'Monthly', anchorPayDate?: string, anchorEndOfPayPeriod?: string, day1?: number, day2?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('previewPayScheduleDates', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/preview`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (frequency !== undefined) {
                localVarQueryParameter['frequency'] = frequency;
            }

            if (anchorPayDate !== undefined) {
                localVarQueryParameter['anchor_pay_date'] = anchorPayDate;
            }

            if (anchorEndOfPayPeriod !== undefined) {
                localVarQueryParameter['anchor_end_of_pay_period'] = anchorEndOfPayPeriod;
            }

            if (day1 !== undefined) {
                localVarQueryParameter['day_1'] = day1;
            }

            if (day2 !== undefined) {
                localVarQueryParameter['day_2'] = day2;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/preview',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a pay schedule.  scope: `pay_schedules:write`
         * @summary Update a pay schedule
         * @param {string} companyId The UUID of the company
         * @param {string} payScheduleId The UUID of the pay schedule
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PaySchedulesUpdatePayScheduleRequest} [paySchedulesUpdatePayScheduleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaySchedule: async (companyId: string, payScheduleId: string, xGustoApiVersion?: '2024-03-01', paySchedulesUpdatePayScheduleRequest?: PaySchedulesUpdatePayScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updatePaySchedule', 'companyId', companyId)
            // verify required parameter 'payScheduleId' is not null or undefined
            assertParamExists('updatePaySchedule', 'payScheduleId', payScheduleId)
            const localVarPath = `/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"pay_schedule_id"}}`, encodeURIComponent(String(payScheduleId !== undefined ? payScheduleId : `-pay_schedule_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paySchedulesUpdatePayScheduleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/pay_schedules/{pay_schedule_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paySchedulesUpdatePayScheduleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaySchedulesApi - functional programming interface
 * @export
 */
export const PaySchedulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaySchedulesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: `pay_schedules:write`
         * @summary Assign pay schedules for a company
         * @param {PaySchedulesApiAssignEmployeesToSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignEmployeesToSchedules(requestParameters: PaySchedulesApiAssignEmployeesToSchedulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const payScheduleAssignmentBody: PayScheduleAssignmentBody = {
                type: requestParameters.type,
                hourly_pay_schedule_uuid: requestParameters.hourly_pay_schedule_uuid,
                salaried_pay_schedule_uuid: requestParameters.salaried_pay_schedule_uuid,
                default_pay_schedule_uuid: requestParameters.default_pay_schedule_uuid,
                employees: requestParameters.employees,
                departments: requestParameters.departments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignEmployeesToSchedules(requestParameters.companyId, requestParameters.xGustoApiVersion, payScheduleAssignmentBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
         * @summary Create a new pay schedule
         * @param {PaySchedulesApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: PaySchedulesApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaySchedule>> {
            const paySchedulesCreateNewRequest: PaySchedulesCreateNewRequest = {
                frequency: requestParameters.frequency,
                anchor_pay_date: requestParameters.anchor_pay_date,
                anchor_end_of_pay_period: requestParameters.anchor_end_of_pay_period,
                day_1: requestParameters.day_1,
                day_2: requestParameters.day_2,
                custom_name: requestParameters.custom_name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.companyId, requestParameters.xGustoApiVersion, paySchedulesCreateNewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayScheduleAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignments(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaySchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyId, requestParameters.payScheduleId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {PaySchedulesApiGetPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayPeriods(requestParameters: PaySchedulesApiGetPayPeriodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayPeriods(requestParameters.companyId, requestParameters.startDate, requestParameters.endDate, requestParameters.payrollTypes, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnprocessedTerminationPayPeriod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnprocessedTerminationPayPeriods(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {PaySchedulesApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForCompany(requestParameters: PaySchedulesApiListForCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaySchedule>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForCompany(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: `pay_schedules:write`
         * @summary Preview pay schedule assignments for a company
         * @param {PaySchedulesApiPreviewAssignmentsForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewAssignmentsForCompany(requestParameters: PaySchedulesApiPreviewAssignmentsForCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayScheduleAssignmentPreview>> {
            const payScheduleAssignmentBody: PayScheduleAssignmentBody = {
                type: requestParameters.type,
                hourly_pay_schedule_uuid: requestParameters.hourly_pay_schedule_uuid,
                salaried_pay_schedule_uuid: requestParameters.salaried_pay_schedule_uuid,
                default_pay_schedule_uuid: requestParameters.default_pay_schedule_uuid,
                employees: requestParameters.employees,
                departments: requestParameters.departments
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewAssignmentsForCompany(requestParameters.companyId, requestParameters.xGustoApiVersion, payScheduleAssignmentBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a preview of a pay schedule with the specified parameters  scope: `pay_schedules:write`
         * @summary Preview pay schedule dates
         * @param {PaySchedulesApiPreviewPayScheduleDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewPayScheduleDates(requestParameters: PaySchedulesApiPreviewPayScheduleDatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaySchedulesPreviewPayScheduleDatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewPayScheduleDates(requestParameters.companyId, requestParameters.frequency, requestParameters.anchorPayDate, requestParameters.anchorEndOfPayPeriod, requestParameters.day1, requestParameters.day2, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a pay schedule.  scope: `pay_schedules:write`
         * @summary Update a pay schedule
         * @param {PaySchedulesApiUpdatePayScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaySchedule(requestParameters: PaySchedulesApiUpdatePayScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaySchedule>> {
            const paySchedulesUpdatePayScheduleRequest: PaySchedulesUpdatePayScheduleRequest = {
                version: requestParameters.version,
                frequency: requestParameters.frequency,
                anchor_pay_date: requestParameters.anchor_pay_date,
                anchor_end_of_pay_period: requestParameters.anchor_end_of_pay_period,
                day_1: requestParameters.day_1,
                day_2: requestParameters.day_2,
                custom_name: requestParameters.custom_name,
                auto_pilot: requestParameters.auto_pilot
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaySchedule(requestParameters.companyId, requestParameters.payScheduleId, requestParameters.xGustoApiVersion, paySchedulesUpdatePayScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaySchedulesApi - factory interface
 * @export
 */
export const PaySchedulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaySchedulesApiFp(configuration)
    return {
        /**
         * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: `pay_schedules:write`
         * @summary Assign pay schedules for a company
         * @param {PaySchedulesApiAssignEmployeesToSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeesToSchedules(requestParameters: PaySchedulesApiAssignEmployeesToSchedulesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignEmployeesToSchedules(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
         * @summary Create a new pay schedule
         * @param {PaySchedulesApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: PaySchedulesApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<PaySchedule> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
         * @summary Get pay schedule assignments for a company
         * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<PayScheduleAssignment> {
            return localVarFp.getAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get a pay schedule
         * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PaySchedule> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
         * @summary Get pay periods for a company
         * @param {PaySchedulesApiGetPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayPeriods(requestParameters: PaySchedulesApiGetPayPeriodsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayPeriod>> {
            return localVarFp.getPayPeriods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
         * @summary Get termination pay periods for a company
         * @param {PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UnprocessedTerminationPayPeriod>> {
            return localVarFp.getUnprocessedTerminationPayPeriods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
         * @summary Get the pay schedules for a company
         * @param {PaySchedulesApiListForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForCompany(requestParameters: PaySchedulesApiListForCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PaySchedule>> {
            return localVarFp.listForCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: `pay_schedules:write`
         * @summary Preview pay schedule assignments for a company
         * @param {PaySchedulesApiPreviewAssignmentsForCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewAssignmentsForCompany(requestParameters: PaySchedulesApiPreviewAssignmentsForCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<PayScheduleAssignmentPreview> {
            return localVarFp.previewAssignmentsForCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a preview of a pay schedule with the specified parameters  scope: `pay_schedules:write`
         * @summary Preview pay schedule dates
         * @param {PaySchedulesApiPreviewPayScheduleDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewPayScheduleDates(requestParameters: PaySchedulesApiPreviewPayScheduleDatesRequest, options?: AxiosRequestConfig): AxiosPromise<PaySchedulesPreviewPayScheduleDatesResponse> {
            return localVarFp.previewPayScheduleDates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a pay schedule.  scope: `pay_schedules:write`
         * @summary Update a pay schedule
         * @param {PaySchedulesApiUpdatePayScheduleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaySchedule(requestParameters: PaySchedulesApiUpdatePayScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<PaySchedule> {
            return localVarFp.updatePaySchedule(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignEmployeesToSchedules operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiAssignEmployeesToSchedulesRequest
 */
export type PaySchedulesApiAssignEmployeesToSchedulesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiAssignEmployeesToSchedules
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiAssignEmployeesToSchedules
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayScheduleAssignmentBody

/**
 * Request parameters for createNew operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiCreateNewRequest
 */
export type PaySchedulesApiCreateNewRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiCreateNew
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiCreateNew
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PaySchedulesCreateNewRequest

/**
 * Request parameters for getAssignments operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetAssignmentsRequest
 */
export type PaySchedulesApiGetAssignmentsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetAssignments
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetAssignments
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getDetails operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetDetailsRequest
 */
export type PaySchedulesApiGetDetailsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly companyId: string
    
    /**
    * The UUID of the pay schedule
    * @type {string}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly payScheduleId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetDetails
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getPayPeriods operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetPayPeriodsRequest
 */
export type PaySchedulesApiGetPayPeriodsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetPayPeriods
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof PaySchedulesApiGetPayPeriods
    */
    readonly startDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof PaySchedulesApiGetPayPeriods
    */
    readonly endDate?: string
    
    /**
    * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
    * @type {string}
    * @memberof PaySchedulesApiGetPayPeriods
    */
    readonly payrollTypes?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetPayPeriods
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getUnprocessedTerminationPayPeriods operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest
 */
export type PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiGetUnprocessedTerminationPayPeriods
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiGetUnprocessedTerminationPayPeriods
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listForCompany operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiListForCompanyRequest
 */
export type PaySchedulesApiListForCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiListForCompany
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof PaySchedulesApiListForCompany
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof PaySchedulesApiListForCompany
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiListForCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for previewAssignmentsForCompany operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiPreviewAssignmentsForCompanyRequest
 */
export type PaySchedulesApiPreviewAssignmentsForCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiPreviewAssignmentsForCompany
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiPreviewAssignmentsForCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayScheduleAssignmentBody

/**
 * Request parameters for previewPayScheduleDates operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiPreviewPayScheduleDatesRequest
 */
export type PaySchedulesApiPreviewPayScheduleDatesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly companyId: string
    
    /**
    * The frequency that employees on this pay schedule are paid with Gusto.
    * @type {'Every week' | 'Every other week' | 'Twice per month' | 'Monthly'}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly frequency?: 'Every week' | 'Every other week' | 'Twice per month' | 'Monthly'
    
    /**
    * The first date that employees on this pay schedule are paid with Gusto.
    * @type {string}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly anchorPayDate?: string
    
    /**
    * The last date of the first pay period. This can be the same date as the anchor pay date.
    * @type {string}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly anchorEndOfPayPeriod?: string
    
    /**
    * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
    * @type {number}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly day1?: number
    
    /**
    * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the \"Twice per month\" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
    * @type {number}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly day2?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiPreviewPayScheduleDates
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updatePaySchedule operation in PaySchedulesApi.
 * @export
 * @interface PaySchedulesApiUpdatePayScheduleRequest
 */
export type PaySchedulesApiUpdatePayScheduleRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaySchedulesApiUpdatePaySchedule
    */
    readonly companyId: string
    
    /**
    * The UUID of the pay schedule
    * @type {string}
    * @memberof PaySchedulesApiUpdatePaySchedule
    */
    readonly payScheduleId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaySchedulesApiUpdatePaySchedule
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PaySchedulesUpdatePayScheduleRequest

/**
 * PaySchedulesApiGenerated - object-oriented interface
 * @export
 * @class PaySchedulesApiGenerated
 * @extends {BaseAPI}
 */
export class PaySchedulesApiGenerated extends BaseAPI {
    /**
     * This endpoints assigns employees to specified pay schedules based on the pay schedule type.  scope: `pay_schedules:write`
     * @summary Assign pay schedules for a company
     * @param {PaySchedulesApiAssignEmployeesToSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public assignEmployeesToSchedules(requestParameters: PaySchedulesApiAssignEmployeesToSchedulesRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).assignEmployeesToSchedules(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.  If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.  Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
     * @summary Create a new pay schedule
     * @param {PaySchedulesApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public createNew(requestParameters: PaySchedulesApiCreateNewRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.  scope: `pay_schedules:read`
     * @summary Get pay schedule assignments for a company
     * @param {PaySchedulesApiGetAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getAssignments(requestParameters: PaySchedulesApiGetAssignmentsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
     * @summary Get a pay schedule
     * @param {PaySchedulesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getDetails(requestParameters: PaySchedulesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.  By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.  Starting in version \'2023-04-01\', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.  scope: `payrolls:read`
     * @summary Get pay periods for a company
     * @param {PaySchedulesApiGetPayPeriodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getPayPeriods(requestParameters: PaySchedulesApiGetPayPeriodsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getPayPeriods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a payroll admin terminates an employee and selects \"Dismissal Payroll\" as the employee\'s final payroll, their last pay period will appear on the list.  This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.  scope: `payrolls:read`
     * @summary Get termination pay periods for a company
     * @param {PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public getUnprocessedTerminationPayPeriods(requestParameters: PaySchedulesApiGetUnprocessedTerminationPayPeriodsRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).getUnprocessedTerminationPayPeriods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.  scope: `pay_schedules:read`
     * @summary Get the pay schedules for a company
     * @param {PaySchedulesApiListForCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public listForCompany(requestParameters: PaySchedulesApiListForCompanyRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).listForCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoints returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.  scope: `pay_schedules:write`
     * @summary Preview pay schedule assignments for a company
     * @param {PaySchedulesApiPreviewAssignmentsForCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public previewAssignmentsForCompany(requestParameters: PaySchedulesApiPreviewAssignmentsForCompanyRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).previewAssignmentsForCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a preview of a pay schedule with the specified parameters  scope: `pay_schedules:write`
     * @summary Preview pay schedule dates
     * @param {PaySchedulesApiPreviewPayScheduleDatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public previewPayScheduleDates(requestParameters: PaySchedulesApiPreviewPayScheduleDatesRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).previewPayScheduleDates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a pay schedule.  scope: `pay_schedules:write`
     * @summary Update a pay schedule
     * @param {PaySchedulesApiUpdatePayScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaySchedulesApiGenerated
     */
    public updatePaySchedule(requestParameters: PaySchedulesApiUpdatePayScheduleRequest, options?: AxiosRequestConfig) {
        return PaySchedulesApiFp(this.configuration).updatePaySchedule(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
