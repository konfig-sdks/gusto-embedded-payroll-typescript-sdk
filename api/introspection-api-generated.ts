/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Authentication } from '../models';
// @ts-ignore
import { IntrospectionExchangeRefreshTokenRequest } from '../models';
// @ts-ignore
import { IntrospectionGetCurrentAccessTokenInfoResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IntrospectionApi - axios parameter creator
 * @export
 */
export const IntrospectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exchange a refresh token for a new access token.  The previous `refresh_token` will be revoked on the first usage of the new `access_token`.  The `expires_in` value is provided in seconds from when the `access_token` was generated.
         * @summary Refresh access token
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {IntrospectionExchangeRefreshTokenRequest} [introspectionExchangeRefreshTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeRefreshToken: async (xGustoApiVersion?: '2024-03-01', introspectionExchangeRefreshTokenRequest?: IntrospectionExchangeRefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: introspectionExchangeRefreshTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(introspectionExchangeRefreshTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns scope and resource information associated with the current access token.
         * @summary Get info about the current access token
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentAccessTokenInfo: async (xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/token_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/token_info',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntrospectionApi - functional programming interface
 * @export
 */
export const IntrospectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntrospectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Exchange a refresh token for a new access token.  The previous `refresh_token` will be revoked on the first usage of the new `access_token`.  The `expires_in` value is provided in seconds from when the `access_token` was generated.
         * @summary Refresh access token
         * @param {IntrospectionApiExchangeRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeRefreshToken(requestParameters: IntrospectionApiExchangeRefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authentication>> {
            const introspectionExchangeRefreshTokenRequest: IntrospectionExchangeRefreshTokenRequest = {
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret,
                redirect_uri: requestParameters.redirect_uri,
                refresh_token: requestParameters.refresh_token,
                grant_type: requestParameters.grant_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeRefreshToken(requestParameters.xGustoApiVersion, introspectionExchangeRefreshTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns scope and resource information associated with the current access token.
         * @summary Get info about the current access token
         * @param {IntrospectionApiGetCurrentAccessTokenInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentAccessTokenInfo(requestParameters: IntrospectionApiGetCurrentAccessTokenInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntrospectionGetCurrentAccessTokenInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentAccessTokenInfo(requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntrospectionApi - factory interface
 * @export
 */
export const IntrospectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntrospectionApiFp(configuration)
    return {
        /**
         * Exchange a refresh token for a new access token.  The previous `refresh_token` will be revoked on the first usage of the new `access_token`.  The `expires_in` value is provided in seconds from when the `access_token` was generated.
         * @summary Refresh access token
         * @param {IntrospectionApiExchangeRefreshTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeRefreshToken(requestParameters: IntrospectionApiExchangeRefreshTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Authentication> {
            return localVarFp.exchangeRefreshToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns scope and resource information associated with the current access token.
         * @summary Get info about the current access token
         * @param {IntrospectionApiGetCurrentAccessTokenInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentAccessTokenInfo(requestParameters: IntrospectionApiGetCurrentAccessTokenInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IntrospectionGetCurrentAccessTokenInfoResponse> {
            return localVarFp.getCurrentAccessTokenInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for exchangeRefreshToken operation in IntrospectionApi.
 * @export
 * @interface IntrospectionApiExchangeRefreshTokenRequest
 */
export type IntrospectionApiExchangeRefreshTokenRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof IntrospectionApiExchangeRefreshToken
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & IntrospectionExchangeRefreshTokenRequest

/**
 * Request parameters for getCurrentAccessTokenInfo operation in IntrospectionApi.
 * @export
 * @interface IntrospectionApiGetCurrentAccessTokenInfoRequest
 */
export type IntrospectionApiGetCurrentAccessTokenInfoRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof IntrospectionApiGetCurrentAccessTokenInfo
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * IntrospectionApiGenerated - object-oriented interface
 * @export
 * @class IntrospectionApiGenerated
 * @extends {BaseAPI}
 */
export class IntrospectionApiGenerated extends BaseAPI {
    /**
     * Exchange a refresh token for a new access token.  The previous `refresh_token` will be revoked on the first usage of the new `access_token`.  The `expires_in` value is provided in seconds from when the `access_token` was generated.
     * @summary Refresh access token
     * @param {IntrospectionApiExchangeRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntrospectionApiGenerated
     */
    public exchangeRefreshToken(requestParameters: IntrospectionApiExchangeRefreshTokenRequest, options?: AxiosRequestConfig) {
        return IntrospectionApiFp(this.configuration).exchangeRefreshToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns scope and resource information associated with the current access token.
     * @summary Get info about the current access token
     * @param {IntrospectionApiGetCurrentAccessTokenInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntrospectionApiGenerated
     */
    public getCurrentAccessTokenInfo(requestParameters: IntrospectionApiGetCurrentAccessTokenInfoRequest = {}, options?: AxiosRequestConfig) {
        return IntrospectionApiFp(this.configuration).getCurrentAccessTokenInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
