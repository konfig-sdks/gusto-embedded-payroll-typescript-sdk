/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeFederalTax } from '../models';
// @ts-ignore
import { EmployeeStateTax } from '../models';
// @ts-ignore
import { EmployeeTaxSetupUpdateFederalTaxesRequest } from '../models';
// @ts-ignore
import { EmployeeTaxSetupUpdateStateTaxesRequest } from '../models';
// @ts-ignore
import { EmployeeTaxSetupUpdateStateTaxesRequestStatesInner } from '../models';
// @ts-ignore
import { EmployeeTaxSetupUpdateStateTaxesResponseInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeTaxSetupApi - axios parameter creator
 * @export
 */
export const EmployeeTaxSetupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get attributes relevant for an employee\'s federal taxes.   scope: `employee_federal_taxes:read`
         * @summary Get an employee\'s federal taxes
         * @param {string} employeeUuid The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederalTaxesById: async (employeeUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('getFederalTaxesById', 'employeeUuid', employeeUuid)
            const localVarPath = `/v1/employees/{employee_uuid}/federal_taxes`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/federal_taxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attributes relevant for an employee\'s state taxes.  The data required to correctly calculate an employee\'s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the `valid_from` and `valid_up_to` must always be `\"2010-01-01\"` and `null` respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The `file_new_hire_report` question will only be listed if: - the `employee.onboarding_status` is one of the following:   - `admin_onboarding_incomplete`   - `self_onboarding_awaiting_admin_review` - that employee\'s work state requires filing a new hire report  scope: `employee_state_taxes:read` 
         * @summary Get an employee\'s state taxes
         * @param {string} employeeUuid The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateTaxes: async (employeeUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('getStateTaxes', 'employeeUuid', employeeUuid)
            const localVarPath = `/v1/employees/{employee_uuid}/state_taxes`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/state_taxes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relevant for an employee\'s federal taxes.  scope: `employee_federal_taxes:write`
         * @summary Update an employee\'s federal taxes
         * @param {string} employeeUuid The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeTaxSetupUpdateFederalTaxesRequest} [employeeTaxSetupUpdateFederalTaxesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFederalTaxes: async (employeeUuid: string, xGustoApiVersion?: '2024-03-01', employeeTaxSetupUpdateFederalTaxesRequest?: EmployeeTaxSetupUpdateFederalTaxesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('updateFederalTaxes', 'employeeUuid', employeeUuid)
            const localVarPath = `/v1/employees/{employee_uuid}/federal_taxes`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeTaxSetupUpdateFederalTaxesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/federal_taxes',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeTaxSetupUpdateFederalTaxesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relevant for an employee\'s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - `valid_from` and `valid_up_to` must be `\"2010-01-01\"` and `null` respectively.  scope: `employee_state_taxes:write`
         * @summary Update an employee\'s state taxes
         * @param {string} employeeUuid The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeTaxSetupUpdateStateTaxesRequest} [employeeTaxSetupUpdateStateTaxesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateTaxes: async (employeeUuid: string, xGustoApiVersion?: '2024-03-01', employeeTaxSetupUpdateStateTaxesRequest?: EmployeeTaxSetupUpdateStateTaxesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('updateStateTaxes', 'employeeUuid', employeeUuid)
            const localVarPath = `/v1/employees/{employee_uuid}/state_taxes`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeTaxSetupUpdateStateTaxesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/state_taxes',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeTaxSetupUpdateStateTaxesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeTaxSetupApi - functional programming interface
 * @export
 */
export const EmployeeTaxSetupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeTaxSetupApiAxiosParamCreator(configuration)
    return {
        /**
         * Get attributes relevant for an employee\'s federal taxes.   scope: `employee_federal_taxes:read`
         * @summary Get an employee\'s federal taxes
         * @param {EmployeeTaxSetupApiGetFederalTaxesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederalTaxesById(requestParameters: EmployeeTaxSetupApiGetFederalTaxesByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeFederalTax>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederalTaxesById(requestParameters.employeeUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get attributes relevant for an employee\'s state taxes.  The data required to correctly calculate an employee\'s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the `valid_from` and `valid_up_to` must always be `\"2010-01-01\"` and `null` respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The `file_new_hire_report` question will only be listed if: - the `employee.onboarding_status` is one of the following:   - `admin_onboarding_incomplete`   - `self_onboarding_awaiting_admin_review` - that employee\'s work state requires filing a new hire report  scope: `employee_state_taxes:read` 
         * @summary Get an employee\'s state taxes
         * @param {EmployeeTaxSetupApiGetStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStateTaxes(requestParameters: EmployeeTaxSetupApiGetStateTaxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeStateTax>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStateTaxes(requestParameters.employeeUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update attributes relevant for an employee\'s federal taxes.  scope: `employee_federal_taxes:write`
         * @summary Update an employee\'s federal taxes
         * @param {EmployeeTaxSetupApiUpdateFederalTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFederalTaxes(requestParameters: EmployeeTaxSetupApiUpdateFederalTaxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeFederalTax>> {
            const employeeTaxSetupUpdateFederalTaxesRequest: EmployeeTaxSetupUpdateFederalTaxesRequest = {
                version: requestParameters.version,
                filing_status: requestParameters.filing_status,
                extra_withholding: requestParameters.extra_withholding,
                two_jobs: requestParameters.two_jobs,
                dependents_amount: requestParameters.dependents_amount,
                other_income: requestParameters.other_income,
                deductions: requestParameters.deductions,
                w4_data_type: requestParameters.w4_data_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFederalTaxes(requestParameters.employeeUuid, requestParameters.xGustoApiVersion, employeeTaxSetupUpdateFederalTaxesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update attributes relevant for an employee\'s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - `valid_from` and `valid_up_to` must be `\"2010-01-01\"` and `null` respectively.  scope: `employee_state_taxes:write`
         * @summary Update an employee\'s state taxes
         * @param {EmployeeTaxSetupApiUpdateStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStateTaxes(requestParameters: EmployeeTaxSetupApiUpdateStateTaxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeStateTax>>> {
            const employeeTaxSetupUpdateStateTaxesRequest: EmployeeTaxSetupUpdateStateTaxesRequest = {
                states: requestParameters.states
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStateTaxes(requestParameters.employeeUuid, requestParameters.xGustoApiVersion, employeeTaxSetupUpdateStateTaxesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeTaxSetupApi - factory interface
 * @export
 */
export const EmployeeTaxSetupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeTaxSetupApiFp(configuration)
    return {
        /**
         * Get attributes relevant for an employee\'s federal taxes.   scope: `employee_federal_taxes:read`
         * @summary Get an employee\'s federal taxes
         * @param {EmployeeTaxSetupApiGetFederalTaxesByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederalTaxesById(requestParameters: EmployeeTaxSetupApiGetFederalTaxesByIdRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeFederalTax> {
            return localVarFp.getFederalTaxesById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get attributes relevant for an employee\'s state taxes.  The data required to correctly calculate an employee\'s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the `valid_from` and `valid_up_to` must always be `\"2010-01-01\"` and `null` respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The `file_new_hire_report` question will only be listed if: - the `employee.onboarding_status` is one of the following:   - `admin_onboarding_incomplete`   - `self_onboarding_awaiting_admin_review` - that employee\'s work state requires filing a new hire report  scope: `employee_state_taxes:read` 
         * @summary Get an employee\'s state taxes
         * @param {EmployeeTaxSetupApiGetStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateTaxes(requestParameters: EmployeeTaxSetupApiGetStateTaxesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeStateTax>> {
            return localVarFp.getStateTaxes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update attributes relevant for an employee\'s federal taxes.  scope: `employee_federal_taxes:write`
         * @summary Update an employee\'s federal taxes
         * @param {EmployeeTaxSetupApiUpdateFederalTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFederalTaxes(requestParameters: EmployeeTaxSetupApiUpdateFederalTaxesRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeFederalTax> {
            return localVarFp.updateFederalTaxes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update attributes relevant for an employee\'s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - `valid_from` and `valid_up_to` must be `\"2010-01-01\"` and `null` respectively.  scope: `employee_state_taxes:write`
         * @summary Update an employee\'s state taxes
         * @param {EmployeeTaxSetupApiUpdateStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateTaxes(requestParameters: EmployeeTaxSetupApiUpdateStateTaxesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeStateTax>> {
            return localVarFp.updateStateTaxes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFederalTaxesById operation in EmployeeTaxSetupApi.
 * @export
 * @interface EmployeeTaxSetupApiGetFederalTaxesByIdRequest
 */
export type EmployeeTaxSetupApiGetFederalTaxesByIdRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeTaxSetupApiGetFederalTaxesById
    */
    readonly employeeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeTaxSetupApiGetFederalTaxesById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getStateTaxes operation in EmployeeTaxSetupApi.
 * @export
 * @interface EmployeeTaxSetupApiGetStateTaxesRequest
 */
export type EmployeeTaxSetupApiGetStateTaxesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeTaxSetupApiGetStateTaxes
    */
    readonly employeeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeTaxSetupApiGetStateTaxes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateFederalTaxes operation in EmployeeTaxSetupApi.
 * @export
 * @interface EmployeeTaxSetupApiUpdateFederalTaxesRequest
 */
export type EmployeeTaxSetupApiUpdateFederalTaxesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeTaxSetupApiUpdateFederalTaxes
    */
    readonly employeeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeTaxSetupApiUpdateFederalTaxes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeTaxSetupUpdateFederalTaxesRequest

/**
 * Request parameters for updateStateTaxes operation in EmployeeTaxSetupApi.
 * @export
 * @interface EmployeeTaxSetupApiUpdateStateTaxesRequest
 */
export type EmployeeTaxSetupApiUpdateStateTaxesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeTaxSetupApiUpdateStateTaxes
    */
    readonly employeeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeTaxSetupApiUpdateStateTaxes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeTaxSetupUpdateStateTaxesRequest

/**
 * EmployeeTaxSetupApiGenerated - object-oriented interface
 * @export
 * @class EmployeeTaxSetupApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeTaxSetupApiGenerated extends BaseAPI {
    /**
     * Get attributes relevant for an employee\'s federal taxes.   scope: `employee_federal_taxes:read`
     * @summary Get an employee\'s federal taxes
     * @param {EmployeeTaxSetupApiGetFederalTaxesByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeTaxSetupApiGenerated
     */
    public getFederalTaxesById(requestParameters: EmployeeTaxSetupApiGetFederalTaxesByIdRequest, options?: AxiosRequestConfig) {
        return EmployeeTaxSetupApiFp(this.configuration).getFederalTaxesById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get attributes relevant for an employee\'s state taxes.  The data required to correctly calculate an employee\'s state taxes varies by both home and work location. This API returns information about each question that must be answered grouped by state. Mostly commonly, an employee lives and works in the same state and will only have questions for a single state. The response contains metadata about each question, the type of answer expected, and the current answer stored in Gusto for that question.  Answers are represented by an array. Today, this array can only be empty or contain exactly one element, but is designed to allow for forward compatibility with effective-dated fields. Until effective dated answers are supported, the `valid_from` and `valid_up_to` must always be `\"2010-01-01\"` and `null` respectively.  ## About filing new hire reports Payroll Admins are responsible for filing a new hire report for each Employee. The `file_new_hire_report` question will only be listed if: - the `employee.onboarding_status` is one of the following:   - `admin_onboarding_incomplete`   - `self_onboarding_awaiting_admin_review` - that employee\'s work state requires filing a new hire report  scope: `employee_state_taxes:read` 
     * @summary Get an employee\'s state taxes
     * @param {EmployeeTaxSetupApiGetStateTaxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeTaxSetupApiGenerated
     */
    public getStateTaxes(requestParameters: EmployeeTaxSetupApiGetStateTaxesRequest, options?: AxiosRequestConfig) {
        return EmployeeTaxSetupApiFp(this.configuration).getStateTaxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update attributes relevant for an employee\'s federal taxes.  scope: `employee_federal_taxes:write`
     * @summary Update an employee\'s federal taxes
     * @param {EmployeeTaxSetupApiUpdateFederalTaxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeTaxSetupApiGenerated
     */
    public updateFederalTaxes(requestParameters: EmployeeTaxSetupApiUpdateFederalTaxesRequest, options?: AxiosRequestConfig) {
        return EmployeeTaxSetupApiFp(this.configuration).updateFederalTaxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update attributes relevant for an employee\'s state taxes.  As described for the GET endpoint, the answers must be supplied in the effective-dated format, but currently only a single answer will be accepted - `valid_from` and `valid_up_to` must be `\"2010-01-01\"` and `null` respectively.  scope: `employee_state_taxes:write`
     * @summary Update an employee\'s state taxes
     * @param {EmployeeTaxSetupApiUpdateStateTaxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeTaxSetupApiGenerated
     */
    public updateStateTaxes(requestParameters: EmployeeTaxSetupApiUpdateStateTaxesRequest, options?: AxiosRequestConfig) {
        return EmployeeTaxSetupApiFp(this.configuration).updateStateTaxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
