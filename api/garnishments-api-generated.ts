/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Garnishment } from '../models';
// @ts-ignore
import { GarnishmentsCreateGarnishmentRequest } from '../models';
// @ts-ignore
import { GarnishmentsUpdateGarnishmentRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GarnishmentsApi - axios parameter creator
 * @export
 */
export const GarnishmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Create a garnishment
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {GarnishmentsCreateGarnishmentRequest} [garnishmentsCreateGarnishmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGarnishment: async (employeeId: string, xGustoApiVersion?: '2024-03-01', garnishmentsCreateGarnishmentRequest?: GarnishmentsCreateGarnishmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createGarnishment', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/garnishments`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: garnishmentsCreateGarnishmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/garnishments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(garnishmentsCreateGarnishmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get garnishments for an employee
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGarnishments: async (employeeId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeGarnishments', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/garnishments`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/garnishments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get a garnishment
         * @param {string} garnishmentId The UUID of the garnishment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGarnishment: async (garnishmentId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'garnishmentId' is not null or undefined
            assertParamExists('getGarnishment', 'garnishmentId', garnishmentId)
            const localVarPath = `/v1/garnishments/{garnishment_id}`
                .replace(`{${"garnishment_id"}}`, encodeURIComponent(String(garnishmentId !== undefined ? garnishmentId : `-garnishment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/garnishments/{garnishment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Update a garnishment
         * @param {string} garnishmentId The UUID of the garnishment
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {GarnishmentsUpdateGarnishmentRequest} [garnishmentsUpdateGarnishmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGarnishment: async (garnishmentId: string, xGustoApiVersion?: '2024-03-01', garnishmentsUpdateGarnishmentRequest?: GarnishmentsUpdateGarnishmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'garnishmentId' is not null or undefined
            assertParamExists('updateGarnishment', 'garnishmentId', garnishmentId)
            const localVarPath = `/v1/garnishments/{garnishment_id}`
                .replace(`{${"garnishment_id"}}`, encodeURIComponent(String(garnishmentId !== undefined ? garnishmentId : `-garnishment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: garnishmentsUpdateGarnishmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/garnishments/{garnishment_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(garnishmentsUpdateGarnishmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GarnishmentsApi - functional programming interface
 * @export
 */
export const GarnishmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GarnishmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Create a garnishment
         * @param {GarnishmentsApiCreateGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGarnishment(requestParameters: GarnishmentsApiCreateGarnishmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Garnishment>> {
            const garnishmentsCreateGarnishmentRequest: GarnishmentsCreateGarnishmentRequest = {
                description: requestParameters.description,
                active: requestParameters.active,
                amount: requestParameters.amount,
                court_ordered: requestParameters.court_ordered,
                times: requestParameters.times,
                recurring: requestParameters.recurring,
                annual_maximum: requestParameters.annual_maximum,
                pay_period_maximum: requestParameters.pay_period_maximum,
                deduct_as_percentage: requestParameters.deduct_as_percentage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGarnishment(requestParameters.employeeId, requestParameters.xGustoApiVersion, garnishmentsCreateGarnishmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get garnishments for an employee
         * @param {GarnishmentsApiGetEmployeeGarnishmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeGarnishments(requestParameters: GarnishmentsApiGetEmployeeGarnishmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Garnishment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeGarnishments(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get a garnishment
         * @param {GarnishmentsApiGetGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGarnishment(requestParameters: GarnishmentsApiGetGarnishmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Garnishment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGarnishment(requestParameters.garnishmentId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Update a garnishment
         * @param {GarnishmentsApiUpdateGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGarnishment(requestParameters: GarnishmentsApiUpdateGarnishmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Garnishment>> {
            const garnishmentsUpdateGarnishmentRequest: GarnishmentsUpdateGarnishmentRequest = {
                description: requestParameters.description,
                version: requestParameters.version,
                active: requestParameters.active,
                amount: requestParameters.amount,
                court_ordered: requestParameters.court_ordered,
                times: requestParameters.times,
                recurring: requestParameters.recurring,
                annual_maximum: requestParameters.annual_maximum,
                pay_period_maximum: requestParameters.pay_period_maximum,
                deduct_as_percentage: requestParameters.deduct_as_percentage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGarnishment(requestParameters.garnishmentId, requestParameters.xGustoApiVersion, garnishmentsUpdateGarnishmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GarnishmentsApi - factory interface
 * @export
 */
export const GarnishmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GarnishmentsApiFp(configuration)
    return {
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Create a garnishment
         * @param {GarnishmentsApiCreateGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGarnishment(requestParameters: GarnishmentsApiCreateGarnishmentRequest, options?: AxiosRequestConfig): AxiosPromise<Garnishment> {
            return localVarFp.createGarnishment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get garnishments for an employee
         * @param {GarnishmentsApiGetEmployeeGarnishmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGarnishments(requestParameters: GarnishmentsApiGetEmployeeGarnishmentsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Garnishment>> {
            return localVarFp.getEmployeeGarnishments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
         * @summary Get a garnishment
         * @param {GarnishmentsApiGetGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGarnishment(requestParameters: GarnishmentsApiGetGarnishmentRequest, options?: AxiosRequestConfig): AxiosPromise<Garnishment> {
            return localVarFp.getGarnishment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
         * @summary Update a garnishment
         * @param {GarnishmentsApiUpdateGarnishmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGarnishment(requestParameters: GarnishmentsApiUpdateGarnishmentRequest, options?: AxiosRequestConfig): AxiosPromise<Garnishment> {
            return localVarFp.updateGarnishment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createGarnishment operation in GarnishmentsApi.
 * @export
 * @interface GarnishmentsApiCreateGarnishmentRequest
 */
export type GarnishmentsApiCreateGarnishmentRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof GarnishmentsApiCreateGarnishment
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof GarnishmentsApiCreateGarnishment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & GarnishmentsCreateGarnishmentRequest

/**
 * Request parameters for getEmployeeGarnishments operation in GarnishmentsApi.
 * @export
 * @interface GarnishmentsApiGetEmployeeGarnishmentsRequest
 */
export type GarnishmentsApiGetEmployeeGarnishmentsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof GarnishmentsApiGetEmployeeGarnishments
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof GarnishmentsApiGetEmployeeGarnishments
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof GarnishmentsApiGetEmployeeGarnishments
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof GarnishmentsApiGetEmployeeGarnishments
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getGarnishment operation in GarnishmentsApi.
 * @export
 * @interface GarnishmentsApiGetGarnishmentRequest
 */
export type GarnishmentsApiGetGarnishmentRequest = {
    
    /**
    * The UUID of the garnishment
    * @type {string}
    * @memberof GarnishmentsApiGetGarnishment
    */
    readonly garnishmentId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof GarnishmentsApiGetGarnishment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateGarnishment operation in GarnishmentsApi.
 * @export
 * @interface GarnishmentsApiUpdateGarnishmentRequest
 */
export type GarnishmentsApiUpdateGarnishmentRequest = {
    
    /**
    * The UUID of the garnishment
    * @type {string}
    * @memberof GarnishmentsApiUpdateGarnishment
    */
    readonly garnishmentId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof GarnishmentsApiUpdateGarnishment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & GarnishmentsUpdateGarnishmentRequest

/**
 * GarnishmentsApiGenerated - object-oriented interface
 * @export
 * @class GarnishmentsApiGenerated
 * @extends {BaseAPI}
 */
export class GarnishmentsApiGenerated extends BaseAPI {
    /**
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
     * @summary Create a garnishment
     * @param {GarnishmentsApiCreateGarnishmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GarnishmentsApiGenerated
     */
    public createGarnishment(requestParameters: GarnishmentsApiCreateGarnishmentRequest, options?: AxiosRequestConfig) {
        return GarnishmentsApiFp(this.configuration).createGarnishment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
     * @summary Get garnishments for an employee
     * @param {GarnishmentsApiGetEmployeeGarnishmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GarnishmentsApiGenerated
     */
    public getEmployeeGarnishments(requestParameters: GarnishmentsApiGetEmployeeGarnishmentsRequest, options?: AxiosRequestConfig) {
        return GarnishmentsApiFp(this.configuration).getEmployeeGarnishments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:read`
     * @summary Get a garnishment
     * @param {GarnishmentsApiGetGarnishmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GarnishmentsApiGenerated
     */
    public getGarnishment(requestParameters: GarnishmentsApiGetGarnishmentRequest, options?: AxiosRequestConfig) {
        return GarnishmentsApiFp(this.configuration).getGarnishment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.  scope: `garnishments:write`
     * @summary Update a garnishment
     * @param {GarnishmentsApiUpdateGarnishmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GarnishmentsApiGenerated
     */
    public updateGarnishment(requestParameters: GarnishmentsApiUpdateGarnishmentRequest, options?: AxiosRequestConfig) {
        return GarnishmentsApiFp(this.configuration).updateGarnishment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
