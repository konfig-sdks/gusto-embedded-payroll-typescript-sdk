/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InvoiceData } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)   > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)  scope: `invoices:read`
         * @summary Retrieve invoicing data for companies
         * @param {string} invoicePeriod The month we are calculating the invoice for. Must be in YYYY-MM format
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {string} [companyUuids] Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. &#x60;?company_uuids&#x3D;781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5&#x60;
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicingDataForCompanies: async (invoicePeriod: string, page?: number, per?: number, companyUuids?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoicePeriod' is not null or undefined
            assertParamExists('getInvoicingDataForCompanies', 'invoicePeriod', invoicePeriod)
            const localVarPath = `/v1/invoices/{invoice_period}`
                .replace(`{${"invoice_period"}}`, encodeURIComponent(String(invoicePeriod !== undefined ? invoicePeriod : `-invoice_period-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (companyUuids !== undefined) {
                localVarQueryParameter['company_uuids'] = companyUuids;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/invoices/{invoice_period}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)   > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)  scope: `invoices:read`
         * @summary Retrieve invoicing data for companies
         * @param {InvoicesApiGetInvoicingDataForCompaniesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicingDataForCompanies(requestParameters: InvoicesApiGetInvoicingDataForCompaniesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicingDataForCompanies(requestParameters.invoicePeriod, requestParameters.page, requestParameters.per, requestParameters.companyUuids, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)   > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)  scope: `invoices:read`
         * @summary Retrieve invoicing data for companies
         * @param {InvoicesApiGetInvoicingDataForCompaniesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicingDataForCompanies(requestParameters: InvoicesApiGetInvoicingDataForCompaniesRequest, options?: AxiosRequestConfig): AxiosPromise<InvoiceData> {
            return localVarFp.getInvoicingDataForCompanies(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getInvoicingDataForCompanies operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicingDataForCompaniesRequest
 */
export type InvoicesApiGetInvoicingDataForCompaniesRequest = {
    
    /**
    * The month we are calculating the invoice for. Must be in YYYY-MM format
    * @type {string}
    * @memberof InvoicesApiGetInvoicingDataForCompanies
    */
    readonly invoicePeriod: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof InvoicesApiGetInvoicingDataForCompanies
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof InvoicesApiGetInvoicingDataForCompanies
    */
    readonly per?: number
    
    /**
    * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
    * @type {string}
    * @memberof InvoicesApiGetInvoicingDataForCompanies
    */
    readonly companyUuids?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof InvoicesApiGetInvoicingDataForCompanies
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * InvoicesApiGenerated - object-oriented interface
 * @export
 * @class InvoicesApiGenerated
 * @extends {BaseAPI}
 */
export class InvoicesApiGenerated extends BaseAPI {
    /**
     * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)   > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)  scope: `invoices:read`
     * @summary Retrieve invoicing data for companies
     * @param {InvoicesApiGetInvoicingDataForCompaniesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApiGenerated
     */
    public getInvoicingDataForCompanies(requestParameters: InvoicesApiGetInvoicingDataForCompaniesRequest, options?: AxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getInvoicingDataForCompanies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
