/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractorBankAccount } from '../models';
// @ts-ignore
import { ContractorPaymentMethod } from '../models';
// @ts-ignore
import { ContractorPaymentMethodCreateBankAccountRequest } from '../models';
// @ts-ignore
import { ContractorPaymentMethodUpdateBankAccountRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractorPaymentMethodApi - axios parameter creator
 * @export
 */
export const ContractorPaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: `contractor_payment_methods:write`
         * @summary Create an contractor bank account
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorPaymentMethodCreateBankAccountRequest} [contractorPaymentMethodCreateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', contractorPaymentMethodCreateBankAccountRequest?: ContractorPaymentMethodCreateBankAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('createBankAccount', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/bank_accounts`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorPaymentMethodCreateBankAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/bank_accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorPaymentMethodCreateBankAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a contractor\'s payment method. A contractor payment method describes how the payment should be split across the contractor\'s associated bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get a contractor\'s payment method
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractorPaymentMethod: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('getContractorPaymentMethod', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/payment_method`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/payment_method',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all contractor bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get all contractor bank accounts
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('listBankAccounts', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/bank_accounts`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/bank_accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a contractor\'s payment method. Note that creating a contractor bank account will also update the contractor\'s payment method.  scope: `contractor_payment_methods:write`
         * @summary Update a contractor\'s payment method
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorPaymentMethodUpdateBankAccountRequest} [contractorPaymentMethodUpdateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankAccount: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', contractorPaymentMethodUpdateBankAccountRequest?: ContractorPaymentMethodUpdateBankAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('updateBankAccount', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/payment_method`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorPaymentMethodUpdateBankAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/payment_method',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorPaymentMethodUpdateBankAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorPaymentMethodApi - functional programming interface
 * @export
 */
export const ContractorPaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorPaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: `contractor_payment_methods:write`
         * @summary Create an contractor bank account
         * @param {ContractorPaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBankAccount(requestParameters: ContractorPaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorBankAccount>> {
            const contractorPaymentMethodCreateBankAccountRequest: ContractorPaymentMethodCreateBankAccountRequest = {
                name: requestParameters.name,
                routing_number: requestParameters.routing_number,
                account_number: requestParameters.account_number,
                account_type: requestParameters.account_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBankAccount(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, contractorPaymentMethodCreateBankAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches a contractor\'s payment method. A contractor payment method describes how the payment should be split across the contractor\'s associated bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get a contractor\'s payment method
         * @param {ContractorPaymentMethodApiGetContractorPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractorPaymentMethod(requestParameters: ContractorPaymentMethodApiGetContractorPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractorPaymentMethod(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all contractor bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get all contractor bank accounts
         * @param {ContractorPaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBankAccounts(requestParameters: ContractorPaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractorBankAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBankAccounts(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a contractor\'s payment method. Note that creating a contractor bank account will also update the contractor\'s payment method.  scope: `contractor_payment_methods:write`
         * @summary Update a contractor\'s payment method
         * @param {ContractorPaymentMethodApiUpdateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBankAccount(requestParameters: ContractorPaymentMethodApiUpdateBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorPaymentMethod>> {
            const contractorPaymentMethodUpdateBankAccountRequest: ContractorPaymentMethodUpdateBankAccountRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBankAccount(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, contractorPaymentMethodUpdateBankAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractorPaymentMethodApi - factory interface
 * @export
 */
export const ContractorPaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorPaymentMethodApiFp(configuration)
    return {
        /**
         * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: `contractor_payment_methods:write`
         * @summary Create an contractor bank account
         * @param {ContractorPaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount(requestParameters: ContractorPaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorBankAccount> {
            return localVarFp.createBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches a contractor\'s payment method. A contractor payment method describes how the payment should be split across the contractor\'s associated bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get a contractor\'s payment method
         * @param {ContractorPaymentMethodApiGetContractorPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractorPaymentMethod(requestParameters: ContractorPaymentMethodApiGetContractorPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentMethod> {
            return localVarFp.getContractorPaymentMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all contractor bank accounts.  scope: `contractor_payment_methods:read`
         * @summary Get all contractor bank accounts
         * @param {ContractorPaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts(requestParameters: ContractorPaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ContractorBankAccount>> {
            return localVarFp.listBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a contractor\'s payment method. Note that creating a contractor bank account will also update the contractor\'s payment method.  scope: `contractor_payment_methods:write`
         * @summary Update a contractor\'s payment method
         * @param {ContractorPaymentMethodApiUpdateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankAccount(requestParameters: ContractorPaymentMethodApiUpdateBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorPaymentMethod> {
            return localVarFp.updateBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBankAccount operation in ContractorPaymentMethodApi.
 * @export
 * @interface ContractorPaymentMethodApiCreateBankAccountRequest
 */
export type ContractorPaymentMethodApiCreateBankAccountRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorPaymentMethodApiCreateBankAccount
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentMethodApiCreateBankAccount
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorPaymentMethodCreateBankAccountRequest

/**
 * Request parameters for getContractorPaymentMethod operation in ContractorPaymentMethodApi.
 * @export
 * @interface ContractorPaymentMethodApiGetContractorPaymentMethodRequest
 */
export type ContractorPaymentMethodApiGetContractorPaymentMethodRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorPaymentMethodApiGetContractorPaymentMethod
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentMethodApiGetContractorPaymentMethod
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listBankAccounts operation in ContractorPaymentMethodApi.
 * @export
 * @interface ContractorPaymentMethodApiListBankAccountsRequest
 */
export type ContractorPaymentMethodApiListBankAccountsRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorPaymentMethodApiListBankAccounts
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentMethodApiListBankAccounts
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateBankAccount operation in ContractorPaymentMethodApi.
 * @export
 * @interface ContractorPaymentMethodApiUpdateBankAccountRequest
 */
export type ContractorPaymentMethodApiUpdateBankAccountRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorPaymentMethodApiUpdateBankAccount
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorPaymentMethodApiUpdateBankAccount
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorPaymentMethodUpdateBankAccountRequest

/**
 * ContractorPaymentMethodApiGenerated - object-oriented interface
 * @export
 * @class ContractorPaymentMethodApiGenerated
 * @extends {BaseAPI}
 */
export class ContractorPaymentMethodApiGenerated extends BaseAPI {
    /**
     * Creates a contractor bank account.  Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who has already has a bank account will just replace it.  scope: `contractor_payment_methods:write`
     * @summary Create an contractor bank account
     * @param {ContractorPaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentMethodApiGenerated
     */
    public createBankAccount(requestParameters: ContractorPaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentMethodApiFp(this.configuration).createBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches a contractor\'s payment method. A contractor payment method describes how the payment should be split across the contractor\'s associated bank accounts.  scope: `contractor_payment_methods:read`
     * @summary Get a contractor\'s payment method
     * @param {ContractorPaymentMethodApiGetContractorPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentMethodApiGenerated
     */
    public getContractorPaymentMethod(requestParameters: ContractorPaymentMethodApiGetContractorPaymentMethodRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentMethodApiFp(this.configuration).getContractorPaymentMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all contractor bank accounts.  scope: `contractor_payment_methods:read`
     * @summary Get all contractor bank accounts
     * @param {ContractorPaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentMethodApiGenerated
     */
    public listBankAccounts(requestParameters: ContractorPaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentMethodApiFp(this.configuration).listBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a contractor\'s payment method. Note that creating a contractor bank account will also update the contractor\'s payment method.  scope: `contractor_payment_methods:write`
     * @summary Update a contractor\'s payment method
     * @param {ContractorPaymentMethodApiUpdateBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorPaymentMethodApiGenerated
     */
    public updateBankAccount(requestParameters: ContractorPaymentMethodApiUpdateBankAccountRequest, options?: AxiosRequestConfig) {
        return ContractorPaymentMethodApiFp(this.configuration).updateBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
