/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Contractor } from '../models';
// @ts-ignore
import { ContractorAddress } from '../models';
// @ts-ignore
import { ContractorOnboardingStatus } from '../models';
// @ts-ignore
import { ContractorsChangeOnboardingStatusRequest } from '../models';
// @ts-ignore
import { ContractorsCreateNewContractorRequest } from '../models';
// @ts-ignore
import { ContractorsUpdateAddressRequest } from '../models';
// @ts-ignore
import { ContractorsUpdateContractorRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractorsApi - axios parameter creator
 * @export
 */
export const ContractorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates a contractor\'s onboarding status.  scope: `contractors:write`  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_started` | `self_onboarding_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_review` | `onboarding_completed` |
         * @summary Change the contractor\'s onboarding status
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorsChangeOnboardingStatusRequest} [contractorsChangeOnboardingStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeOnboardingStatus: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', contractorsChangeOnboardingStatusRequest?: ContractorsChangeOnboardingStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('changeOnboardingStatus', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/onboarding_status`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorsChangeOnboardingStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/onboarding_status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorsChangeOnboardingStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an individual or business contractor.  scope: `contractors:manage`
         * @summary Create a contractor
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorsCreateNewContractorRequest} [contractorsCreateNewContractorRequest] Create an individual or business contractor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContractor: async (companyId: string, xGustoApiVersion?: '2024-03-01', contractorsCreateNewContractorRequest?: ContractorsCreateNewContractorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createNewContractor', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/contractors`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorsCreateNewContractorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractors',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorsCreateNewContractorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A contractor can only be deleted when there are no contractor payments.  scope: `contractors:manage`
         * @summary Delete a contractor
         * @param {string} contractorId The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractor: async (contractorId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorId' is not null or undefined
            assertParamExists('deleteContractor', 'contractorId', contractorId)
            const localVarPath = `/v1/contractors/{contractor_id}`
                .replace(`{${"contractor_id"}}`, encodeURIComponent(String(contractorId !== undefined ? contractorId : `-contractor_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:read`
         * @summary Get a contractor address
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('getAddress', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/address`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/address',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a contractor.  scope: `contractors:read`
         * @summary Get a contractor
         * @param {string} contractorId The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (contractorId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorId' is not null or undefined
            assertParamExists('getById', 'contractorId', contractorId)
            const localVarPath = `/v1/contractors/{contractor_id}`
                .replace(`{${"contractor_id"}}`, encodeURIComponent(String(contractorId !== undefined ? contractorId : `-contractor_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all contractors, active and inactive, individual and business, for a company.  scope: `contractors:read`
         * @summary Get contractors of a company
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyContractors: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyContractors', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/contractors`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/contractors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a contractor\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `contractors:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. | | `self_onboarding_started` | Contractor has started the self-onboarding process. | | `self_onboarding_review` | Admin needs to review contractors\'s entered information and confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `basic_details` | Add individual contractor\'s first name, last name, social security number or Business name and EIN depending on the contractor type | | `add_address` | Add contractor address. | | `compensation_details` | Add contractor compensation. | | `payment_details` | Set up contractor\'s direct deposit or set to check. | | `sign_documents` | Contractor forms (e.g., W9) are generated & signed. | | `file_new_hire_report` | Contractor new hire report is generated. |
         * @summary Get the contractor\'s onboarding status
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('getOnboardingStatus', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/onboarding_status`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/onboarding_status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:write`
         * @summary Update a contractor\'s address
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorsUpdateAddressRequest} [contractorsUpdateAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', contractorsUpdateAddressRequest?: ContractorsUpdateAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('updateAddress', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/address`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorsUpdateAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/address',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorsUpdateAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a contractor.  scope: `contractors:write`  > 🚧 Warning > > Watch out when changing a contractor\'s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
         * @summary Update a contractor
         * @param {string} contractorId The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorsUpdateContractorRequest} [contractorsUpdateContractorRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContractor: async (contractorId: string, xGustoApiVersion?: '2024-03-01', contractorsUpdateContractorRequest?: ContractorsUpdateContractorRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorId' is not null or undefined
            assertParamExists('updateContractor', 'contractorId', contractorId)
            const localVarPath = `/v1/contractors/{contractor_id}`
                .replace(`{${"contractor_id"}}`, encodeURIComponent(String(contractorId !== undefined ? contractorId : `-contractor_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorsUpdateContractorRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorsUpdateContractorRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorsApi - functional programming interface
 * @export
 */
export const ContractorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates a contractor\'s onboarding status.  scope: `contractors:write`  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_started` | `self_onboarding_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_review` | `onboarding_completed` |
         * @summary Change the contractor\'s onboarding status
         * @param {ContractorsApiChangeOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeOnboardingStatus(requestParameters: ContractorsApiChangeOnboardingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorOnboardingStatus>> {
            const contractorsChangeOnboardingStatusRequest: ContractorsChangeOnboardingStatusRequest = {
                onboarding_status: requestParameters.onboarding_status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeOnboardingStatus(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, contractorsChangeOnboardingStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an individual or business contractor.  scope: `contractors:manage`
         * @summary Create a contractor
         * @param {ContractorsApiCreateNewContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewContractor(requestParameters: ContractorsApiCreateNewContractorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contractor>> {
            const contractorsCreateNewContractorRequest: ContractorsCreateNewContractorRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewContractor(requestParameters.companyId, requestParameters.xGustoApiVersion, contractorsCreateNewContractorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A contractor can only be deleted when there are no contractor payments.  scope: `contractors:manage`
         * @summary Delete a contractor
         * @param {ContractorsApiDeleteContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContractor(requestParameters: ContractorsApiDeleteContractorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContractor(requestParameters.contractorId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:read`
         * @summary Get a contractor address
         * @param {ContractorsApiGetAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddress(requestParameters: ContractorsApiGetAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a contractor.  scope: `contractors:read`
         * @summary Get a contractor
         * @param {ContractorsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ContractorsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contractor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.contractorId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all contractors, active and inactive, individual and business, for a company.  scope: `contractors:read`
         * @summary Get contractors of a company
         * @param {ContractorsApiGetCompanyContractorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyContractors(requestParameters: ContractorsApiGetCompanyContractorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Contractor>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyContractors(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a contractor\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `contractors:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. | | `self_onboarding_started` | Contractor has started the self-onboarding process. | | `self_onboarding_review` | Admin needs to review contractors\'s entered information and confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `basic_details` | Add individual contractor\'s first name, last name, social security number or Business name and EIN depending on the contractor type | | `add_address` | Add contractor address. | | `compensation_details` | Add contractor compensation. | | `payment_details` | Set up contractor\'s direct deposit or set to check. | | `sign_documents` | Contractor forms (e.g., W9) are generated & signed. | | `file_new_hire_report` | Contractor new hire report is generated. |
         * @summary Get the contractor\'s onboarding status
         * @param {ContractorsApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnboardingStatus(requestParameters: ContractorsApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorOnboardingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnboardingStatus(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:write`
         * @summary Update a contractor\'s address
         * @param {ContractorsApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(requestParameters: ContractorsApiUpdateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractorAddress>> {
            const contractorsUpdateAddressRequest: ContractorsUpdateAddressRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, contractorsUpdateAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a contractor.  scope: `contractors:write`  > 🚧 Warning > > Watch out when changing a contractor\'s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
         * @summary Update a contractor
         * @param {ContractorsApiUpdateContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContractor(requestParameters: ContractorsApiUpdateContractorRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contractor>> {
            const contractorsUpdateContractorRequest: ContractorsUpdateContractorRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContractor(requestParameters.contractorId, requestParameters.xGustoApiVersion, contractorsUpdateContractorRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractorsApi - factory interface
 * @export
 */
export const ContractorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorsApiFp(configuration)
    return {
        /**
         * Updates a contractor\'s onboarding status.  scope: `contractors:write`  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_started` | `self_onboarding_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_review` | `onboarding_completed` |
         * @summary Change the contractor\'s onboarding status
         * @param {ContractorsApiChangeOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeOnboardingStatus(requestParameters: ContractorsApiChangeOnboardingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorOnboardingStatus> {
            return localVarFp.changeOnboardingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an individual or business contractor.  scope: `contractors:manage`
         * @summary Create a contractor
         * @param {ContractorsApiCreateNewContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewContractor(requestParameters: ContractorsApiCreateNewContractorRequest, options?: AxiosRequestConfig): AxiosPromise<Contractor> {
            return localVarFp.createNewContractor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A contractor can only be deleted when there are no contractor payments.  scope: `contractors:manage`
         * @summary Delete a contractor
         * @param {ContractorsApiDeleteContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractor(requestParameters: ContractorsApiDeleteContractorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteContractor(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:read`
         * @summary Get a contractor address
         * @param {ContractorsApiGetAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(requestParameters: ContractorsApiGetAddressRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorAddress> {
            return localVarFp.getAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a contractor.  scope: `contractors:read`
         * @summary Get a contractor
         * @param {ContractorsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ContractorsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Contractor> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all contractors, active and inactive, individual and business, for a company.  scope: `contractors:read`
         * @summary Get contractors of a company
         * @param {ContractorsApiGetCompanyContractorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyContractors(requestParameters: ContractorsApiGetCompanyContractorsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Contractor>> {
            return localVarFp.getCompanyContractors(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a contractor\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `contractors:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. | | `self_onboarding_started` | Contractor has started the self-onboarding process. | | `self_onboarding_review` | Admin needs to review contractors\'s entered information and confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `basic_details` | Add individual contractor\'s first name, last name, social security number or Business name and EIN depending on the contractor type | | `add_address` | Add contractor address. | | `compensation_details` | Add contractor compensation. | | `payment_details` | Set up contractor\'s direct deposit or set to check. | | `sign_documents` | Contractor forms (e.g., W9) are generated & signed. | | `file_new_hire_report` | Contractor new hire report is generated. |
         * @summary Get the contractor\'s onboarding status
         * @param {ContractorsApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus(requestParameters: ContractorsApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorOnboardingStatus> {
            return localVarFp.getOnboardingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:write`
         * @summary Update a contractor\'s address
         * @param {ContractorsApiUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(requestParameters: ContractorsApiUpdateAddressRequest, options?: AxiosRequestConfig): AxiosPromise<ContractorAddress> {
            return localVarFp.updateAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a contractor.  scope: `contractors:write`  > 🚧 Warning > > Watch out when changing a contractor\'s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
         * @summary Update a contractor
         * @param {ContractorsApiUpdateContractorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContractor(requestParameters: ContractorsApiUpdateContractorRequest, options?: AxiosRequestConfig): AxiosPromise<Contractor> {
            return localVarFp.updateContractor(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeOnboardingStatus operation in ContractorsApi.
 * @export
 * @interface ContractorsApiChangeOnboardingStatusRequest
 */
export type ContractorsApiChangeOnboardingStatusRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiChangeOnboardingStatus
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiChangeOnboardingStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorsChangeOnboardingStatusRequest

/**
 * Request parameters for createNewContractor operation in ContractorsApi.
 * @export
 * @interface ContractorsApiCreateNewContractorRequest
 */
export type ContractorsApiCreateNewContractorRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorsApiCreateNewContractor
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiCreateNewContractor
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorsCreateNewContractorRequest

/**
 * Request parameters for deleteContractor operation in ContractorsApi.
 * @export
 * @interface ContractorsApiDeleteContractorRequest
 */
export type ContractorsApiDeleteContractorRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiDeleteContractor
    */
    readonly contractorId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiDeleteContractor
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getAddress operation in ContractorsApi.
 * @export
 * @interface ContractorsApiGetAddressRequest
 */
export type ContractorsApiGetAddressRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiGetAddress
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiGetAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getById operation in ContractorsApi.
 * @export
 * @interface ContractorsApiGetByIdRequest
 */
export type ContractorsApiGetByIdRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiGetById
    */
    readonly contractorId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiGetById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanyContractors operation in ContractorsApi.
 * @export
 * @interface ContractorsApiGetCompanyContractorsRequest
 */
export type ContractorsApiGetCompanyContractorsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof ContractorsApiGetCompanyContractors
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof ContractorsApiGetCompanyContractors
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof ContractorsApiGetCompanyContractors
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiGetCompanyContractors
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getOnboardingStatus operation in ContractorsApi.
 * @export
 * @interface ContractorsApiGetOnboardingStatusRequest
 */
export type ContractorsApiGetOnboardingStatusRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiGetOnboardingStatus
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiGetOnboardingStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateAddress operation in ContractorsApi.
 * @export
 * @interface ContractorsApiUpdateAddressRequest
 */
export type ContractorsApiUpdateAddressRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiUpdateAddress
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiUpdateAddress
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorsUpdateAddressRequest

/**
 * Request parameters for updateContractor operation in ContractorsApi.
 * @export
 * @interface ContractorsApiUpdateContractorRequest
 */
export type ContractorsApiUpdateContractorRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorsApiUpdateContractor
    */
    readonly contractorId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorsApiUpdateContractor
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorsUpdateContractorRequest

/**
 * ContractorsApiGenerated - object-oriented interface
 * @export
 * @class ContractorsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractorsApiGenerated extends BaseAPI {
    /**
     * Updates a contractor\'s onboarding status.  scope: `contractors:write`  Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_started` | `self_onboarding_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_review` | `onboarding_completed` |
     * @summary Change the contractor\'s onboarding status
     * @param {ContractorsApiChangeOnboardingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public changeOnboardingStatus(requestParameters: ContractorsApiChangeOnboardingStatusRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).changeOnboardingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an individual or business contractor.  scope: `contractors:manage`
     * @summary Create a contractor
     * @param {ContractorsApiCreateNewContractorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public createNewContractor(requestParameters: ContractorsApiCreateNewContractorRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).createNewContractor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A contractor can only be deleted when there are no contractor payments.  scope: `contractors:manage`
     * @summary Delete a contractor
     * @param {ContractorsApiDeleteContractorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public deleteContractor(requestParameters: ContractorsApiDeleteContractorRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).deleteContractor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:read`
     * @summary Get a contractor address
     * @param {ContractorsApiGetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public getAddress(requestParameters: ContractorsApiGetAddressRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).getAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a contractor.  scope: `contractors:read`
     * @summary Get a contractor
     * @param {ContractorsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public getById(requestParameters: ContractorsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all contractors, active and inactive, individual and business, for a company.  scope: `contractors:read`
     * @summary Get contractors of a company
     * @param {ContractorsApiGetCompanyContractorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public getCompanyContractors(requestParameters: ContractorsApiGetCompanyContractorsRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).getCompanyContractors(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a contractor\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `contractors:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ### Contractor self-onboarding  | onboarding_status | Description | | --- | ----------- | | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. | | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. | | `self_onboarding_started` | Contractor has started the self-onboarding process. | | `self_onboarding_review` | Admin needs to review contractors\'s entered information and confirm onboarding. | | `onboarding_completed` | Contractor has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `basic_details` | Add individual contractor\'s first name, last name, social security number or Business name and EIN depending on the contractor type | | `add_address` | Add contractor address. | | `compensation_details` | Add contractor compensation. | | `payment_details` | Set up contractor\'s direct deposit or set to check. | | `sign_documents` | Contractor forms (e.g., W9) are generated & signed. | | `file_new_hire_report` | Contractor new hire report is generated. |
     * @summary Get the contractor\'s onboarding status
     * @param {ContractorsApiGetOnboardingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public getOnboardingStatus(requestParameters: ContractorsApiGetOnboardingStatusRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).getOnboardingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.  scope: `contractors:write`
     * @summary Update a contractor\'s address
     * @param {ContractorsApiUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public updateAddress(requestParameters: ContractorsApiUpdateAddressRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).updateAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a contractor.  scope: `contractors:write`  > 🚧 Warning > > Watch out when changing a contractor\'s type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @summary Update a contractor
     * @param {ContractorsApiUpdateContractorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorsApiGenerated
     */
    public updateContractor(requestParameters: ContractorsApiUpdateContractorRequest, options?: AxiosRequestConfig) {
        return ContractorsApiFp(this.configuration).updateContractor(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
