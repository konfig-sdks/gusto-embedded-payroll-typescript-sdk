/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentConfigs } from '../models';
// @ts-ignore
import { PaymentConfigsUpdateCompanyPaymentConfigsRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentConfigsApi - axios parameter creator
 * @export
 */
export const PaymentConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get payment speed for the company and fast payment limit (1-day is only applicable to partners that opt in).  scope: `company_payment_configs:read`
         * @summary Get a company\'s payment configs
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPaymentConfigs: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getCompanyPaymentConfigs', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/payment_configs`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/payment_configs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update payment speed and fast payment limit for a company. At least one of `payment_speed` or `fast_payment_limit` parameters is required. 1-day option is only applicable to partners that opt in.  scope: `company_payment_configs:write`
         * @summary Update a company\'s payment configs
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PaymentConfigsUpdateCompanyPaymentConfigsRequest} [paymentConfigsUpdateCompanyPaymentConfigsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyPaymentConfigs: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', paymentConfigsUpdateCompanyPaymentConfigsRequest?: PaymentConfigsUpdateCompanyPaymentConfigsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('updateCompanyPaymentConfigs', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/payment_configs`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentConfigsUpdateCompanyPaymentConfigsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/payment_configs',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentConfigsUpdateCompanyPaymentConfigsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentConfigsApi - functional programming interface
 * @export
 */
export const PaymentConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get payment speed for the company and fast payment limit (1-day is only applicable to partners that opt in).  scope: `company_payment_configs:read`
         * @summary Get a company\'s payment configs
         * @param {PaymentConfigsApiGetCompanyPaymentConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPaymentConfigs(requestParameters: PaymentConfigsApiGetCompanyPaymentConfigsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentConfigs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPaymentConfigs(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update payment speed and fast payment limit for a company. At least one of `payment_speed` or `fast_payment_limit` parameters is required. 1-day option is only applicable to partners that opt in.  scope: `company_payment_configs:write`
         * @summary Update a company\'s payment configs
         * @param {PaymentConfigsApiUpdateCompanyPaymentConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompanyPaymentConfigs(requestParameters: PaymentConfigsApiUpdateCompanyPaymentConfigsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentConfigs>> {
            const paymentConfigsUpdateCompanyPaymentConfigsRequest: PaymentConfigsUpdateCompanyPaymentConfigsRequest = {
                fast_payment_limit: requestParameters.fast_payment_limit,
                payment_speed: requestParameters.payment_speed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompanyPaymentConfigs(requestParameters.companyUuid, requestParameters.xGustoApiVersion, paymentConfigsUpdateCompanyPaymentConfigsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentConfigsApi - factory interface
 * @export
 */
export const PaymentConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentConfigsApiFp(configuration)
    return {
        /**
         * Get payment speed for the company and fast payment limit (1-day is only applicable to partners that opt in).  scope: `company_payment_configs:read`
         * @summary Get a company\'s payment configs
         * @param {PaymentConfigsApiGetCompanyPaymentConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPaymentConfigs(requestParameters: PaymentConfigsApiGetCompanyPaymentConfigsRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentConfigs> {
            return localVarFp.getCompanyPaymentConfigs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update payment speed and fast payment limit for a company. At least one of `payment_speed` or `fast_payment_limit` parameters is required. 1-day option is only applicable to partners that opt in.  scope: `company_payment_configs:write`
         * @summary Update a company\'s payment configs
         * @param {PaymentConfigsApiUpdateCompanyPaymentConfigsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyPaymentConfigs(requestParameters: PaymentConfigsApiUpdateCompanyPaymentConfigsRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentConfigs> {
            return localVarFp.updateCompanyPaymentConfigs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompanyPaymentConfigs operation in PaymentConfigsApi.
 * @export
 * @interface PaymentConfigsApiGetCompanyPaymentConfigsRequest
 */
export type PaymentConfigsApiGetCompanyPaymentConfigsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaymentConfigsApiGetCompanyPaymentConfigs
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaymentConfigsApiGetCompanyPaymentConfigs
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateCompanyPaymentConfigs operation in PaymentConfigsApi.
 * @export
 * @interface PaymentConfigsApiUpdateCompanyPaymentConfigsRequest
 */
export type PaymentConfigsApiUpdateCompanyPaymentConfigsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PaymentConfigsApiUpdateCompanyPaymentConfigs
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PaymentConfigsApiUpdateCompanyPaymentConfigs
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PaymentConfigsUpdateCompanyPaymentConfigsRequest

/**
 * PaymentConfigsApiGenerated - object-oriented interface
 * @export
 * @class PaymentConfigsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentConfigsApiGenerated extends BaseAPI {
    /**
     * Get payment speed for the company and fast payment limit (1-day is only applicable to partners that opt in).  scope: `company_payment_configs:read`
     * @summary Get a company\'s payment configs
     * @param {PaymentConfigsApiGetCompanyPaymentConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentConfigsApiGenerated
     */
    public getCompanyPaymentConfigs(requestParameters: PaymentConfigsApiGetCompanyPaymentConfigsRequest, options?: AxiosRequestConfig) {
        return PaymentConfigsApiFp(this.configuration).getCompanyPaymentConfigs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update payment speed and fast payment limit for a company. At least one of `payment_speed` or `fast_payment_limit` parameters is required. 1-day option is only applicable to partners that opt in.  scope: `company_payment_configs:write`
     * @summary Update a company\'s payment configs
     * @param {PaymentConfigsApiUpdateCompanyPaymentConfigsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentConfigsApiGenerated
     */
    public updateCompanyPaymentConfigs(requestParameters: PaymentConfigsApiUpdateCompanyPaymentConfigsRequest, options?: AxiosRequestConfig) {
        return PaymentConfigsApiFp(this.configuration).updateCompanyPaymentConfigs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
