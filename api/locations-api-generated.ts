/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Location } from '../models';
// @ts-ignore
import { LocationsCreateCompanyLocationRequest } from '../models';
// @ts-ignore
import { LocationsCreateCompanyLocationRequest1 } from '../models';
// @ts-ignore
import { LocationsUpdateLocationRequest } from '../models';
// @ts-ignore
import { MinimumWage } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies.write`
         * @summary Create a company location
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {LocationsCreateCompanyLocationRequest} [locationsCreateCompanyLocationRequest] Create a company location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyLocation: async (companyId: string, xGustoApiVersion?: '2024-03-01', locationsCreateCompanyLocationRequest?: LocationsCreateCompanyLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCompanyLocation', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/locations`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: locationsCreateCompanyLocationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/locations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(locationsCreateCompanyLocationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a location.  scope: `companies:read`
         * @summary Get a location
         * @param {string} locationId The UUID of the location
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (locationId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getById', 'locationId', locationId)
            const localVarPath = `/v1/locations/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/locations/{location_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies:read`
         * @summary Get company locations
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyLocations: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyLocations', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/locations`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get minimum wages for a location  scope: `companies:read`
         * @summary Get minimum wages for a location
         * @param {string} locationUuid The UUID of the location
         * @param {string} [effectiveDate] 
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinimumWages: async (locationUuid: string, effectiveDate?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationUuid' is not null or undefined
            assertParamExists('getMinimumWages', 'locationUuid', locationUuid)
            const localVarPath = `/v1/locations/{location_uuid}/minimum_wages`
                .replace(`{${"location_uuid"}}`, encodeURIComponent(String(locationUuid !== undefined ? locationUuid : `-location_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (effectiveDate !== undefined) {
                localVarQueryParameter['effective_date'] = effectiveDate;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/locations/{location_uuid}/minimum_wages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a location.  scope: `companies.write`
         * @summary Update a location
         * @param {string} locationId The UUID of the location
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {LocationsUpdateLocationRequest} [locationsUpdateLocationRequest] Update a location
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation: async (locationId: string, xGustoApiVersion?: '2024-03-01', locationsUpdateLocationRequest?: LocationsUpdateLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('updateLocation', 'locationId', locationId)
            const localVarPath = `/v1/locations/{location_id}`
                .replace(`{${"location_id"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-location_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: locationsUpdateLocationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/locations/{location_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(locationsUpdateLocationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationsApi - functional programming interface
 * @export
 */
export const LocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies.write`
         * @summary Create a company location
         * @param {LocationsApiCreateCompanyLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompanyLocation(requestParameters: LocationsApiCreateCompanyLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const locationsCreateCompanyLocationRequest: LocationsCreateCompanyLocationRequest = {
                phone_number: requestParameters.phone_number,
                street_1: requestParameters.street_1,
                street_2: requestParameters.street_2,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                mailing_address: requestParameters.mailing_address,
                filing_address: requestParameters.filing_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompanyLocation(requestParameters.companyId, requestParameters.xGustoApiVersion, locationsCreateCompanyLocationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a location.  scope: `companies:read`
         * @summary Get a location
         * @param {LocationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: LocationsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.locationId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies:read`
         * @summary Get company locations
         * @param {LocationsApiGetCompanyLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyLocations(requestParameters: LocationsApiGetCompanyLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Location>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyLocations(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get minimum wages for a location  scope: `companies:read`
         * @summary Get minimum wages for a location
         * @param {LocationsApiGetMinimumWagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMinimumWages(requestParameters: LocationsApiGetMinimumWagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MinimumWage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMinimumWages(requestParameters.locationUuid, requestParameters.effectiveDate, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a location.  scope: `companies.write`
         * @summary Update a location
         * @param {LocationsApiUpdateLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLocation(requestParameters: LocationsApiUpdateLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {
            const locationsUpdateLocationRequest: LocationsUpdateLocationRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLocation(requestParameters.locationId, requestParameters.xGustoApiVersion, locationsUpdateLocationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationsApi - factory interface
 * @export
 */
export const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationsApiFp(configuration)
    return {
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies.write`
         * @summary Create a company location
         * @param {LocationsApiCreateCompanyLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyLocation(requestParameters: LocationsApiCreateCompanyLocationRequest, options?: AxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.createCompanyLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a location.  scope: `companies:read`
         * @summary Get a location
         * @param {LocationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: LocationsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies:read`
         * @summary Get company locations
         * @param {LocationsApiGetCompanyLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyLocations(requestParameters: LocationsApiGetCompanyLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Location>> {
            return localVarFp.getCompanyLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get minimum wages for a location  scope: `companies:read`
         * @summary Get minimum wages for a location
         * @param {LocationsApiGetMinimumWagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMinimumWages(requestParameters: LocationsApiGetMinimumWagesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<MinimumWage>> {
            return localVarFp.getMinimumWages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a location.  scope: `companies.write`
         * @summary Update a location
         * @param {LocationsApiUpdateLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLocation(requestParameters: LocationsApiUpdateLocationRequest, options?: AxiosRequestConfig): AxiosPromise<Location> {
            return localVarFp.updateLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCompanyLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiCreateCompanyLocationRequest
 */
export type LocationsApiCreateCompanyLocationRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof LocationsApiCreateCompanyLocation
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof LocationsApiCreateCompanyLocation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & LocationsCreateCompanyLocationRequest

/**
 * Request parameters for getById operation in LocationsApi.
 * @export
 * @interface LocationsApiGetByIdRequest
 */
export type LocationsApiGetByIdRequest = {
    
    /**
    * The UUID of the location
    * @type {string}
    * @memberof LocationsApiGetById
    */
    readonly locationId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof LocationsApiGetById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanyLocations operation in LocationsApi.
 * @export
 * @interface LocationsApiGetCompanyLocationsRequest
 */
export type LocationsApiGetCompanyLocationsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof LocationsApiGetCompanyLocations
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof LocationsApiGetCompanyLocations
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof LocationsApiGetCompanyLocations
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof LocationsApiGetCompanyLocations
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getMinimumWages operation in LocationsApi.
 * @export
 * @interface LocationsApiGetMinimumWagesRequest
 */
export type LocationsApiGetMinimumWagesRequest = {
    
    /**
    * The UUID of the location
    * @type {string}
    * @memberof LocationsApiGetMinimumWages
    */
    readonly locationUuid: string
    
    /**
    * 
    * @type {string}
    * @memberof LocationsApiGetMinimumWages
    */
    readonly effectiveDate?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof LocationsApiGetMinimumWages
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateLocation operation in LocationsApi.
 * @export
 * @interface LocationsApiUpdateLocationRequest
 */
export type LocationsApiUpdateLocationRequest = {
    
    /**
    * The UUID of the location
    * @type {string}
    * @memberof LocationsApiUpdateLocation
    */
    readonly locationId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof LocationsApiUpdateLocation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & LocationsUpdateLocationRequest

/**
 * LocationsApiGenerated - object-oriented interface
 * @export
 * @class LocationsApiGenerated
 * @extends {BaseAPI}
 */
export class LocationsApiGenerated extends BaseAPI {
    /**
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies.write`
     * @summary Create a company location
     * @param {LocationsApiCreateCompanyLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public createCompanyLocation(requestParameters: LocationsApiCreateCompanyLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).createCompanyLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a location.  scope: `companies:read`
     * @summary Get a location
     * @param {LocationsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getById(requestParameters: LocationsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.  Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.  scope: `companies:read`
     * @summary Get company locations
     * @param {LocationsApiGetCompanyLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getCompanyLocations(requestParameters: LocationsApiGetCompanyLocationsRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getCompanyLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get minimum wages for a location  scope: `companies:read`
     * @summary Get minimum wages for a location
     * @param {LocationsApiGetMinimumWagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public getMinimumWages(requestParameters: LocationsApiGetMinimumWagesRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).getMinimumWages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a location.  scope: `companies.write`
     * @summary Update a location
     * @param {LocationsApiUpdateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiGenerated
     */
    public updateLocation(requestParameters: LocationsApiUpdateLocationRequest, options?: AxiosRequestConfig) {
        return LocationsApiFp(this.configuration).updateLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
