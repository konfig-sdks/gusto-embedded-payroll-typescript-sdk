/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
// @ts-ignore
import { WebhookSubscription } from '../models';
// @ts-ignore
import { WebhooksCreateSubscriptionRequest } from '../models';
// @ts-ignore
import { WebhooksUpdateSubscriptionRequest } from '../models';
// @ts-ignore
import { WebhooksVerifySubscriptionTokenRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write`
         * @summary Create a webhook subscription
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {WebhooksCreateSubscriptionRequest} [webhooksCreateSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (xGustoApiVersion?: '2024-03-01', webhooksCreateSubscriptionRequest?: WebhooksCreateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/webhook_subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksCreateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksCreateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Delete a webhook subscription
         * @param {string} webhookSubscriptionUuid The webhook subscription UUID.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionByUuid: async (webhookSubscriptionUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscriptionUuid' is not null or undefined
            assertParamExists('deleteSubscriptionByUuid', 'webhookSubscriptionUuid', webhookSubscriptionUuid)
            const localVarPath = `/v1/webhook_subscriptions/{webhook_subscription_uuid}`
                .replace(`{${"webhook_subscription_uuid"}}`, encodeURIComponent(String(webhookSubscriptionUuid !== undefined ? webhookSubscriptionUuid : `-webhook_subscription_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions/{webhook_subscription_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Get a webhook subscription
         * @param {string} webhookSubscriptionUuid The webhook subscription UUID.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (webhookSubscriptionUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscriptionUuid' is not null or undefined
            assertParamExists('getSubscription', 'webhookSubscriptionUuid', webhookSubscriptionUuid)
            const localVarPath = `/v1/webhook_subscriptions/{webhook_subscription_uuid}`
                .replace(`{${"webhook_subscription_uuid"}}`, encodeURIComponent(String(webhookSubscriptionUuid !== undefined ? webhookSubscriptionUuid : `-webhook_subscription_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions/{webhook_subscription_uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all webhook subscriptions associated with the provided Partner API token.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read`
         * @summary List webhook subscriptions
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: async (xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/webhook_subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Request the webhook subscription verification_token
         * @param {string} webhookSubscriptionUuid The webhook subscription UUID.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestVerificationToken: async (webhookSubscriptionUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscriptionUuid' is not null or undefined
            assertParamExists('requestVerificationToken', 'webhookSubscriptionUuid', webhookSubscriptionUuid)
            const localVarPath = `/v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token`
                .replace(`{${"webhook_subscription_uuid"}}`, encodeURIComponent(String(webhookSubscriptionUuid !== undefined ? webhookSubscriptionUuid : `-webhook_subscription_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Update a webhook subscription
         * @param {string} webhookSubscriptionUuid The webhook subscription UUID.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {WebhooksUpdateSubscriptionRequest} [webhooksUpdateSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (webhookSubscriptionUuid: string, xGustoApiVersion?: '2024-03-01', webhooksUpdateSubscriptionRequest?: WebhooksUpdateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscriptionUuid' is not null or undefined
            assertParamExists('updateSubscription', 'webhookSubscriptionUuid', webhookSubscriptionUuid)
            const localVarPath = `/v1/webhook_subscriptions/{webhook_subscription_uuid}`
                .replace(`{${"webhook_subscription_uuid"}}`, encodeURIComponent(String(webhookSubscriptionUuid !== undefined ? webhookSubscriptionUuid : `-webhook_subscription_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksUpdateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions/{webhook_subscription_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksUpdateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Verify the webhook subscription
         * @param {string} webhookSubscriptionUuid The webhook subscription UUID.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {WebhooksVerifySubscriptionTokenRequest} [webhooksVerifySubscriptionTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySubscriptionToken: async (webhookSubscriptionUuid: string, xGustoApiVersion?: '2024-03-01', webhooksVerifySubscriptionTokenRequest?: WebhooksVerifySubscriptionTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookSubscriptionUuid' is not null or undefined
            assertParamExists('verifySubscriptionToken', 'webhookSubscriptionUuid', webhookSubscriptionUuid)
            const localVarPath = `/v1/webhook_subscriptions/{webhook_subscription_uuid}/verify`
                .replace(`{${"webhook_subscription_uuid"}}`, encodeURIComponent(String(webhookSubscriptionUuid !== undefined ? webhookSubscriptionUuid : `-webhook_subscription_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksVerifySubscriptionTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/webhook_subscriptions/{webhook_subscription_uuid}/verify',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksVerifySubscriptionTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write`
         * @summary Create a webhook subscription
         * @param {WebhooksApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(requestParameters: WebhooksApiCreateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSubscription>> {
            const webhooksCreateSubscriptionRequest: WebhooksCreateSubscriptionRequest = {
                url: requestParameters.url,
                subscription_types: requestParameters.subscription_types
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(requestParameters.xGustoApiVersion, webhooksCreateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Delete a webhook subscription
         * @param {WebhooksApiDeleteSubscriptionByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptionByUuid(requestParameters: WebhooksApiDeleteSubscriptionByUuidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubscriptionByUuid(requestParameters.webhookSubscriptionUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Get a webhook subscription
         * @param {WebhooksApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(requestParameters: WebhooksApiGetSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(requestParameters.webhookSubscriptionUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all webhook subscriptions associated with the provided Partner API token.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read`
         * @summary List webhook subscriptions
         * @param {WebhooksApiListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptions(requestParameters: WebhooksApiListSubscriptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhookSubscription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptions(requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Request the webhook subscription verification_token
         * @param {WebhooksApiRequestVerificationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestVerificationToken(requestParameters: WebhooksApiRequestVerificationTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestVerificationToken(requestParameters.webhookSubscriptionUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Update a webhook subscription
         * @param {WebhooksApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(requestParameters: WebhooksApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSubscription>> {
            const webhooksUpdateSubscriptionRequest: WebhooksUpdateSubscriptionRequest = {
                subscription_types: requestParameters.subscription_types
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(requestParameters.webhookSubscriptionUuid, requestParameters.xGustoApiVersion, webhooksUpdateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Verify the webhook subscription
         * @param {WebhooksApiVerifySubscriptionTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifySubscriptionToken(requestParameters: WebhooksApiVerifySubscriptionTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSubscription>> {
            const webhooksVerifySubscriptionTokenRequest: WebhooksVerifySubscriptionTokenRequest = {
                verification_token: requestParameters.verification_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifySubscriptionToken(requestParameters.webhookSubscriptionUuid, requestParameters.xGustoApiVersion, webhooksVerifySubscriptionTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write`
         * @summary Create a webhook subscription
         * @param {WebhooksApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(requestParameters: WebhooksApiCreateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookSubscription> {
            return localVarFp.createSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Delete a webhook subscription
         * @param {WebhooksApiDeleteSubscriptionByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionByUuid(requestParameters: WebhooksApiDeleteSubscriptionByUuidRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSubscriptionByUuid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Get a webhook subscription
         * @param {WebhooksApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(requestParameters: WebhooksApiGetSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookSubscription> {
            return localVarFp.getSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all webhook subscriptions associated with the provided Partner API token.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read`
         * @summary List webhook subscriptions
         * @param {WebhooksApiListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(requestParameters: WebhooksApiListSubscriptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<WebhookSubscription>> {
            return localVarFp.listSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
         * @summary Request the webhook subscription verification_token
         * @param {WebhooksApiRequestVerificationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestVerificationToken(requestParameters: WebhooksApiRequestVerificationTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestVerificationToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Update a webhook subscription
         * @param {WebhooksApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: WebhooksApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookSubscription> {
            return localVarFp.updateSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
         * @summary Verify the webhook subscription
         * @param {WebhooksApiVerifySubscriptionTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifySubscriptionToken(requestParameters: WebhooksApiVerifySubscriptionTokenRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookSubscription> {
            return localVarFp.verifySubscriptionToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSubscription operation in WebhooksApi.
 * @export
 * @interface WebhooksApiCreateSubscriptionRequest
 */
export type WebhooksApiCreateSubscriptionRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiCreateSubscription
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & WebhooksCreateSubscriptionRequest

/**
 * Request parameters for deleteSubscriptionByUuid operation in WebhooksApi.
 * @export
 * @interface WebhooksApiDeleteSubscriptionByUuidRequest
 */
export type WebhooksApiDeleteSubscriptionByUuidRequest = {
    
    /**
    * The webhook subscription UUID.
    * @type {string}
    * @memberof WebhooksApiDeleteSubscriptionByUuid
    */
    readonly webhookSubscriptionUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiDeleteSubscriptionByUuid
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSubscription operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetSubscriptionRequest
 */
export type WebhooksApiGetSubscriptionRequest = {
    
    /**
    * The webhook subscription UUID.
    * @type {string}
    * @memberof WebhooksApiGetSubscription
    */
    readonly webhookSubscriptionUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiGetSubscription
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listSubscriptions operation in WebhooksApi.
 * @export
 * @interface WebhooksApiListSubscriptionsRequest
 */
export type WebhooksApiListSubscriptionsRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiListSubscriptions
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for requestVerificationToken operation in WebhooksApi.
 * @export
 * @interface WebhooksApiRequestVerificationTokenRequest
 */
export type WebhooksApiRequestVerificationTokenRequest = {
    
    /**
    * The webhook subscription UUID.
    * @type {string}
    * @memberof WebhooksApiRequestVerificationToken
    */
    readonly webhookSubscriptionUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiRequestVerificationToken
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateSubscription operation in WebhooksApi.
 * @export
 * @interface WebhooksApiUpdateSubscriptionRequest
 */
export type WebhooksApiUpdateSubscriptionRequest = {
    
    /**
    * The webhook subscription UUID.
    * @type {string}
    * @memberof WebhooksApiUpdateSubscription
    */
    readonly webhookSubscriptionUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiUpdateSubscription
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & WebhooksUpdateSubscriptionRequest

/**
 * Request parameters for verifySubscriptionToken operation in WebhooksApi.
 * @export
 * @interface WebhooksApiVerifySubscriptionTokenRequest
 */
export type WebhooksApiVerifySubscriptionTokenRequest = {
    
    /**
    * The webhook subscription UUID.
    * @type {string}
    * @memberof WebhooksApiVerifySubscriptionToken
    */
    readonly webhookSubscriptionUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof WebhooksApiVerifySubscriptionToken
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & WebhooksVerifySubscriptionTokenRequest

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write`
     * @summary Create a webhook subscription
     * @param {WebhooksApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public createSubscription(requestParameters: WebhooksApiCreateSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).createSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
     * @summary Delete a webhook subscription
     * @param {WebhooksApiDeleteSubscriptionByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public deleteSubscriptionByUuid(requestParameters: WebhooksApiDeleteSubscriptionByUuidRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteSubscriptionByUuid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
     * @summary Get a webhook subscription
     * @param {WebhooksApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getSubscription(requestParameters: WebhooksApiGetSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all webhook subscriptions associated with the provided Partner API token.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read`
     * @summary List webhook subscriptions
     * @param {WebhooksApiListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public listSubscriptions(requestParameters: WebhooksApiListSubscriptionsRequest = {}, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:read` 
     * @summary Request the webhook subscription verification_token
     * @param {WebhooksApiRequestVerificationTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public requestVerificationToken(requestParameters: WebhooksApiRequestVerificationTokenRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).requestVerificationToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Webhook Subscription associated with the provided UUID.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
     * @summary Update a webhook subscription
     * @param {WebhooksApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public updateSubscription(requestParameters: WebhooksApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).updateSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.  Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `webhook_subscriptions:write` 
     * @summary Verify the webhook subscription
     * @param {WebhooksApiVerifySubscriptionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public verifySubscriptionToken(requestParameters: WebhooksApiVerifySubscriptionTokenRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).verifySubscriptionToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
