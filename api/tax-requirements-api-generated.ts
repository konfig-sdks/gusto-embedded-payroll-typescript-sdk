/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TaxRequirementsGetStatesResponseInner } from '../models';
// @ts-ignore
import { TaxRequirementsState } from '../models';
// @ts-ignore
import { TaxRequirementsUpdateStateTaxesRequest } from '../models';
// @ts-ignore
import { TaxRequirementsUpdateStateTaxesRequestRequirementSetsInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TaxRequirementsApi - axios parameter creator
 * @export
 */
export const TaxRequirementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all tax requirements for a given state.  ### Metadata Examples  ```json select {   \"type\": \"select\",   \"options\": [     { \"label\": \"Semiweekly\",  value: \"Semi-weekly\" },     { \"label\": \"Monthly\",  value: \"Monthly\" },     { \"label\": \"Quarterly\",  value: \"Quarterly\" },   ] } ``` ```json radio {   \"type\": \"radio\",   \"options\": [     { \"label\": \"No, we cannot reimburse\",  value: false, short_label: \"Not Reimbursable\" },     { \"label\": \"Yes, we can reimburse\",  value: true, short_label: \"Reimbursable\" },   ] } ``` ```json account_number {   \"type\": \"account_number\",   \"mask\": \"######-##\',   \"prefix\": null } ``` ```json tax_rate {   \"type\": \"tax_rate\",   \"validation\": {     \"type\": \"min_max\",     \"min\": \"0.0004\",     \"max\": \"0.081\"   } } ```  scope: `company_tax_requirements:read` 
         * @summary Get State Tax Requirements
         * @param {string} companyUuid The UUID of the company
         * @param {string} state 2-letter US state abbreviation
         * @param {boolean} [scheduling] When true, return \&quot;new\&quot; requirement sets with valid &#x60;effective_from&#x60; dates that are available to save new effective dated values.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateRequirements: async (companyUuid: string, state: string, scheduling?: boolean, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getStateRequirements', 'companyUuid', companyUuid)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('getStateRequirements', 'state', state)
            const localVarPath = `/v1/companies/{company_uuid}/tax_requirements/{state}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"state"}}`, encodeURIComponent(String(state !== undefined ? state : `-state-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (scheduling !== undefined) {
                localVarQueryParameter['scheduling'] = scheduling;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/tax_requirements/{state}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns objects describing the states that have tax requirements for the company  scope: `company_tax_requirements:read`
         * @summary Get All Tax Requirement States
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStates: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getStates', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/tax_requirements`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/tax_requirements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update State Tax Requirements  scope: `company_tax_requirements:write`
         * @summary Update State Tax Requirements
         * @param {string} companyUuid The UUID of the company
         * @param {string} state 2-letter US state abbreviation
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TaxRequirementsUpdateStateTaxesRequest} [taxRequirementsUpdateStateTaxesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateTaxes: async (companyUuid: string, state: string, xGustoApiVersion?: '2024-03-01', taxRequirementsUpdateStateTaxesRequest?: TaxRequirementsUpdateStateTaxesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('updateStateTaxes', 'companyUuid', companyUuid)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('updateStateTaxes', 'state', state)
            const localVarPath = `/v1/companies/{company_uuid}/tax_requirements/{state}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"state"}}`, encodeURIComponent(String(state !== undefined ? state : `-state-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: taxRequirementsUpdateStateTaxesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/tax_requirements/{state}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(taxRequirementsUpdateStateTaxesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxRequirementsApi - functional programming interface
 * @export
 */
export const TaxRequirementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxRequirementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all tax requirements for a given state.  ### Metadata Examples  ```json select {   \"type\": \"select\",   \"options\": [     { \"label\": \"Semiweekly\",  value: \"Semi-weekly\" },     { \"label\": \"Monthly\",  value: \"Monthly\" },     { \"label\": \"Quarterly\",  value: \"Quarterly\" },   ] } ``` ```json radio {   \"type\": \"radio\",   \"options\": [     { \"label\": \"No, we cannot reimburse\",  value: false, short_label: \"Not Reimbursable\" },     { \"label\": \"Yes, we can reimburse\",  value: true, short_label: \"Reimbursable\" },   ] } ``` ```json account_number {   \"type\": \"account_number\",   \"mask\": \"######-##\',   \"prefix\": null } ``` ```json tax_rate {   \"type\": \"tax_rate\",   \"validation\": {     \"type\": \"min_max\",     \"min\": \"0.0004\",     \"max\": \"0.081\"   } } ```  scope: `company_tax_requirements:read` 
         * @summary Get State Tax Requirements
         * @param {TaxRequirementsApiGetStateRequirementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStateRequirements(requestParameters: TaxRequirementsApiGetStateRequirementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxRequirementsState>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStateRequirements(requestParameters.companyUuid, requestParameters.state, requestParameters.scheduling, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns objects describing the states that have tax requirements for the company  scope: `company_tax_requirements:read`
         * @summary Get All Tax Requirement States
         * @param {TaxRequirementsApiGetStatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStates(requestParameters: TaxRequirementsApiGetStatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxRequirementsGetStatesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStates(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update State Tax Requirements  scope: `company_tax_requirements:write`
         * @summary Update State Tax Requirements
         * @param {TaxRequirementsApiUpdateStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStateTaxes(requestParameters: TaxRequirementsApiUpdateStateTaxesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const taxRequirementsUpdateStateTaxesRequest: TaxRequirementsUpdateStateTaxesRequest = {
                requirement_sets: requestParameters.requirement_sets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStateTaxes(requestParameters.companyUuid, requestParameters.state, requestParameters.xGustoApiVersion, taxRequirementsUpdateStateTaxesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxRequirementsApi - factory interface
 * @export
 */
export const TaxRequirementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxRequirementsApiFp(configuration)
    return {
        /**
         * Get all tax requirements for a given state.  ### Metadata Examples  ```json select {   \"type\": \"select\",   \"options\": [     { \"label\": \"Semiweekly\",  value: \"Semi-weekly\" },     { \"label\": \"Monthly\",  value: \"Monthly\" },     { \"label\": \"Quarterly\",  value: \"Quarterly\" },   ] } ``` ```json radio {   \"type\": \"radio\",   \"options\": [     { \"label\": \"No, we cannot reimburse\",  value: false, short_label: \"Not Reimbursable\" },     { \"label\": \"Yes, we can reimburse\",  value: true, short_label: \"Reimbursable\" },   ] } ``` ```json account_number {   \"type\": \"account_number\",   \"mask\": \"######-##\',   \"prefix\": null } ``` ```json tax_rate {   \"type\": \"tax_rate\",   \"validation\": {     \"type\": \"min_max\",     \"min\": \"0.0004\",     \"max\": \"0.081\"   } } ```  scope: `company_tax_requirements:read` 
         * @summary Get State Tax Requirements
         * @param {TaxRequirementsApiGetStateRequirementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateRequirements(requestParameters: TaxRequirementsApiGetStateRequirementsRequest, options?: AxiosRequestConfig): AxiosPromise<TaxRequirementsState> {
            return localVarFp.getStateRequirements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns objects describing the states that have tax requirements for the company  scope: `company_tax_requirements:read`
         * @summary Get All Tax Requirement States
         * @param {TaxRequirementsApiGetStatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStates(requestParameters: TaxRequirementsApiGetStatesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TaxRequirementsGetStatesResponseInner>> {
            return localVarFp.getStates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update State Tax Requirements  scope: `company_tax_requirements:write`
         * @summary Update State Tax Requirements
         * @param {TaxRequirementsApiUpdateStateTaxesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStateTaxes(requestParameters: TaxRequirementsApiUpdateStateTaxesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStateTaxes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStateRequirements operation in TaxRequirementsApi.
 * @export
 * @interface TaxRequirementsApiGetStateRequirementsRequest
 */
export type TaxRequirementsApiGetStateRequirementsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof TaxRequirementsApiGetStateRequirements
    */
    readonly companyUuid: string
    
    /**
    * 2-letter US state abbreviation
    * @type {string}
    * @memberof TaxRequirementsApiGetStateRequirements
    */
    readonly state: string
    
    /**
    * When true, return \"new\" requirement sets with valid `effective_from` dates that are available to save new effective dated values.
    * @type {boolean}
    * @memberof TaxRequirementsApiGetStateRequirements
    */
    readonly scheduling?: boolean
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TaxRequirementsApiGetStateRequirements
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getStates operation in TaxRequirementsApi.
 * @export
 * @interface TaxRequirementsApiGetStatesRequest
 */
export type TaxRequirementsApiGetStatesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof TaxRequirementsApiGetStates
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TaxRequirementsApiGetStates
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateStateTaxes operation in TaxRequirementsApi.
 * @export
 * @interface TaxRequirementsApiUpdateStateTaxesRequest
 */
export type TaxRequirementsApiUpdateStateTaxesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof TaxRequirementsApiUpdateStateTaxes
    */
    readonly companyUuid: string
    
    /**
    * 2-letter US state abbreviation
    * @type {string}
    * @memberof TaxRequirementsApiUpdateStateTaxes
    */
    readonly state: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TaxRequirementsApiUpdateStateTaxes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TaxRequirementsUpdateStateTaxesRequest

/**
 * TaxRequirementsApiGenerated - object-oriented interface
 * @export
 * @class TaxRequirementsApiGenerated
 * @extends {BaseAPI}
 */
export class TaxRequirementsApiGenerated extends BaseAPI {
    /**
     * Get all tax requirements for a given state.  ### Metadata Examples  ```json select {   \"type\": \"select\",   \"options\": [     { \"label\": \"Semiweekly\",  value: \"Semi-weekly\" },     { \"label\": \"Monthly\",  value: \"Monthly\" },     { \"label\": \"Quarterly\",  value: \"Quarterly\" },   ] } ``` ```json radio {   \"type\": \"radio\",   \"options\": [     { \"label\": \"No, we cannot reimburse\",  value: false, short_label: \"Not Reimbursable\" },     { \"label\": \"Yes, we can reimburse\",  value: true, short_label: \"Reimbursable\" },   ] } ``` ```json account_number {   \"type\": \"account_number\",   \"mask\": \"######-##\',   \"prefix\": null } ``` ```json tax_rate {   \"type\": \"tax_rate\",   \"validation\": {     \"type\": \"min_max\",     \"min\": \"0.0004\",     \"max\": \"0.081\"   } } ```  scope: `company_tax_requirements:read` 
     * @summary Get State Tax Requirements
     * @param {TaxRequirementsApiGetStateRequirementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRequirementsApiGenerated
     */
    public getStateRequirements(requestParameters: TaxRequirementsApiGetStateRequirementsRequest, options?: AxiosRequestConfig) {
        return TaxRequirementsApiFp(this.configuration).getStateRequirements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns objects describing the states that have tax requirements for the company  scope: `company_tax_requirements:read`
     * @summary Get All Tax Requirement States
     * @param {TaxRequirementsApiGetStatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRequirementsApiGenerated
     */
    public getStates(requestParameters: TaxRequirementsApiGetStatesRequest, options?: AxiosRequestConfig) {
        return TaxRequirementsApiFp(this.configuration).getStates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update State Tax Requirements  scope: `company_tax_requirements:write`
     * @summary Update State Tax Requirements
     * @param {TaxRequirementsApiUpdateStateTaxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxRequirementsApiGenerated
     */
    public updateStateTaxes(requestParameters: TaxRequirementsApiUpdateStateTaxesRequest, options?: AxiosRequestConfig) {
        return TaxRequirementsApiFp(this.configuration).updateStateTaxes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
