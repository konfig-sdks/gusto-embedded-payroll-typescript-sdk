/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Department } from '../models';
// @ts-ignore
import { DepartmentsAddPeopleToDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsAddPeopleToDepartmentRequestEmployeesInner } from '../models';
// @ts-ignore
import { DepartmentsCreateDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsRemovePeopleFromDepartmentRequest } from '../models';
// @ts-ignore
import { DepartmentsUpdateDepartmentRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add employees and contractors to a department  scope: `departments:write` 
         * @summary Add people to a department
         * @param {string} departmentUuid The UUID of the department
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {DepartmentsAddPeopleToDepartmentRequest} [departmentsAddPeopleToDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeopleToDepartment: async (departmentUuid: string, xGustoApiVersion?: '2024-03-01', departmentsAddPeopleToDepartmentRequest?: DepartmentsAddPeopleToDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentUuid' is not null or undefined
            assertParamExists('addPeopleToDepartment', 'departmentUuid', departmentUuid)
            const localVarPath = `/v1/departments/{department_uuid}/add`
                .replace(`{${"department_uuid"}}`, encodeURIComponent(String(departmentUuid !== undefined ? departmentUuid : `-department_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsAddPeopleToDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/departments/{department_uuid}/add',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsAddPeopleToDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a department  scope: `departments:write`
         * @summary Create a department
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {DepartmentsCreateDepartmentRequest} [departmentsCreateDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', departmentsCreateDepartmentRequest?: DepartmentsCreateDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createDepartment', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/departments`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsCreateDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/departments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsCreateDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a department. You cannot delete a department until all employees and contractors have been removed.  scope: `departments:write` 
         * @summary Delete a department
         * @param {string} departmentUuid The UUID of the department
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: async (departmentUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentUuid' is not null or undefined
            assertParamExists('deleteDepartment', 'departmentUuid', departmentUuid)
            const localVarPath = `/v1/departments/{department_uuid}`
                .replace(`{${"department_uuid"}}`, encodeURIComponent(String(departmentUuid !== undefined ? departmentUuid : `-department_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/departments/{department_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the departments for a given company with the employees and contractors assigned to that department.  scope: `departments:read`
         * @summary Get all departments of a company
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWithEmployees: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getAllWithEmployees', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/departments`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a department given the UUID  scope: `departments:read` 
         * @summary Get a department
         * @param {string} departmentUuid The UUID of the department
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentByUuid: async (departmentUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentUuid' is not null or undefined
            assertParamExists('getDepartmentByUuid', 'departmentUuid', departmentUuid)
            const localVarPath = `/v1/departments/{department_uuid}`
                .replace(`{${"department_uuid"}}`, encodeURIComponent(String(departmentUuid !== undefined ? departmentUuid : `-department_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/departments/{department_uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove employees and contractors from a department  scope: `departments:write` 
         * @summary Remove people from a department
         * @param {string} departmentUuid The UUID of the department
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {DepartmentsRemovePeopleFromDepartmentRequest} [departmentsRemovePeopleFromDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePeopleFromDepartment: async (departmentUuid: string, xGustoApiVersion?: '2024-03-01', departmentsRemovePeopleFromDepartmentRequest?: DepartmentsRemovePeopleFromDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentUuid' is not null or undefined
            assertParamExists('removePeopleFromDepartment', 'departmentUuid', departmentUuid)
            const localVarPath = `/v1/departments/{department_uuid}/remove`
                .replace(`{${"department_uuid"}}`, encodeURIComponent(String(departmentUuid !== undefined ? departmentUuid : `-department_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsRemovePeopleFromDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/departments/{department_uuid}/remove',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsRemovePeopleFromDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a department  scope: `departments:write`
         * @summary Update a department
         * @param {string} departmentUuid The UUID of the department
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {DepartmentsUpdateDepartmentRequest} [departmentsUpdateDepartmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment: async (departmentUuid: string, xGustoApiVersion?: '2024-03-01', departmentsUpdateDepartmentRequest?: DepartmentsUpdateDepartmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentUuid' is not null or undefined
            assertParamExists('updateDepartment', 'departmentUuid', departmentUuid)
            const localVarPath = `/v1/departments/{department_uuid}`
                .replace(`{${"department_uuid"}}`, encodeURIComponent(String(departmentUuid !== undefined ? departmentUuid : `-department_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: departmentsUpdateDepartmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/departments/{department_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(departmentsUpdateDepartmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add employees and contractors to a department  scope: `departments:write` 
         * @summary Add people to a department
         * @param {DepartmentsApiAddPeopleToDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPeopleToDepartment(requestParameters: DepartmentsApiAddPeopleToDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const departmentsAddPeopleToDepartmentRequest: DepartmentsAddPeopleToDepartmentRequest = {
                version: requestParameters.version,
                employees: requestParameters.employees,
                contractors: requestParameters.contractors
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPeopleToDepartment(requestParameters.departmentUuid, requestParameters.xGustoApiVersion, departmentsAddPeopleToDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a department  scope: `departments:write`
         * @summary Create a department
         * @param {DepartmentsApiCreateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(requestParameters: DepartmentsApiCreateDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const departmentsCreateDepartmentRequest: DepartmentsCreateDepartmentRequest = {
                title: requestParameters.title
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(requestParameters.companyUuid, requestParameters.xGustoApiVersion, departmentsCreateDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a department. You cannot delete a department until all employees and contractors have been removed.  scope: `departments:write` 
         * @summary Delete a department
         * @param {DepartmentsApiDeleteDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartment(requestParameters: DepartmentsApiDeleteDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartment(requestParameters.departmentUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all of the departments for a given company with the employees and contractors assigned to that department.  scope: `departments:read`
         * @summary Get all departments of a company
         * @param {DepartmentsApiGetAllWithEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWithEmployees(requestParameters: DepartmentsApiGetAllWithEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Department>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWithEmployees(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a department given the UUID  scope: `departments:read` 
         * @summary Get a department
         * @param {DepartmentsApiGetDepartmentByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentByUuid(requestParameters: DepartmentsApiGetDepartmentByUuidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentByUuid(requestParameters.departmentUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove employees and contractors from a department  scope: `departments:write` 
         * @summary Remove people from a department
         * @param {DepartmentsApiRemovePeopleFromDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePeopleFromDepartment(requestParameters: DepartmentsApiRemovePeopleFromDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const departmentsRemovePeopleFromDepartmentRequest: DepartmentsRemovePeopleFromDepartmentRequest = {
                version: requestParameters.version,
                employees: requestParameters.employees,
                contractors: requestParameters.contractors
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePeopleFromDepartment(requestParameters.departmentUuid, requestParameters.xGustoApiVersion, departmentsRemovePeopleFromDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a department  scope: `departments:write`
         * @summary Update a department
         * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const departmentsUpdateDepartmentRequest: DepartmentsUpdateDepartmentRequest = {
                title: requestParameters.title,
                version: requestParameters.version
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDepartment(requestParameters.departmentUuid, requestParameters.xGustoApiVersion, departmentsUpdateDepartmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * Add employees and contractors to a department  scope: `departments:write` 
         * @summary Add people to a department
         * @param {DepartmentsApiAddPeopleToDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeopleToDepartment(requestParameters: DepartmentsApiAddPeopleToDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.addPeopleToDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a department  scope: `departments:write`
         * @summary Create a department
         * @param {DepartmentsApiCreateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(requestParameters: DepartmentsApiCreateDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.createDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a department. You cannot delete a department until all employees and contractors have been removed.  scope: `departments:write` 
         * @summary Delete a department
         * @param {DepartmentsApiDeleteDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment(requestParameters: DepartmentsApiDeleteDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the departments for a given company with the employees and contractors assigned to that department.  scope: `departments:read`
         * @summary Get all departments of a company
         * @param {DepartmentsApiGetAllWithEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWithEmployees(requestParameters: DepartmentsApiGetAllWithEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Department>> {
            return localVarFp.getAllWithEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a department given the UUID  scope: `departments:read` 
         * @summary Get a department
         * @param {DepartmentsApiGetDepartmentByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentByUuid(requestParameters: DepartmentsApiGetDepartmentByUuidRequest, options?: AxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.getDepartmentByUuid(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove employees and contractors from a department  scope: `departments:write` 
         * @summary Remove people from a department
         * @param {DepartmentsApiRemovePeopleFromDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePeopleFromDepartment(requestParameters: DepartmentsApiRemovePeopleFromDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.removePeopleFromDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a department  scope: `departments:write`
         * @summary Update a department
         * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.updateDepartment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPeopleToDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiAddPeopleToDepartmentRequest
 */
export type DepartmentsApiAddPeopleToDepartmentRequest = {
    
    /**
    * The UUID of the department
    * @type {string}
    * @memberof DepartmentsApiAddPeopleToDepartment
    */
    readonly departmentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiAddPeopleToDepartment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & DepartmentsAddPeopleToDepartmentRequest

/**
 * Request parameters for createDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiCreateDepartmentRequest
 */
export type DepartmentsApiCreateDepartmentRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof DepartmentsApiCreateDepartment
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiCreateDepartment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & DepartmentsCreateDepartmentRequest

/**
 * Request parameters for deleteDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDeleteDepartmentRequest
 */
export type DepartmentsApiDeleteDepartmentRequest = {
    
    /**
    * The UUID of the department
    * @type {string}
    * @memberof DepartmentsApiDeleteDepartment
    */
    readonly departmentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiDeleteDepartment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getAllWithEmployees operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetAllWithEmployeesRequest
 */
export type DepartmentsApiGetAllWithEmployeesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof DepartmentsApiGetAllWithEmployees
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiGetAllWithEmployees
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getDepartmentByUuid operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetDepartmentByUuidRequest
 */
export type DepartmentsApiGetDepartmentByUuidRequest = {
    
    /**
    * The UUID of the department
    * @type {string}
    * @memberof DepartmentsApiGetDepartmentByUuid
    */
    readonly departmentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiGetDepartmentByUuid
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for removePeopleFromDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiRemovePeopleFromDepartmentRequest
 */
export type DepartmentsApiRemovePeopleFromDepartmentRequest = {
    
    /**
    * The UUID of the department
    * @type {string}
    * @memberof DepartmentsApiRemovePeopleFromDepartment
    */
    readonly departmentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiRemovePeopleFromDepartment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & DepartmentsRemovePeopleFromDepartmentRequest

/**
 * Request parameters for updateDepartment operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiUpdateDepartmentRequest
 */
export type DepartmentsApiUpdateDepartmentRequest = {
    
    /**
    * The UUID of the department
    * @type {string}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly departmentUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof DepartmentsApiUpdateDepartment
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & DepartmentsUpdateDepartmentRequest

/**
 * DepartmentsApiGenerated - object-oriented interface
 * @export
 * @class DepartmentsApiGenerated
 * @extends {BaseAPI}
 */
export class DepartmentsApiGenerated extends BaseAPI {
    /**
     * Add employees and contractors to a department  scope: `departments:write` 
     * @summary Add people to a department
     * @param {DepartmentsApiAddPeopleToDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public addPeopleToDepartment(requestParameters: DepartmentsApiAddPeopleToDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).addPeopleToDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a department  scope: `departments:write`
     * @summary Create a department
     * @param {DepartmentsApiCreateDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public createDepartment(requestParameters: DepartmentsApiCreateDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).createDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a department. You cannot delete a department until all employees and contractors have been removed.  scope: `departments:write` 
     * @summary Delete a department
     * @param {DepartmentsApiDeleteDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public deleteDepartment(requestParameters: DepartmentsApiDeleteDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).deleteDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all of the departments for a given company with the employees and contractors assigned to that department.  scope: `departments:read`
     * @summary Get all departments of a company
     * @param {DepartmentsApiGetAllWithEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getAllWithEmployees(requestParameters: DepartmentsApiGetAllWithEmployeesRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getAllWithEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a department given the UUID  scope: `departments:read` 
     * @summary Get a department
     * @param {DepartmentsApiGetDepartmentByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getDepartmentByUuid(requestParameters: DepartmentsApiGetDepartmentByUuidRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getDepartmentByUuid(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove employees and contractors from a department  scope: `departments:write` 
     * @summary Remove people from a department
     * @param {DepartmentsApiRemovePeopleFromDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public removePeopleFromDepartment(requestParameters: DepartmentsApiRemovePeopleFromDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).removePeopleFromDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a department  scope: `departments:write`
     * @summary Update a department
     * @param {DepartmentsApiUpdateDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public updateDepartment(requestParameters: DepartmentsApiUpdateDepartmentRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).updateDepartment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
