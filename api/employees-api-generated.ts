/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Employee } from '../models';
// @ts-ignore
import { EmployeeOnboardingStatus } from '../models';
// @ts-ignore
import { EmployeesCreateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeesGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { EmployeesUpdateEmployeeRequest } from '../models';
// @ts-ignore
import { EmployeesUpdateOnboardingStatusRequest } from '../models';
// @ts-ignore
import { TimeOffActivity } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeesApi - axios parameter creator
 * @export
 */
export const EmployeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is currently supported but will eventually be deprecated; please use `/v1/employees/{employee_id}/onboarding_status` instead.  Call this endpoint as the very last step of employee onboarding to complete their onboarding. When successful, the employee\'s `onboarded` attribute will be updated to true, indicating that they can be included in company\'s payrolls.
         * @summary Finish onboarding an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('completeOnboarding', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/finish_onboarding`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/finish_onboarding',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeesCreateEmployeeRequest} [employeesCreateEmployeeRequest] Create an employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (companyId: string, xGustoApiVersion?: '2024-03-01', employeesCreateEmployeeRequest?: EmployeesCreateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createEmployee', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeesCreateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/employees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeesCreateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnboardingEmployee: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteOnboardingEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (employeeId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getCustomFields', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/custom_fields`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'all_compensations' | 'custom_fields'} [include] Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\&#39; custom fields
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById: async (employeeId: string, include?: 'all_compensations' | 'custom_fields', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeById', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # Description Retrieves an employee\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `employees:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ### Employee self-onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. | | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. | | `self_onboarding_invited_started` | Employee has started the self-onboarding process. | | `self_onboarding_invited_overdue` | Employee\'s start date has passed, and employee has still not completed self-onboarding. | | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to \"self_onboarding_awaiting_admin_review\" from here, once the Admin has started reviewing. | | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee\'s information. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `personal_details` | Add employee\'s first name, last name, email, date of birth, social security number | | `compensation_details` | Associate employee to a job & compensation. | | `add_work_address` | Add employee work address. | | `add_home_address` | Add employee home address. | | `federal_tax_setup` | Set up federal tax withholdings. | | `state_tax_setup` | Set up state tax withholdings. | | `direct_deposit_setup` | (optional) Set up employee\'s direct deposit. | | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated & signed. | | `file_new_hire_report` | File a new hire report for this employee. | | `admin_review` | Admin reviews & confirms employee details (only required for Employee self-onboarding) |
         * @summary Get the employee\'s onboarding status
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getOnboardingStatus', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/onboarding_status`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/onboarding_status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {string} employeeUuid The UUID of the employee
         * @param {string} timeOffType The time off type name you want to query data for. ex: \&#39;sick\&#39; or \&#39;vacation\&#39;
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffActivities: async (employeeUuid: string, timeOffType: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeUuid' is not null or undefined
            assertParamExists('getTimeOffActivities', 'employeeUuid', employeeUuid)
            // verify required parameter 'timeOffType' is not null or undefined
            assertParamExists('getTimeOffActivities', 'timeOffType', timeOffType)
            const localVarPath = `/v1/employees/{employee_uuid}/time_off_activities`
                .replace(`{${"employee_uuid"}}`, encodeURIComponent(String(employeeUuid !== undefined ? employeeUuid : `-employee_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (timeOffType !== undefined) {
                localVarQueryParameter['time_off_type'] = timeOffType;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_uuid}/time_off_activities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {string} companyId The UUID of the company
         * @param {boolean} [terminated] Filters employees by the provided boolean
         * @param {'all_compensations' | 'custom_fields'} [include] Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\&#39; custom fields
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyEmployees: async (companyId: string, terminated?: boolean, include?: 'all_compensations' | 'custom_fields', page?: number, per?: number, xGustoApiVersion?: '2024-03-01', body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCompanyEmployees', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/employees`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (terminated !== undefined) {
                localVarQueryParameter['terminated'] = terminated;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/employees',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeesUpdateEmployeeRequest} [employeesUpdateEmployeeRequest] Update an employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeesUpdateEmployeeRequest?: EmployeesUpdateEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployee', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeesUpdateEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeesUpdateEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * scope: `employees:manage`  Updates an employee\'s onboarding status. Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
         * @summary Update the employee\'s onboarding status
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeesUpdateOnboardingStatusRequest} [employeesUpdateOnboardingStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOnboardingStatus: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeesUpdateOnboardingStatusRequest?: EmployeesUpdateOnboardingStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateOnboardingStatus', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/onboarding_status`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeesUpdateOnboardingStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/onboarding_status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeesUpdateOnboardingStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeesApi - functional programming interface
 * @export
 */
export const EmployeesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint is currently supported but will eventually be deprecated; please use `/v1/employees/{employee_id}/onboarding_status` instead.  Call this endpoint as the very last step of employee onboarding to complete their onboarding. When successful, the employee\'s `onboarded` attribute will be updated to true, indicating that they can be included in company\'s payrolls.
         * @summary Finish onboarding an employee
         * @param {EmployeesApiCompleteOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeOnboarding(requestParameters: EmployeesApiCompleteOnboardingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeOnboarding(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const employeesCreateEmployeeRequest: EmployeesCreateEmployeeRequest = {
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                date_of_birth: requestParameters.date_of_birth,
                email: requestParameters.email,
                ssn: requestParameters.ssn,
                self_onboarding: requestParameters.self_onboarding
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(requestParameters.companyId, requestParameters.xGustoApiVersion, employeesCreateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOnboardingEmployee(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeesGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {EmployeesApiGetEmployeeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeById(requestParameters: EmployeesApiGetEmployeeByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeById(requestParameters.employeeId, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * # Description Retrieves an employee\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `employees:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ### Employee self-onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. | | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. | | `self_onboarding_invited_started` | Employee has started the self-onboarding process. | | `self_onboarding_invited_overdue` | Employee\'s start date has passed, and employee has still not completed self-onboarding. | | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to \"self_onboarding_awaiting_admin_review\" from here, once the Admin has started reviewing. | | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee\'s information. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `personal_details` | Add employee\'s first name, last name, email, date of birth, social security number | | `compensation_details` | Associate employee to a job & compensation. | | `add_work_address` | Add employee work address. | | `add_home_address` | Add employee home address. | | `federal_tax_setup` | Set up federal tax withholdings. | | `state_tax_setup` | Set up state tax withholdings. | | `direct_deposit_setup` | (optional) Set up employee\'s direct deposit. | | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated & signed. | | `file_new_hire_report` | File a new hire report for this employee. | | `admin_review` | Admin reviews & confirms employee details (only required for Employee self-onboarding) |
         * @summary Get the employee\'s onboarding status
         * @param {EmployeesApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnboardingStatus(requestParameters: EmployeesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeOnboardingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnboardingStatus(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffActivities(requestParameters.employeeUuid, requestParameters.timeOffType, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {EmployeesApiListCompanyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyEmployees(requestParameters: EmployeesApiListCompanyEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employee>>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyEmployees(requestParameters.companyId, requestParameters.terminated, requestParameters.include, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employee>> {
            const employeesUpdateEmployeeRequest: EmployeesUpdateEmployeeRequest = {
                version: requestParameters.version,
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                date_of_birth: requestParameters.date_of_birth,
                email: requestParameters.email,
                ssn: requestParameters.ssn,
                two_percent_shareholder: requestParameters.two_percent_shareholder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployee(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeesUpdateEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * scope: `employees:manage`  Updates an employee\'s onboarding status. Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
         * @summary Update the employee\'s onboarding status
         * @param {EmployeesApiUpdateOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOnboardingStatus(requestParameters: EmployeesApiUpdateOnboardingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeOnboardingStatus>> {
            const employeesUpdateOnboardingStatusRequest: EmployeesUpdateOnboardingStatusRequest = {
                onboarding_status: requestParameters.onboarding_status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOnboardingStatus(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeesUpdateOnboardingStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeesApi - factory interface
 * @export
 */
export const EmployeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeesApiFp(configuration)
    return {
        /**
         * This endpoint is currently supported but will eventually be deprecated; please use `/v1/employees/{employee_id}/onboarding_status` instead.  Call this endpoint as the very last step of employee onboarding to complete their onboarding. When successful, the employee\'s `onboarded` attribute will be updated to true, indicating that they can be included in company\'s payrolls.
         * @summary Finish onboarding an employee
         * @param {EmployeesApiCompleteOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeOnboarding(requestParameters: EmployeesApiCompleteOnboardingRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.completeOnboarding(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an employee.  scope: `employees:manage`
         * @summary Create an employee
         * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.createEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
         * @summary Delete an onboarding employee
         * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOnboardingEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the employee\'s custom fields.  scope: `employees:read`
         * @summary Get an employee\'s custom fields
         * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeesGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee.  scope: `employees:read` 
         * @summary Get an employee
         * @param {EmployeesApiGetEmployeeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeById(requestParameters: EmployeesApiGetEmployeeByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.getEmployeeById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * # Description Retrieves an employee\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `employees:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ### Employee self-onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. | | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. | | `self_onboarding_invited_started` | Employee has started the self-onboarding process. | | `self_onboarding_invited_overdue` | Employee\'s start date has passed, and employee has still not completed self-onboarding. | | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to \"self_onboarding_awaiting_admin_review\" from here, once the Admin has started reviewing. | | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee\'s information. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `personal_details` | Add employee\'s first name, last name, email, date of birth, social security number | | `compensation_details` | Associate employee to a job & compensation. | | `add_work_address` | Add employee work address. | | `add_home_address` | Add employee home address. | | `federal_tax_setup` | Set up federal tax withholdings. | | `state_tax_setup` | Set up state tax withholdings. | | `direct_deposit_setup` | (optional) Set up employee\'s direct deposit. | | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated & signed. | | `file_new_hire_report` | File a new hire report for this employee. | | `admin_review` | Admin reviews & confirms employee details (only required for Employee self-onboarding) |
         * @summary Get the employee\'s onboarding status
         * @param {EmployeesApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus(requestParameters: EmployeesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeOnboardingStatus> {
            return localVarFp.getOnboardingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get employee time off activities.  scope: `employee_time_off_activities:read`
         * @summary Get employee time off activities
         * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffActivity> {
            return localVarFp.getTimeOffActivities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
         * @summary Get employees of a company
         * @param {EmployeesApiListCompanyEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyEmployees(requestParameters: EmployeesApiListCompanyEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Employee>> {
            return localVarFp.listCompanyEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an employee.  scope: `employees:write`
         * @summary Update an employee
         * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Employee> {
            return localVarFp.updateEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * scope: `employees:manage`  Updates an employee\'s onboarding status. Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
         * @summary Update the employee\'s onboarding status
         * @param {EmployeesApiUpdateOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOnboardingStatus(requestParameters: EmployeesApiUpdateOnboardingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeOnboardingStatus> {
            return localVarFp.updateOnboardingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for completeOnboarding operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCompleteOnboardingRequest
 */
export type EmployeesApiCompleteOnboardingRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiCompleteOnboarding
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiCompleteOnboarding
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for createEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiCreateEmployeeRequest
 */
export type EmployeesApiCreateEmployeeRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EmployeesApiCreateEmployee
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiCreateEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeesCreateEmployeeRequest

/**
 * Request parameters for deleteOnboardingEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiDeleteOnboardingEmployeeRequest
 */
export type EmployeesApiDeleteOnboardingEmployeeRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiDeleteOnboardingEmployee
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiDeleteOnboardingEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCustomFields operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetCustomFieldsRequest
 */
export type EmployeesApiGetCustomFieldsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetCustomFields
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getEmployeeById operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetEmployeeByIdRequest
 */
export type EmployeesApiGetEmployeeByIdRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetEmployeeById
    */
    readonly employeeId: string
    
    /**
    * Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\' custom fields
    * @type {'all_compensations' | 'custom_fields'}
    * @memberof EmployeesApiGetEmployeeById
    */
    readonly include?: 'all_compensations' | 'custom_fields'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetEmployeeById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getOnboardingStatus operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetOnboardingStatusRequest
 */
export type EmployeesApiGetOnboardingStatusRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetOnboardingStatus
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetOnboardingStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getTimeOffActivities operation in EmployeesApi.
 * @export
 * @interface EmployeesApiGetTimeOffActivitiesRequest
 */
export type EmployeesApiGetTimeOffActivitiesRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly employeeUuid: string
    
    /**
    * The time off type name you want to query data for. ex: \'sick\' or \'vacation\'
    * @type {string}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly timeOffType: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiGetTimeOffActivities
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listCompanyEmployees operation in EmployeesApi.
 * @export
 * @interface EmployeesApiListCompanyEmployeesRequest
 */
export type EmployeesApiListCompanyEmployeesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly companyId: string
    
    /**
    * Filters employees by the provided boolean
    * @type {boolean}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly terminated?: boolean
    
    /**
    * Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options: - all_compensations: Include all effective dated compensations for each job instead of only the current compensation - custom_fields: Include employees\' custom fields
    * @type {'all_compensations' | 'custom_fields'}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly include?: 'all_compensations' | 'custom_fields'
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiListCompanyEmployees
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & object

/**
 * Request parameters for updateEmployee operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateEmployeeRequest
 */
export type EmployeesApiUpdateEmployeeRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiUpdateEmployee
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiUpdateEmployee
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeesUpdateEmployeeRequest

/**
 * Request parameters for updateOnboardingStatus operation in EmployeesApi.
 * @export
 * @interface EmployeesApiUpdateOnboardingStatusRequest
 */
export type EmployeesApiUpdateOnboardingStatusRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeesApiUpdateOnboardingStatus
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeesApiUpdateOnboardingStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeesUpdateOnboardingStatusRequest

/**
 * EmployeesApiGenerated - object-oriented interface
 * @export
 * @class EmployeesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeesApiGenerated extends BaseAPI {
    /**
     * This endpoint is currently supported but will eventually be deprecated; please use `/v1/employees/{employee_id}/onboarding_status` instead.  Call this endpoint as the very last step of employee onboarding to complete their onboarding. When successful, the employee\'s `onboarded` attribute will be updated to true, indicating that they can be included in company\'s payrolls.
     * @summary Finish onboarding an employee
     * @param {EmployeesApiCompleteOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public completeOnboarding(requestParameters: EmployeesApiCompleteOnboardingRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).completeOnboarding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an employee.  scope: `employees:manage`
     * @summary Create an employee
     * @param {EmployeesApiCreateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public createEmployee(requestParameters: EmployeesApiCreateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).createEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete an employee who is in onboarding. Deleting an onboarded employee is not allowed. Please check out the Terminations api if you need to terminate an onboarded employee.  scope: `employees:manage`
     * @summary Delete an onboarding employee
     * @param {EmployeesApiDeleteOnboardingEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public deleteOnboardingEmployee(requestParameters: EmployeesApiDeleteOnboardingEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).deleteOnboardingEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the employee\'s custom fields.  scope: `employees:read`
     * @summary Get an employee\'s custom fields
     * @param {EmployeesApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getCustomFields(requestParameters: EmployeesApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee.  scope: `employees:read` 
     * @summary Get an employee
     * @param {EmployeesApiGetEmployeeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getEmployeeById(requestParameters: EmployeesApiGetEmployeeByIdRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getEmployeeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # Description Retrieves an employee\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `employees:read`  ## onboarding_status  ### Admin-facilitated onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ### Employee self-onboarding | onboarding_status | Description | |:------------------|------------:| | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. | | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. | | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. | | `self_onboarding_invited_started` | Employee has started the self-onboarding process. | | `self_onboarding_invited_overdue` | Employee\'s start date has passed, and employee has still not completed self-onboarding. | | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to \"self_onboarding_awaiting_admin_review\" from here, once the Admin has started reviewing. | | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee\'s information. | | `onboarding_completed` | Employee has been fully onboarded and verified. |  ## onboarding_steps  | onboarding_steps | Requirement(s) to be completed | |:-----------------|-------------------------------:| | `personal_details` | Add employee\'s first name, last name, email, date of birth, social security number | | `compensation_details` | Associate employee to a job & compensation. | | `add_work_address` | Add employee work address. | | `add_home_address` | Add employee home address. | | `federal_tax_setup` | Set up federal tax withholdings. | | `state_tax_setup` | Set up state tax withholdings. | | `direct_deposit_setup` | (optional) Set up employee\'s direct deposit. | | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated & signed. | | `file_new_hire_report` | File a new hire report for this employee. | | `admin_review` | Admin reviews & confirms employee details (only required for Employee self-onboarding) |
     * @summary Get the employee\'s onboarding status
     * @param {EmployeesApiGetOnboardingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getOnboardingStatus(requestParameters: EmployeesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getOnboardingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get employee time off activities.  scope: `employee_time_off_activities:read`
     * @summary Get employee time off activities
     * @param {EmployeesApiGetTimeOffActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public getTimeOffActivities(requestParameters: EmployeesApiGetTimeOffActivitiesRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).getTimeOffActivities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all of the employees, onboarding, active and terminated, for a given company.  scope: `employees:read`
     * @summary Get employees of a company
     * @param {EmployeesApiListCompanyEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public listCompanyEmployees(requestParameters: EmployeesApiListCompanyEmployeesRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).listCompanyEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an employee.  scope: `employees:write`
     * @summary Update an employee
     * @param {EmployeesApiUpdateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateEmployee(requestParameters: EmployeesApiUpdateEmployeeRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * scope: `employees:manage`  Updates an employee\'s onboarding status. Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.  | Action | current onboarding_status | new onboarding_status | |:------------------|:------------:|----------:| | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` | | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` | | Cancel an employee\'s self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` | | Review an employee\'s self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` | | Finish an employee\'s onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
     * @summary Update the employee\'s onboarding status
     * @param {EmployeesApiUpdateOnboardingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeesApiGenerated
     */
    public updateOnboardingStatus(requestParameters: EmployeesApiUpdateOnboardingStatusRequest, options?: AxiosRequestConfig) {
        return EmployeesApiFp(this.configuration).updateOnboardingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
