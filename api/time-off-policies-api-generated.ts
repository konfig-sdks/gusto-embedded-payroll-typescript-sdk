/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccruingTimeOffHour } from '../models';
// @ts-ignore
import { TimeOffPoliciesAddEmployeesToPolicyRequest } from '../models';
// @ts-ignore
import { TimeOffPoliciesAddEmployeesToPolicyRequestEmployeesInner } from '../models';
// @ts-ignore
import { TimeOffPoliciesCalculateAccruingTimeOffHoursRequest } from '../models';
// @ts-ignore
import { TimeOffPoliciesCreatePolicyRequest } from '../models';
// @ts-ignore
import { TimeOffPoliciesRemoveEmployeesRequest } from '../models';
// @ts-ignore
import { TimeOffPoliciesUpdateEmployeeBalanceRequest } from '../models';
// @ts-ignore
import { TimeOffPoliciesUpdatePolicyRequest } from '../models';
// @ts-ignore
import { TimeOffPolicy } from '../models';
// @ts-ignore
import { TimeOffPolicyEmployeesInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffPoliciesApi - axios parameter creator
 * @export
 */
export const TimeOffPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: `time_off_policies:write`
         * @summary Add employees to a time off policy
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesAddEmployeesToPolicyRequest} [timeOffPoliciesAddEmployeesToPolicyRequest] A list of employee objects containing the employee uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeesToPolicy: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesAddEmployeesToPolicyRequest?: TimeOffPoliciesAddEmployeesToPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('addEmployeesToPolicy', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}/add_employees`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesAddEmployeesToPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}/add_employees',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesAddEmployeesToPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {string} payrollId The UUID of the payroll
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesCalculateAccruingTimeOffHoursRequest} [timeOffPoliciesCalculateAccruingTimeOffHoursRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateAccruingTimeOffHours: async (payrollId: string, employeeId: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesCalculateAccruingTimeOffHoursRequest?: TimeOffPoliciesCalculateAccruingTimeOffHoursRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('calculateAccruingTimeOffHours', 'payrollId', payrollId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('calculateAccruingTimeOffHours', 'employeeId', employeeId)
            const localVarPath = `/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesCalculateAccruingTimeOffHoursRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesCalculateAccruingTimeOffHoursRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a time off policy  scope: `time_off_policies:write`
         * @summary Create a time off policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesCreatePolicyRequest} [timeOffPoliciesCreatePolicyRequest] Requires a policy name, a policy_type, and an accrual_method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesCreatePolicyRequest?: TimeOffPoliciesCreatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createPolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/time_off_policies`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesCreatePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/time_off_policies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesCreatePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivate a time off policy  scope: `time_off_policies:write`
         * @summary Deactivate a time off policy
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivatePolicy: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('deactivatePolicy', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}/deactivate`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}/deactivate',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all time off policies for a company  scope: `time_off_policies:read`
         * @summary Get all time off policies
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPolicies: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getAllPolicies', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/time_off_policies`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/time_off_policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a time off policy  scope: `time_off_policies:read`
         * @summary Get a time off policy
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('getPolicy', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove employees from a time off policy  scope: `time_off_policies:write`
         * @summary Remove employees from a time off policy
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesRemoveEmployeesRequest} [timeOffPoliciesRemoveEmployeesRequest] A list of employee objects containing the employee uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployees: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesRemoveEmployeesRequest?: TimeOffPoliciesRemoveEmployeesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('removeEmployees', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}/remove_employees`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesRemoveEmployeesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}/remove_employees',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesRemoveEmployeesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates time off hours balances for employees for a time off policy  scope: `time_off_policies:write`
         * @summary Update employee time off hour balances
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesUpdateEmployeeBalanceRequest} [timeOffPoliciesUpdateEmployeeBalanceRequest] A list of employee objects containing the employee uuid and time off hours balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBalance: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesUpdateEmployeeBalanceRequest?: TimeOffPoliciesUpdateEmployeeBalanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('updateEmployeeBalance', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}/balance`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesUpdateEmployeeBalanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}/balance',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesUpdateEmployeeBalanceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a time off policy  scope: `time_off_policies:write`
         * @summary Update a time off policy
         * @param {string} timeOffPolicyUuid The UUID of the company time off policy
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {TimeOffPoliciesUpdatePolicyRequest} [timeOffPoliciesUpdatePolicyRequest] Can update any attributes of the time off policy except policy_type, is_active, complete &amp; employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (timeOffPolicyUuid: string, xGustoApiVersion?: '2024-03-01', timeOffPoliciesUpdatePolicyRequest?: TimeOffPoliciesUpdatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeOffPolicyUuid' is not null or undefined
            assertParamExists('updatePolicy', 'timeOffPolicyUuid', timeOffPolicyUuid)
            const localVarPath = `/v1/time_off_policies/{time_off_policy_uuid}`
                .replace(`{${"time_off_policy_uuid"}}`, encodeURIComponent(String(timeOffPolicyUuid !== undefined ? timeOffPolicyUuid : `-time_off_policy_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesUpdatePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off_policies/{time_off_policy_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesUpdatePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffPoliciesApi - functional programming interface
 * @export
 */
export const TimeOffPoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffPoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: `time_off_policies:write`
         * @summary Add employees to a time off policy
         * @param {TimeOffPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeesToPolicy(requestParameters: TimeOffPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const timeOffPoliciesAddEmployeesToPolicyRequest: TimeOffPoliciesAddEmployeesToPolicyRequest = {
                employees: requestParameters.employees
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeesToPolicy(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, timeOffPoliciesAddEmployeesToPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccruingTimeOffHour>>> {
            const timeOffPoliciesCalculateAccruingTimeOffHoursRequest: TimeOffPoliciesCalculateAccruingTimeOffHoursRequest = {
                regular_hours_worked: requestParameters.regular_hours_worked,
                overtime_hours_worked: requestParameters.overtime_hours_worked,
                double_overtime_hours_worked: requestParameters.double_overtime_hours_worked,
                pto_hours_used: requestParameters.pto_hours_used,
                sick_hours_used: requestParameters.sick_hours_used
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateAccruingTimeOffHours(requestParameters.payrollId, requestParameters.employeeId, requestParameters.xGustoApiVersion, timeOffPoliciesCalculateAccruingTimeOffHoursRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a time off policy  scope: `time_off_policies:write`
         * @summary Create a time off policy
         * @param {TimeOffPoliciesApiCreatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(requestParameters: TimeOffPoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const timeOffPoliciesCreatePolicyRequest: TimeOffPoliciesCreatePolicyRequest = {
                name: requestParameters.name,
                policy_type: requestParameters.policy_type,
                accrual_method: requestParameters.accrual_method,
                accrual_rate: requestParameters.accrual_rate,
                accrual_rate_unit: requestParameters.accrual_rate_unit,
                paid_out_on_termination: requestParameters.paid_out_on_termination,
                accrual_waiting_period_days: requestParameters.accrual_waiting_period_days,
                carryover_limit_hours: requestParameters.carryover_limit_hours,
                max_accrual_hours_per_year: requestParameters.max_accrual_hours_per_year,
                max_hours: requestParameters.max_hours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, timeOffPoliciesCreatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deactivate a time off policy  scope: `time_off_policies:write`
         * @summary Deactivate a time off policy
         * @param {TimeOffPoliciesApiDeactivatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivatePolicy(requestParameters: TimeOffPoliciesApiDeactivatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivatePolicy(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all time off policies for a company  scope: `time_off_policies:read`
         * @summary Get all time off policies
         * @param {TimeOffPoliciesApiGetAllPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPolicies(requestParameters: TimeOffPoliciesApiGetAllPoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimeOffPolicy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPolicies(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a time off policy  scope: `time_off_policies:read`
         * @summary Get a time off policy
         * @param {TimeOffPoliciesApiGetPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(requestParameters: TimeOffPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicy(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove employees from a time off policy  scope: `time_off_policies:write`
         * @summary Remove employees from a time off policy
         * @param {TimeOffPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmployees(requestParameters: TimeOffPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const timeOffPoliciesRemoveEmployeesRequest: TimeOffPoliciesRemoveEmployeesRequest = {
                employees: requestParameters.employees
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmployees(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, timeOffPoliciesRemoveEmployeesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates time off hours balances for employees for a time off policy  scope: `time_off_policies:write`
         * @summary Update employee time off hour balances
         * @param {TimeOffPoliciesApiUpdateEmployeeBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeBalance(requestParameters: TimeOffPoliciesApiUpdateEmployeeBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const timeOffPoliciesUpdateEmployeeBalanceRequest: TimeOffPoliciesUpdateEmployeeBalanceRequest = {
                employees: requestParameters.employees
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeBalance(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, timeOffPoliciesUpdateEmployeeBalanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a time off policy  scope: `time_off_policies:write`
         * @summary Update a time off policy
         * @param {TimeOffPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(requestParameters: TimeOffPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffPolicy>> {
            const timeOffPoliciesUpdatePolicyRequest: TimeOffPoliciesUpdatePolicyRequest = {
                name: requestParameters.name,
                accrual_method: requestParameters.accrual_method,
                accrual_rate: requestParameters.accrual_rate,
                accrual_rate_unit: requestParameters.accrual_rate_unit,
                paid_out_on_termination: requestParameters.paid_out_on_termination,
                accrual_waiting_period_days: requestParameters.accrual_waiting_period_days,
                carryover_limit_hours: requestParameters.carryover_limit_hours,
                max_accrual_hours_per_year: requestParameters.max_accrual_hours_per_year,
                max_hours: requestParameters.max_hours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(requestParameters.timeOffPolicyUuid, requestParameters.xGustoApiVersion, timeOffPoliciesUpdatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffPoliciesApi - factory interface
 * @export
 */
export const TimeOffPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffPoliciesApiFp(configuration)
    return {
        /**
         * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: `time_off_policies:write`
         * @summary Add employees to a time off policy
         * @param {TimeOffPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeesToPolicy(requestParameters: TimeOffPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.addEmployeesToPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
         * @summary Calculate accruing time off hours
         * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccruingTimeOffHour>> {
            return localVarFp.calculateAccruingTimeOffHours(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a time off policy  scope: `time_off_policies:write`
         * @summary Create a time off policy
         * @param {TimeOffPoliciesApiCreatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(requestParameters: TimeOffPoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.createPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deactivate a time off policy  scope: `time_off_policies:write`
         * @summary Deactivate a time off policy
         * @param {TimeOffPoliciesApiDeactivatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivatePolicy(requestParameters: TimeOffPoliciesApiDeactivatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.deactivatePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all time off policies for a company  scope: `time_off_policies:read`
         * @summary Get all time off policies
         * @param {TimeOffPoliciesApiGetAllPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPolicies(requestParameters: TimeOffPoliciesApiGetAllPoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TimeOffPolicy>> {
            return localVarFp.getAllPolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a time off policy  scope: `time_off_policies:read`
         * @summary Get a time off policy
         * @param {TimeOffPoliciesApiGetPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(requestParameters: TimeOffPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.getPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove employees from a time off policy  scope: `time_off_policies:write`
         * @summary Remove employees from a time off policy
         * @param {TimeOffPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployees(requestParameters: TimeOffPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.removeEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates time off hours balances for employees for a time off policy  scope: `time_off_policies:write`
         * @summary Update employee time off hour balances
         * @param {TimeOffPoliciesApiUpdateEmployeeBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeBalance(requestParameters: TimeOffPoliciesApiUpdateEmployeeBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.updateEmployeeBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a time off policy  scope: `time_off_policies:write`
         * @summary Update a time off policy
         * @param {TimeOffPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(requestParameters: TimeOffPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffPolicy> {
            return localVarFp.updatePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEmployeesToPolicy operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiAddEmployeesToPolicyRequest
 */
export type TimeOffPoliciesApiAddEmployeesToPolicyRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiAddEmployeesToPolicy
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiAddEmployeesToPolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesAddEmployeesToPolicyRequest

/**
 * Request parameters for calculateAccruingTimeOffHours operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest
 */
export type TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly payrollId: string
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiCalculateAccruingTimeOffHours
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesCalculateAccruingTimeOffHoursRequest

/**
 * Request parameters for createPolicy operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiCreatePolicyRequest
 */
export type TimeOffPoliciesApiCreatePolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof TimeOffPoliciesApiCreatePolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiCreatePolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesCreatePolicyRequest

/**
 * Request parameters for deactivatePolicy operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiDeactivatePolicyRequest
 */
export type TimeOffPoliciesApiDeactivatePolicyRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiDeactivatePolicy
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiDeactivatePolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getAllPolicies operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiGetAllPoliciesRequest
 */
export type TimeOffPoliciesApiGetAllPoliciesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof TimeOffPoliciesApiGetAllPolicies
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiGetAllPolicies
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getPolicy operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiGetPolicyRequest
 */
export type TimeOffPoliciesApiGetPolicyRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiGetPolicy
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiGetPolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for removeEmployees operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiRemoveEmployeesRequest
 */
export type TimeOffPoliciesApiRemoveEmployeesRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiRemoveEmployees
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiRemoveEmployees
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesRemoveEmployeesRequest

/**
 * Request parameters for updateEmployeeBalance operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiUpdateEmployeeBalanceRequest
 */
export type TimeOffPoliciesApiUpdateEmployeeBalanceRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiUpdateEmployeeBalance
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiUpdateEmployeeBalance
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesUpdateEmployeeBalanceRequest

/**
 * Request parameters for updatePolicy operation in TimeOffPoliciesApi.
 * @export
 * @interface TimeOffPoliciesApiUpdatePolicyRequest
 */
export type TimeOffPoliciesApiUpdatePolicyRequest = {
    
    /**
    * The UUID of the company time off policy
    * @type {string}
    * @memberof TimeOffPoliciesApiUpdatePolicy
    */
    readonly timeOffPolicyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof TimeOffPoliciesApiUpdatePolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & TimeOffPoliciesUpdatePolicyRequest

/**
 * TimeOffPoliciesApiGenerated - object-oriented interface
 * @export
 * @class TimeOffPoliciesApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffPoliciesApiGenerated extends BaseAPI {
    /**
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies  scope: `time_off_policies:write`
     * @summary Add employees to a time off policy
     * @param {TimeOffPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public addEmployeesToPolicy(requestParameters: TimeOffPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).addEmployeesToPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of accruing time off for each time off policy associated with the employee.  Factors affecting the accrued hours:   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)   * how many hours of work during this pay period   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)   * company pay schedule frequency (for per pay period)  If none of the parameters is passed in, the accrued time off hour will be 0.  scope: `payrolls:read`
     * @summary Calculate accruing time off hours
     * @param {TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public calculateAccruingTimeOffHours(requestParameters: TimeOffPoliciesApiCalculateAccruingTimeOffHoursRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).calculateAccruingTimeOffHours(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a time off policy  scope: `time_off_policies:write`
     * @summary Create a time off policy
     * @param {TimeOffPoliciesApiCreatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public createPolicy(requestParameters: TimeOffPoliciesApiCreatePolicyRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).createPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deactivate a time off policy  scope: `time_off_policies:write`
     * @summary Deactivate a time off policy
     * @param {TimeOffPoliciesApiDeactivatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public deactivatePolicy(requestParameters: TimeOffPoliciesApiDeactivatePolicyRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).deactivatePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all time off policies for a company  scope: `time_off_policies:read`
     * @summary Get all time off policies
     * @param {TimeOffPoliciesApiGetAllPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public getAllPolicies(requestParameters: TimeOffPoliciesApiGetAllPoliciesRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).getAllPolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a time off policy  scope: `time_off_policies:read`
     * @summary Get a time off policy
     * @param {TimeOffPoliciesApiGetPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public getPolicy(requestParameters: TimeOffPoliciesApiGetPolicyRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).getPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove employees from a time off policy  scope: `time_off_policies:write`
     * @summary Remove employees from a time off policy
     * @param {TimeOffPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public removeEmployees(requestParameters: TimeOffPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).removeEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates time off hours balances for employees for a time off policy  scope: `time_off_policies:write`
     * @summary Update employee time off hour balances
     * @param {TimeOffPoliciesApiUpdateEmployeeBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public updateEmployeeBalance(requestParameters: TimeOffPoliciesApiUpdateEmployeeBalanceRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).updateEmployeeBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a time off policy  scope: `time_off_policies:write`
     * @summary Update a time off policy
     * @param {TimeOffPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffPoliciesApiGenerated
     */
    public updatePolicy(requestParameters: TimeOffPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig) {
        return TimeOffPoliciesApiFp(this.configuration).updatePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
