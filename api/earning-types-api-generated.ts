/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EarningType } from '../models';
// @ts-ignore
import { EarningTypesCreateCustomEarningTypeRequest } from '../models';
// @ts-ignore
import { EarningTypesGetAllResponse } from '../models';
// @ts-ignore
import { EarningTypesUpdateTypeRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EarningTypesApi - axios parameter creator
 * @export
 */
export const EarningTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: `payrolls:write`
         * @summary Create a custom earning type
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EarningTypesCreateCustomEarningTypeRequest} [earningTypesCreateCustomEarningTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomEarningType: async (companyId: string, xGustoApiVersion?: '2024-03-01', earningTypesCreateCustomEarningTypeRequest?: EarningTypesCreateCustomEarningTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCustomEarningType', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/earning_types`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: earningTypesCreateCustomEarningTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/earning_types',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(earningTypesCreateCustomEarningTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivate an earning type.  scope: `payrolls:write`
         * @summary Deactivate an earning type
         * @param {string} companyId The UUID of the company
         * @param {string} earningTypeUuid The UUID of the earning type
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateType: async (companyId: string, earningTypeUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deactivateType', 'companyId', companyId)
            // verify required parameter 'earningTypeUuid' is not null or undefined
            assertParamExists('deactivateType', 'earningTypeUuid', earningTypeUuid)
            const localVarPath = `/v1/companies/{company_id}/earning_types/{earning_type_uuid}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"earning_type_uuid"}}`, encodeURIComponent(String(earningTypeUuid !== undefined ? earningTypeUuid : `-earning_type_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/earning_types/{earning_type_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: `payrolls:read`
         * @summary Get all earning types for a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAll', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/earning_types`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/earning_types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an earning type.  scope: `payrolls:write`
         * @summary Update an earning type
         * @param {string} companyId The UUID of the company
         * @param {string} earningTypeUuid The UUID of the earning type
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EarningTypesUpdateTypeRequest} [earningTypesUpdateTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType: async (companyId: string, earningTypeUuid: string, xGustoApiVersion?: '2024-03-01', earningTypesUpdateTypeRequest?: EarningTypesUpdateTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateType', 'companyId', companyId)
            // verify required parameter 'earningTypeUuid' is not null or undefined
            assertParamExists('updateType', 'earningTypeUuid', earningTypeUuid)
            const localVarPath = `/v1/companies/{company_id}/earning_types/{earning_type_uuid}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"earning_type_uuid"}}`, encodeURIComponent(String(earningTypeUuid !== undefined ? earningTypeUuid : `-earning_type_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: earningTypesUpdateTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/earning_types/{earning_type_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(earningTypesUpdateTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EarningTypesApi - functional programming interface
 * @export
 */
export const EarningTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EarningTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: `payrolls:write`
         * @summary Create a custom earning type
         * @param {EarningTypesApiCreateCustomEarningTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomEarningType(requestParameters: EarningTypesApiCreateCustomEarningTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningType>> {
            const earningTypesCreateCustomEarningTypeRequest: EarningTypesCreateCustomEarningTypeRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomEarningType(requestParameters.companyId, requestParameters.xGustoApiVersion, earningTypesCreateCustomEarningTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deactivate an earning type.  scope: `payrolls:write`
         * @summary Deactivate an earning type
         * @param {EarningTypesApiDeactivateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateType(requestParameters: EarningTypesApiDeactivateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateType(requestParameters.companyId, requestParameters.earningTypeUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: `payrolls:read`
         * @summary Get all earning types for a company
         * @param {EarningTypesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: EarningTypesApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningTypesGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an earning type.  scope: `payrolls:write`
         * @summary Update an earning type
         * @param {EarningTypesApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateType(requestParameters: EarningTypesApiUpdateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningType>> {
            const earningTypesUpdateTypeRequest: EarningTypesUpdateTypeRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateType(requestParameters.companyId, requestParameters.earningTypeUuid, requestParameters.xGustoApiVersion, earningTypesUpdateTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EarningTypesApi - factory interface
 * @export
 */
export const EarningTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EarningTypesApiFp(configuration)
    return {
        /**
         * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: `payrolls:write`
         * @summary Create a custom earning type
         * @param {EarningTypesApiCreateCustomEarningTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomEarningType(requestParameters: EarningTypesApiCreateCustomEarningTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EarningType> {
            return localVarFp.createCustomEarningType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deactivate an earning type.  scope: `payrolls:write`
         * @summary Deactivate an earning type
         * @param {EarningTypesApiDeactivateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateType(requestParameters: EarningTypesApiDeactivateTypeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deactivateType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: `payrolls:read`
         * @summary Get all earning types for a company
         * @param {EarningTypesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: EarningTypesApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<EarningTypesGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an earning type.  scope: `payrolls:write`
         * @summary Update an earning type
         * @param {EarningTypesApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType(requestParameters: EarningTypesApiUpdateTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EarningType> {
            return localVarFp.updateType(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCustomEarningType operation in EarningTypesApi.
 * @export
 * @interface EarningTypesApiCreateCustomEarningTypeRequest
 */
export type EarningTypesApiCreateCustomEarningTypeRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EarningTypesApiCreateCustomEarningType
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EarningTypesApiCreateCustomEarningType
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EarningTypesCreateCustomEarningTypeRequest

/**
 * Request parameters for deactivateType operation in EarningTypesApi.
 * @export
 * @interface EarningTypesApiDeactivateTypeRequest
 */
export type EarningTypesApiDeactivateTypeRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EarningTypesApiDeactivateType
    */
    readonly companyId: string
    
    /**
    * The UUID of the earning type
    * @type {string}
    * @memberof EarningTypesApiDeactivateType
    */
    readonly earningTypeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EarningTypesApiDeactivateType
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getAll operation in EarningTypesApi.
 * @export
 * @interface EarningTypesApiGetAllRequest
 */
export type EarningTypesApiGetAllRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EarningTypesApiGetAll
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EarningTypesApiGetAll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateType operation in EarningTypesApi.
 * @export
 * @interface EarningTypesApiUpdateTypeRequest
 */
export type EarningTypesApiUpdateTypeRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof EarningTypesApiUpdateType
    */
    readonly companyId: string
    
    /**
    * The UUID of the earning type
    * @type {string}
    * @memberof EarningTypesApiUpdateType
    */
    readonly earningTypeUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EarningTypesApiUpdateType
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EarningTypesUpdateTypeRequest

/**
 * EarningTypesApiGenerated - object-oriented interface
 * @export
 * @class EarningTypesApiGenerated
 * @extends {BaseAPI}
 */
export class EarningTypesApiGenerated extends BaseAPI {
    /**
     * Create a custom earning type.  If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.  scope: `payrolls:write`
     * @summary Create a custom earning type
     * @param {EarningTypesApiCreateCustomEarningTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningTypesApiGenerated
     */
    public createCustomEarningType(requestParameters: EarningTypesApiCreateCustomEarningTypeRequest, options?: AxiosRequestConfig) {
        return EarningTypesApiFp(this.configuration).createCustomEarningType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deactivate an earning type.  scope: `payrolls:write`
     * @summary Deactivate an earning type
     * @param {EarningTypesApiDeactivateTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningTypesApiGenerated
     */
    public deactivateType(requestParameters: EarningTypesApiDeactivateTypeRequest, options?: AxiosRequestConfig) {
        return EarningTypesApiFp(this.configuration).deactivateType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.  #### Default Earning Type Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)  #### Custom Earning Type Custom earning types are all the other earning types added specifically for a company.  scope: `payrolls:read`
     * @summary Get all earning types for a company
     * @param {EarningTypesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningTypesApiGenerated
     */
    public getAll(requestParameters: EarningTypesApiGetAllRequest, options?: AxiosRequestConfig) {
        return EarningTypesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an earning type.  scope: `payrolls:write`
     * @summary Update an earning type
     * @param {EarningTypesApiUpdateTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningTypesApiGenerated
     */
    public updateType(requestParameters: EarningTypesApiUpdateTypeRequest, options?: AxiosRequestConfig) {
        return EarningTypesApiFp(this.configuration).updateType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
