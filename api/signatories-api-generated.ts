/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SignatoriesCreateInviteRequest } from '../models';
// @ts-ignore
import { SignatoriesCreateSignatoryWithCompleteInformationRequest } from '../models';
// @ts-ignore
import { SignatoriesCreateSignatoryWithCompleteInformationRequestHomeAddress } from '../models';
// @ts-ignore
import { SignatoriesUpdateRequest } from '../models';
// @ts-ignore
import { SignatoriesUpdateRequestHomeAddress } from '../models';
// @ts-ignore
import { Signatory } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SignatoriesApi - axios parameter creator
 * @export
 */
export const SignatoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a signatory with minimal information. This signatory can be invited to provide more information through the `PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
         * @summary Invite a signatory
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {SignatoriesCreateInviteRequest} [signatoriesCreateInviteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvite: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', signatoriesCreateInviteRequest?: SignatoriesCreateInviteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createInvite', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/signatories/invite`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: signatoriesCreateInviteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/signatories/invite',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(signatoriesCreateInviteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: `signatories:manage`
         * @summary Create a signatory
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {SignatoriesCreateSignatoryWithCompleteInformationRequest} [signatoriesCreateSignatoryWithCompleteInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSignatoryWithCompleteInformation: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', signatoriesCreateSignatoryWithCompleteInformationRequest?: SignatoriesCreateSignatoryWithCompleteInformationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createSignatoryWithCompleteInformation', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/signatories`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: signatoriesCreateSignatoryWithCompleteInformationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/signatories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(signatoriesCreateSignatoryWithCompleteInformationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a company signatory.  scope: `signatories:manage`
         * @summary Delete a signatory
         * @param {string} companyUuid The UUID of the company
         * @param {string} signatoryUuid The UUID of the signatory
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignatory: async (companyUuid: string, signatoryUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('deleteSignatory', 'companyUuid', companyUuid)
            // verify required parameter 'signatoryUuid' is not null or undefined
            assertParamExists('deleteSignatory', 'signatoryUuid', signatoryUuid)
            const localVarPath = `/v1/companies/{company_uuid}/signatories/{signatory_uuid}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"signatory_uuid"}}`, encodeURIComponent(String(signatoryUuid !== undefined ? signatoryUuid : `-signatory_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/signatories/{signatory_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns company signatories. Currently we only support a single signatory per company.  scope: `signatories:read`
         * @summary Get all company signatories
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanySignatories: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getCompanySignatories', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/signatories`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/signatories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: `signatories:write`
         * @summary Update a signatory
         * @param {string} companyUuid The UUID of the company
         * @param {string} signatoryUuid The UUID of the signatory
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {SignatoriesUpdateRequest} [signatoriesUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (companyUuid: string, signatoryUuid: string, xGustoApiVersion?: '2024-03-01', signatoriesUpdateRequest?: SignatoriesUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('update', 'companyUuid', companyUuid)
            // verify required parameter 'signatoryUuid' is not null or undefined
            assertParamExists('update', 'signatoryUuid', signatoryUuid)
            const localVarPath = `/v1/companies/{company_uuid}/signatories/{signatory_uuid}`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)))
                .replace(`{${"signatory_uuid"}}`, encodeURIComponent(String(signatoryUuid !== undefined ? signatoryUuid : `-signatory_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: signatoriesUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/signatories/{signatory_uuid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(signatoriesUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignatoriesApi - functional programming interface
 * @export
 */
export const SignatoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignatoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a signatory with minimal information. This signatory can be invited to provide more information through the `PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
         * @summary Invite a signatory
         * @param {SignatoriesApiCreateInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvite(requestParameters: SignatoriesApiCreateInviteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signatory>> {
            const signatoriesCreateInviteRequest: SignatoriesCreateInviteRequest = {
                title: requestParameters.title,
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvite(requestParameters.companyUuid, requestParameters.xGustoApiVersion, signatoriesCreateInviteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: `signatories:manage`
         * @summary Create a signatory
         * @param {SignatoriesApiCreateSignatoryWithCompleteInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSignatoryWithCompleteInformation(requestParameters: SignatoriesApiCreateSignatoryWithCompleteInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signatory>> {
            const signatoriesCreateSignatoryWithCompleteInformationRequest: SignatoriesCreateSignatoryWithCompleteInformationRequest = {
                title: requestParameters.title,
                ssn: requestParameters.ssn,
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                email: requestParameters.email,
                phone: requestParameters.phone,
                birthday: requestParameters.birthday,
                home_address: requestParameters.home_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSignatoryWithCompleteInformation(requestParameters.companyUuid, requestParameters.xGustoApiVersion, signatoriesCreateSignatoryWithCompleteInformationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a company signatory.  scope: `signatories:manage`
         * @summary Delete a signatory
         * @param {SignatoriesApiDeleteSignatoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSignatory(requestParameters: SignatoriesApiDeleteSignatoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSignatory(requestParameters.companyUuid, requestParameters.signatoryUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns company signatories. Currently we only support a single signatory per company.  scope: `signatories:read`
         * @summary Get all company signatories
         * @param {SignatoriesApiGetCompanySignatoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanySignatories(requestParameters: SignatoriesApiGetCompanySignatoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Signatory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanySignatories(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: `signatories:write`
         * @summary Update a signatory
         * @param {SignatoriesApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: SignatoriesApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signatory>> {
            const signatoriesUpdateRequest: SignatoriesUpdateRequest = {
                title: requestParameters.title,
                version: requestParameters.version,
                first_name: requestParameters.first_name,
                middle_initial: requestParameters.middle_initial,
                last_name: requestParameters.last_name,
                phone: requestParameters.phone,
                birthday: requestParameters.birthday,
                ssn: requestParameters.ssn,
                home_address: requestParameters.home_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.companyUuid, requestParameters.signatoryUuid, requestParameters.xGustoApiVersion, signatoriesUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignatoriesApi - factory interface
 * @export
 */
export const SignatoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignatoriesApiFp(configuration)
    return {
        /**
         * Create a signatory with minimal information. This signatory can be invited to provide more information through the `PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
         * @summary Invite a signatory
         * @param {SignatoriesApiCreateInviteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvite(requestParameters: SignatoriesApiCreateInviteRequest, options?: AxiosRequestConfig): AxiosPromise<Signatory> {
            return localVarFp.createInvite(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: `signatories:manage`
         * @summary Create a signatory
         * @param {SignatoriesApiCreateSignatoryWithCompleteInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSignatoryWithCompleteInformation(requestParameters: SignatoriesApiCreateSignatoryWithCompleteInformationRequest, options?: AxiosRequestConfig): AxiosPromise<Signatory> {
            return localVarFp.createSignatoryWithCompleteInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a company signatory.  scope: `signatories:manage`
         * @summary Delete a signatory
         * @param {SignatoriesApiDeleteSignatoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSignatory(requestParameters: SignatoriesApiDeleteSignatoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSignatory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns company signatories. Currently we only support a single signatory per company.  scope: `signatories:read`
         * @summary Get all company signatories
         * @param {SignatoriesApiGetCompanySignatoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanySignatories(requestParameters: SignatoriesApiGetCompanySignatoriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Signatory>> {
            return localVarFp.getCompanySignatories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: `signatories:write`
         * @summary Update a signatory
         * @param {SignatoriesApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: SignatoriesApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<Signatory> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createInvite operation in SignatoriesApi.
 * @export
 * @interface SignatoriesApiCreateInviteRequest
 */
export type SignatoriesApiCreateInviteRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof SignatoriesApiCreateInvite
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof SignatoriesApiCreateInvite
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & SignatoriesCreateInviteRequest

/**
 * Request parameters for createSignatoryWithCompleteInformation operation in SignatoriesApi.
 * @export
 * @interface SignatoriesApiCreateSignatoryWithCompleteInformationRequest
 */
export type SignatoriesApiCreateSignatoryWithCompleteInformationRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof SignatoriesApiCreateSignatoryWithCompleteInformation
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof SignatoriesApiCreateSignatoryWithCompleteInformation
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & SignatoriesCreateSignatoryWithCompleteInformationRequest

/**
 * Request parameters for deleteSignatory operation in SignatoriesApi.
 * @export
 * @interface SignatoriesApiDeleteSignatoryRequest
 */
export type SignatoriesApiDeleteSignatoryRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof SignatoriesApiDeleteSignatory
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the signatory
    * @type {string}
    * @memberof SignatoriesApiDeleteSignatory
    */
    readonly signatoryUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof SignatoriesApiDeleteSignatory
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanySignatories operation in SignatoriesApi.
 * @export
 * @interface SignatoriesApiGetCompanySignatoriesRequest
 */
export type SignatoriesApiGetCompanySignatoriesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof SignatoriesApiGetCompanySignatories
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof SignatoriesApiGetCompanySignatories
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for update operation in SignatoriesApi.
 * @export
 * @interface SignatoriesApiUpdateRequest
 */
export type SignatoriesApiUpdateRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof SignatoriesApiUpdate
    */
    readonly companyUuid: string
    
    /**
    * The UUID of the signatory
    * @type {string}
    * @memberof SignatoriesApiUpdate
    */
    readonly signatoryUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof SignatoriesApiUpdate
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & SignatoriesUpdateRequest

/**
 * SignatoriesApiGenerated - object-oriented interface
 * @export
 * @class SignatoriesApiGenerated
 * @extends {BaseAPI}
 */
export class SignatoriesApiGenerated extends BaseAPI {
    /**
     * Create a signatory with minimal information. This signatory can be invited to provide more information through the `PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
     * @summary Invite a signatory
     * @param {SignatoriesApiCreateInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatoriesApiGenerated
     */
    public createInvite(requestParameters: SignatoriesApiCreateInviteRequest, options?: AxiosRequestConfig) {
        return SignatoriesApiFp(this.configuration).createInvite(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a company signatory with complete information. A signatory can legally sign forms once the identity verification process is successful.  scope: `signatories:manage`
     * @summary Create a signatory
     * @param {SignatoriesApiCreateSignatoryWithCompleteInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatoriesApiGenerated
     */
    public createSignatoryWithCompleteInformation(requestParameters: SignatoriesApiCreateSignatoryWithCompleteInformationRequest, options?: AxiosRequestConfig) {
        return SignatoriesApiFp(this.configuration).createSignatoryWithCompleteInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a company signatory.  scope: `signatories:manage`
     * @summary Delete a signatory
     * @param {SignatoriesApiDeleteSignatoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatoriesApiGenerated
     */
    public deleteSignatory(requestParameters: SignatoriesApiDeleteSignatoryRequest, options?: AxiosRequestConfig) {
        return SignatoriesApiFp(this.configuration).deleteSignatory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns company signatories. Currently we only support a single signatory per company.  scope: `signatories:read`
     * @summary Get all company signatories
     * @param {SignatoriesApiGetCompanySignatoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatoriesApiGenerated
     */
    public getCompanySignatories(requestParameters: SignatoriesApiGetCompanySignatoriesRequest, options?: AxiosRequestConfig) {
        return SignatoriesApiFp(this.configuration).getCompanySignatories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.  scope: `signatories:write`
     * @summary Update a signatory
     * @param {SignatoriesApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignatoriesApiGenerated
     */
    public update(requestParameters: SignatoriesApiUpdateRequest, options?: AxiosRequestConfig) {
        return SignatoriesApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
