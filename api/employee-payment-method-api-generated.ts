/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeBankAccount } from '../models';
// @ts-ignore
import { EmployeePaymentMethod } from '../models';
// @ts-ignore
import { EmployeePaymentMethodCreateBankAccountRequest } from '../models';
// @ts-ignore
import { EmployeePaymentMethodUpdatePaymentMethodRequest } from '../models';
// @ts-ignore
import { EmployeePaymentMethodUpdatePaymentMethodRequestSplitsInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeePaymentMethodApi - axios parameter creator
 * @export
 */
export const EmployeePaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an employee bank account. An employee can have multiple bank accounts. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Create an employee bank account
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeePaymentMethodCreateBankAccountRequest} [employeePaymentMethodCreateBankAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeePaymentMethodCreateBankAccountRequest?: EmployeePaymentMethodCreateBankAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createBankAccount', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/bank_accounts`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePaymentMethodCreateBankAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/bank_accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePaymentMethodCreateBankAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an employee bank account. To update an employee\'s bank account details, delete the bank account first and create a new one.  scope: `employee_payment_methods:write`
         * @summary Delete an employee bank account
         * @param {string} employeeId The UUID of the employee
         * @param {string} bankAccountUuid The UUID of the bank account
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount: async (employeeId: string, bankAccountUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteBankAccount', 'employeeId', employeeId)
            // verify required parameter 'bankAccountUuid' is not null or undefined
            assertParamExists('deleteBankAccount', 'bankAccountUuid', bankAccountUuid)
            const localVarPath = `/v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"bank_account_uuid"}}`, encodeURIComponent(String(bankAccountUuid !== undefined ? bankAccountUuid : `-bank_account_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches an employee\'s payment method. An employee payment method describes how the payment should be split across the employee\'s associated bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get an employee\'s payment method
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getBankAccounts', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/payment_method`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/payment_method',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all employee bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get all employee bank accounts
         * @param {string} employeeId The UUID of the employee
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts: async (employeeId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listBankAccounts', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/bank_accounts`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/bank_accounts',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an employee\'s payment method. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Update an employee\'s payment method
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeePaymentMethodUpdatePaymentMethodRequest} [employeePaymentMethodUpdatePaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentMethod: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeePaymentMethodUpdatePaymentMethodRequest?: EmployeePaymentMethodUpdatePaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updatePaymentMethod', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/payment_method`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePaymentMethodUpdatePaymentMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/payment_method',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePaymentMethodUpdatePaymentMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeePaymentMethodApi - functional programming interface
 * @export
 */
export const EmployeePaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeePaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an employee bank account. An employee can have multiple bank accounts. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Create an employee bank account
         * @param {EmployeePaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBankAccount(requestParameters: EmployeePaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeBankAccount>> {
            const employeePaymentMethodCreateBankAccountRequest: EmployeePaymentMethodCreateBankAccountRequest = {
                name: requestParameters.name,
                routing_number: requestParameters.routing_number,
                account_number: requestParameters.account_number,
                account_type: requestParameters.account_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBankAccount(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeePaymentMethodCreateBankAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an employee bank account. To update an employee\'s bank account details, delete the bank account first and create a new one.  scope: `employee_payment_methods:write`
         * @summary Delete an employee bank account
         * @param {EmployeePaymentMethodApiDeleteBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankAccount(requestParameters: EmployeePaymentMethodApiDeleteBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankAccount(requestParameters.employeeId, requestParameters.bankAccountUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches an employee\'s payment method. An employee payment method describes how the payment should be split across the employee\'s associated bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get an employee\'s payment method
         * @param {EmployeePaymentMethodApiGetBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccounts(requestParameters: EmployeePaymentMethodApiGetBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeePaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccounts(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all employee bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get all employee bank accounts
         * @param {EmployeePaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBankAccounts(requestParameters: EmployeePaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeBankAccount>>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBankAccounts(requestParameters.employeeId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an employee\'s payment method. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Update an employee\'s payment method
         * @param {EmployeePaymentMethodApiUpdatePaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentMethod(requestParameters: EmployeePaymentMethodApiUpdatePaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeePaymentMethod>> {
            const employeePaymentMethodUpdatePaymentMethodRequest: EmployeePaymentMethodUpdatePaymentMethodRequest = {
                version: requestParameters.version,
                type: requestParameters.type,
                split_by: requestParameters.split_by,
                splits: requestParameters.splits
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentMethod(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeePaymentMethodUpdatePaymentMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeePaymentMethodApi - factory interface
 * @export
 */
export const EmployeePaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeePaymentMethodApiFp(configuration)
    return {
        /**
         * Creates an employee bank account. An employee can have multiple bank accounts. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Create an employee bank account
         * @param {EmployeePaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBankAccount(requestParameters: EmployeePaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeBankAccount> {
            return localVarFp.createBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an employee bank account. To update an employee\'s bank account details, delete the bank account first and create a new one.  scope: `employee_payment_methods:write`
         * @summary Delete an employee bank account
         * @param {EmployeePaymentMethodApiDeleteBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccount(requestParameters: EmployeePaymentMethodApiDeleteBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches an employee\'s payment method. An employee payment method describes how the payment should be split across the employee\'s associated bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get an employee\'s payment method
         * @param {EmployeePaymentMethodApiGetBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts(requestParameters: EmployeePaymentMethodApiGetBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeePaymentMethod> {
            return localVarFp.getBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all employee bank accounts.  scope: `employee_payment_methods:read`
         * @summary Get all employee bank accounts
         * @param {EmployeePaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBankAccounts(requestParameters: EmployeePaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeBankAccount>> {
            return localVarFp.listBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an employee\'s payment method. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
         * @summary Update an employee\'s payment method
         * @param {EmployeePaymentMethodApiUpdatePaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentMethod(requestParameters: EmployeePaymentMethodApiUpdatePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeePaymentMethod> {
            return localVarFp.updatePaymentMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBankAccount operation in EmployeePaymentMethodApi.
 * @export
 * @interface EmployeePaymentMethodApiCreateBankAccountRequest
 */
export type EmployeePaymentMethodApiCreateBankAccountRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeePaymentMethodApiCreateBankAccount
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeePaymentMethodApiCreateBankAccount
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeePaymentMethodCreateBankAccountRequest

/**
 * Request parameters for deleteBankAccount operation in EmployeePaymentMethodApi.
 * @export
 * @interface EmployeePaymentMethodApiDeleteBankAccountRequest
 */
export type EmployeePaymentMethodApiDeleteBankAccountRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeePaymentMethodApiDeleteBankAccount
    */
    readonly employeeId: string
    
    /**
    * The UUID of the bank account
    * @type {string}
    * @memberof EmployeePaymentMethodApiDeleteBankAccount
    */
    readonly bankAccountUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeePaymentMethodApiDeleteBankAccount
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getBankAccounts operation in EmployeePaymentMethodApi.
 * @export
 * @interface EmployeePaymentMethodApiGetBankAccountsRequest
 */
export type EmployeePaymentMethodApiGetBankAccountsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeePaymentMethodApiGetBankAccounts
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeePaymentMethodApiGetBankAccounts
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listBankAccounts operation in EmployeePaymentMethodApi.
 * @export
 * @interface EmployeePaymentMethodApiListBankAccountsRequest
 */
export type EmployeePaymentMethodApiListBankAccountsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeePaymentMethodApiListBankAccounts
    */
    readonly employeeId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof EmployeePaymentMethodApiListBankAccounts
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof EmployeePaymentMethodApiListBankAccounts
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeePaymentMethodApiListBankAccounts
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & object

/**
 * Request parameters for updatePaymentMethod operation in EmployeePaymentMethodApi.
 * @export
 * @interface EmployeePaymentMethodApiUpdatePaymentMethodRequest
 */
export type EmployeePaymentMethodApiUpdatePaymentMethodRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeePaymentMethodApiUpdatePaymentMethod
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeePaymentMethodApiUpdatePaymentMethod
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeePaymentMethodUpdatePaymentMethodRequest

/**
 * EmployeePaymentMethodApiGenerated - object-oriented interface
 * @export
 * @class EmployeePaymentMethodApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeePaymentMethodApiGenerated extends BaseAPI {
    /**
     * Creates an employee bank account. An employee can have multiple bank accounts. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
     * @summary Create an employee bank account
     * @param {EmployeePaymentMethodApiCreateBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePaymentMethodApiGenerated
     */
    public createBankAccount(requestParameters: EmployeePaymentMethodApiCreateBankAccountRequest, options?: AxiosRequestConfig) {
        return EmployeePaymentMethodApiFp(this.configuration).createBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an employee bank account. To update an employee\'s bank account details, delete the bank account first and create a new one.  scope: `employee_payment_methods:write`
     * @summary Delete an employee bank account
     * @param {EmployeePaymentMethodApiDeleteBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePaymentMethodApiGenerated
     */
    public deleteBankAccount(requestParameters: EmployeePaymentMethodApiDeleteBankAccountRequest, options?: AxiosRequestConfig) {
        return EmployeePaymentMethodApiFp(this.configuration).deleteBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches an employee\'s payment method. An employee payment method describes how the payment should be split across the employee\'s associated bank accounts.  scope: `employee_payment_methods:read`
     * @summary Get an employee\'s payment method
     * @param {EmployeePaymentMethodApiGetBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePaymentMethodApiGenerated
     */
    public getBankAccounts(requestParameters: EmployeePaymentMethodApiGetBankAccountsRequest, options?: AxiosRequestConfig) {
        return EmployeePaymentMethodApiFp(this.configuration).getBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all employee bank accounts.  scope: `employee_payment_methods:read`
     * @summary Get all employee bank accounts
     * @param {EmployeePaymentMethodApiListBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePaymentMethodApiGenerated
     */
    public listBankAccounts(requestParameters: EmployeePaymentMethodApiListBankAccountsRequest, options?: AxiosRequestConfig) {
        return EmployeePaymentMethodApiFp(this.configuration).listBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an employee\'s payment method. Note that creating an employee bank account will also update the employee\'s payment method.  scope: `employee_payment_methods:write`
     * @summary Update an employee\'s payment method
     * @param {EmployeePaymentMethodApiUpdatePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePaymentMethodApiGenerated
     */
    public updatePaymentMethod(requestParameters: EmployeePaymentMethodApiUpdatePaymentMethodRequest, options?: AxiosRequestConfig) {
        return EmployeePaymentMethodApiFp(this.configuration).updatePaymentMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
