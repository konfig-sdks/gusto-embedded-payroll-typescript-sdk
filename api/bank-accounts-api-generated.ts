/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BankAccountsCreateFromPlaidTokenRequest } from '../models';
// @ts-ignore
import { BankAccountsCreateFromPlaidTokenResponse } from '../models';
// @ts-ignore
import { BankAccountsCreateVerificationDepositsRequest } from '../models';
// @ts-ignore
import { BankAccountsVerifyMicroDepositsRequest } from '../models';
// @ts-ignore
import { CompanyBankAccount } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BankAccountsApi - axios parameter creator
 * @export
 */
export const BankAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: `plaid_processor:write`  > ðŸ“˜ > To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \"gusto\" as processor.  > ðŸš§ Warning - Company Bank Accounts > > If a default company bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a bank account from a plaid processor token
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {BankAccountsCreateFromPlaidTokenRequest} [bankAccountsCreateFromPlaidTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromPlaidToken: async (xGustoApiVersion?: '2024-03-01', bankAccountsCreateFromPlaidTokenRequest?: BankAccountsCreateFromPlaidTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/plaid/processor_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bankAccountsCreateFromPlaidTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/plaid/processor_token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountsCreateFromPlaidTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account\'s verification_status is \'awaiting_deposits\'.   When the deposits are successfully transferred, the verification_status changes to \'ready_for_verification\', at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account\'s verification_status is \'verified\'.  scope: `company_bank_accounts:write`  > ðŸš§ Warning > > If a default bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a company bank account
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {BankAccountsCreateVerificationDepositsRequest} [bankAccountsCreateVerificationDepositsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVerificationDeposits: async (companyId: string, xGustoApiVersion?: '2024-03-01', bankAccountsCreateVerificationDepositsRequest?: BankAccountsCreateVerificationDepositsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createVerificationDeposits', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/bank_accounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bankAccountsCreateVerificationDepositsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/bank_accounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountsCreateVerificationDepositsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: `company_bank_accounts:read`
         * @summary Get all company bank accounts
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBankAccounts: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listCompanyBankAccounts', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/bank_accounts`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/bank_accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There\'s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint `POST \'/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits\'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  ```   POST \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits\'    {     \"deposit_1\": 0.02,     \"deposit_2\": 0.42   } ```  scope: `company_bank_accounts:write`
         * @summary Verify a company bank account
         * @param {string} bankAccountUuid The UUID of the bank account
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {BankAccountsVerifyMicroDepositsRequest} [bankAccountsVerifyMicroDepositsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroDeposits: async (bankAccountUuid: string, companyId: string, xGustoApiVersion?: '2024-03-01', bankAccountsVerifyMicroDepositsRequest?: BankAccountsVerifyMicroDepositsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankAccountUuid' is not null or undefined
            assertParamExists('verifyMicroDeposits', 'bankAccountUuid', bankAccountUuid)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('verifyMicroDeposits', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/verify`
                .replace(`{${"bank_account_uuid"}}`, encodeURIComponent(String(bankAccountUuid !== undefined ? bankAccountUuid : `-bank_account_uuid-`)))
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bankAccountsVerifyMicroDepositsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/verify',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountsVerifyMicroDepositsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountsApi - functional programming interface
 * @export
 */
export const BankAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: `plaid_processor:write`  > ðŸ“˜ > To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \"gusto\" as processor.  > ðŸš§ Warning - Company Bank Accounts > > If a default company bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a bank account from a plaid processor token
         * @param {BankAccountsApiCreateFromPlaidTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromPlaidToken(requestParameters: BankAccountsApiCreateFromPlaidTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankAccountsCreateFromPlaidTokenResponse>> {
            const bankAccountsCreateFromPlaidTokenRequest: BankAccountsCreateFromPlaidTokenRequest = {
                owner_type: requestParameters.owner_type,
                owner_id: requestParameters.owner_id,
                processor_token: requestParameters.processor_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFromPlaidToken(requestParameters.xGustoApiVersion, bankAccountsCreateFromPlaidTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account\'s verification_status is \'awaiting_deposits\'.   When the deposits are successfully transferred, the verification_status changes to \'ready_for_verification\', at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account\'s verification_status is \'verified\'.  scope: `company_bank_accounts:write`  > ðŸš§ Warning > > If a default bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a company bank account
         * @param {BankAccountsApiCreateVerificationDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVerificationDeposits(requestParameters: BankAccountsApiCreateVerificationDepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBankAccount>> {
            const bankAccountsCreateVerificationDepositsRequest: BankAccountsCreateVerificationDepositsRequest = {
                routing_number: requestParameters.routing_number,
                account_number: requestParameters.account_number,
                account_type: requestParameters.account_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVerificationDeposits(requestParameters.companyId, requestParameters.xGustoApiVersion, bankAccountsCreateVerificationDepositsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: `company_bank_accounts:read`
         * @summary Get all company bank accounts
         * @param {BankAccountsApiListCompanyBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyBankAccounts(requestParameters: BankAccountsApiListCompanyBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyBankAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyBankAccounts(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There\'s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint `POST \'/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits\'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  ```   POST \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits\'    {     \"deposit_1\": 0.02,     \"deposit_2\": 0.42   } ```  scope: `company_bank_accounts:write`
         * @summary Verify a company bank account
         * @param {BankAccountsApiVerifyMicroDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMicroDeposits(requestParameters: BankAccountsApiVerifyMicroDepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBankAccount>> {
            const bankAccountsVerifyMicroDepositsRequest: BankAccountsVerifyMicroDepositsRequest = {
                deposit_1: requestParameters.deposit_1,
                deposit_2: requestParameters.deposit_2
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMicroDeposits(requestParameters.bankAccountUuid, requestParameters.companyId, requestParameters.xGustoApiVersion, bankAccountsVerifyMicroDepositsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountsApi - factory interface
 * @export
 */
export const BankAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountsApiFp(configuration)
    return {
        /**
         * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: `plaid_processor:write`  > ðŸ“˜ > To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \"gusto\" as processor.  > ðŸš§ Warning - Company Bank Accounts > > If a default company bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a bank account from a plaid processor token
         * @param {BankAccountsApiCreateFromPlaidTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromPlaidToken(requestParameters: BankAccountsApiCreateFromPlaidTokenRequest, options?: AxiosRequestConfig): AxiosPromise<BankAccountsCreateFromPlaidTokenResponse> {
            return localVarFp.createFromPlaidToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account\'s verification_status is \'awaiting_deposits\'.   When the deposits are successfully transferred, the verification_status changes to \'ready_for_verification\', at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account\'s verification_status is \'verified\'.  scope: `company_bank_accounts:write`  > ðŸš§ Warning > > If a default bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
         * @summary Create a company bank account
         * @param {BankAccountsApiCreateVerificationDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVerificationDeposits(requestParameters: BankAccountsApiCreateVerificationDepositsRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBankAccount> {
            return localVarFp.createVerificationDeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: `company_bank_accounts:read`
         * @summary Get all company bank accounts
         * @param {BankAccountsApiListCompanyBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBankAccounts(requestParameters: BankAccountsApiListCompanyBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyBankAccount>> {
            return localVarFp.listCompanyBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There\'s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint `POST \'/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits\'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  ```   POST \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits\'    {     \"deposit_1\": 0.02,     \"deposit_2\": 0.42   } ```  scope: `company_bank_accounts:write`
         * @summary Verify a company bank account
         * @param {BankAccountsApiVerifyMicroDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroDeposits(requestParameters: BankAccountsApiVerifyMicroDepositsRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBankAccount> {
            return localVarFp.verifyMicroDeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFromPlaidToken operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiCreateFromPlaidTokenRequest
 */
export type BankAccountsApiCreateFromPlaidTokenRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof BankAccountsApiCreateFromPlaidToken
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & BankAccountsCreateFromPlaidTokenRequest

/**
 * Request parameters for createVerificationDeposits operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiCreateVerificationDepositsRequest
 */
export type BankAccountsApiCreateVerificationDepositsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof BankAccountsApiCreateVerificationDeposits
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof BankAccountsApiCreateVerificationDeposits
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & BankAccountsCreateVerificationDepositsRequest

/**
 * Request parameters for listCompanyBankAccounts operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiListCompanyBankAccountsRequest
 */
export type BankAccountsApiListCompanyBankAccountsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof BankAccountsApiListCompanyBankAccounts
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof BankAccountsApiListCompanyBankAccounts
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for verifyMicroDeposits operation in BankAccountsApi.
 * @export
 * @interface BankAccountsApiVerifyMicroDepositsRequest
 */
export type BankAccountsApiVerifyMicroDepositsRequest = {
    
    /**
    * The UUID of the bank account
    * @type {string}
    * @memberof BankAccountsApiVerifyMicroDeposits
    */
    readonly bankAccountUuid: string
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof BankAccountsApiVerifyMicroDeposits
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof BankAccountsApiVerifyMicroDeposits
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & BankAccountsVerifyMicroDepositsRequest

/**
 * BankAccountsApiGenerated - object-oriented interface
 * @export
 * @class BankAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class BankAccountsApiGenerated extends BaseAPI {
    /**
     * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.  scope: `plaid_processor:write`  > ðŸ“˜ > To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select \"gusto\" as processor.  > ðŸš§ Warning - Company Bank Accounts > > If a default company bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
     * @summary Create a bank account from a plaid processor token
     * @param {BankAccountsApiCreateFromPlaidTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiGenerated
     */
    public createFromPlaidToken(requestParameters: BankAccountsApiCreateFromPlaidTokenRequest, options?: AxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).createFromPlaidToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates a new company bank account.  Upon being created, two verification deposits are automatically sent to the bank account, and the bank account\'s verification_status is \'awaiting_deposits\'.   When the deposits are successfully transferred, the verification_status changes to \'ready_for_verification\', at which point the verify endpoint can be used to verify the bank account. After successful verification, the bank account\'s verification_status is \'verified\'.  scope: `company_bank_accounts:write`  > ðŸš§ Warning > > If a default bank account exists, it will be disabled and the new bank account will replace it as the company\'s default funding method.
     * @summary Create a company bank account
     * @param {BankAccountsApiCreateVerificationDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiGenerated
     */
    public createVerificationDeposits(requestParameters: BankAccountsApiCreateVerificationDepositsRequest, options?: AxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).createVerificationDeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns company bank accounts. Currently, we only support a single default bank account per company.  scope: `company_bank_accounts:read`
     * @summary Get all company bank accounts
     * @param {BankAccountsApiListCompanyBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiGenerated
     */
    public listCompanyBankAccounts(requestParameters: BankAccountsApiListCompanyBankAccountsRequest, options?: AxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).listCompanyBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There\'s a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.  ### Bank account verification in demo  We provide the endpoint `POST \'/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits\'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.  ```   POST \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits\'    {     \"deposit_1\": 0.02,     \"deposit_2\": 0.42   } ```  scope: `company_bank_accounts:write`
     * @summary Verify a company bank account
     * @param {BankAccountsApiVerifyMicroDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountsApiGenerated
     */
    public verifyMicroDeposits(requestParameters: BankAccountsApiVerifyMicroDepositsRequest, options?: AxiosRequestConfig) {
        return BankAccountsApiFp(this.configuration).verifyMicroDeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
