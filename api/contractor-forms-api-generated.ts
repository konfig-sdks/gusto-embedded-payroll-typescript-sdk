/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractorFormsCreate1099FormRequest } from '../models';
// @ts-ignore
import { Form1099 } from '../models';
// @ts-ignore
import { FormPdf } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ContractorFormsApi - axios parameter creator
 * @export
 */
export const ContractorFormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a 1099 document for testing purposes.  scope: `contractors:write`
         * @summary Generate a 1099 form [DEMO]
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {ContractorFormsCreate1099FormRequest} [contractorFormsCreate1099FormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1099Form: async (xGustoApiVersion?: '2024-03-01', contractorFormsCreate1099FormRequest?: ContractorFormsCreate1099FormRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sandbox/generate_1099`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: contractorFormsCreate1099FormRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/generate_1099',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(contractorFormsCreate1099FormRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a contractor form  scope: `contractor_forms:read`
         * @summary Get a contractor form
         * @param {string} contractorUuid The UUID of the contractor
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdForm: async (contractorUuid: string, formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('getByIdForm', 'contractorUuid', contractorUuid)
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getByIdForm', 'formId', formId)
            const localVarPath = `/v1/contractors/{contractor_uuid}/forms/{form_id}`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)))
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/forms/{form_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the link to the form PDF  scope: `contractor_forms:read`
         * @summary Get the contractor form pdf
         * @param {string} contractorUuid The UUID of the contractor
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink: async (contractorUuid: string, formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('getPdfLink', 'contractorUuid', contractorUuid)
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getPdfLink', 'formId', formId)
            const localVarPath = `/v1/contractors/{contractor_uuid}/forms/{form_id}/pdf`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)))
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/forms/{form_id}/pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all contractor\'s forms  scope: `contractor_forms:read`
         * @summary Get all contractor forms
         * @param {string} contractorUuid The UUID of the contractor
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (contractorUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractorUuid' is not null or undefined
            assertParamExists('listAll', 'contractorUuid', contractorUuid)
            const localVarPath = `/v1/contractors/{contractor_uuid}/forms`
                .replace(`{${"contractor_uuid"}}`, encodeURIComponent(String(contractorUuid !== undefined ? contractorUuid : `-contractor_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/contractors/{contractor_uuid}/forms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractorFormsApi - functional programming interface
 * @export
 */
export const ContractorFormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractorFormsApiAxiosParamCreator(configuration)
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a 1099 document for testing purposes.  scope: `contractors:write`
         * @summary Generate a 1099 form [DEMO]
         * @param {ContractorFormsApiCreate1099FormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1099Form(requestParameters: ContractorFormsApiCreate1099FormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form1099>> {
            const contractorFormsCreate1099FormRequest: ContractorFormsCreate1099FormRequest = {
                contractor_id: requestParameters.contractor_id,
                year: requestParameters.year
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1099Form(requestParameters.xGustoApiVersion, contractorFormsCreate1099FormRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a contractor form  scope: `contractor_forms:read`
         * @summary Get a contractor form
         * @param {ContractorFormsApiGetByIdFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdForm(requestParameters: ContractorFormsApiGetByIdFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form1099>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdForm(requestParameters.contractorUuid, requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the link to the form PDF  scope: `contractor_forms:read`
         * @summary Get the contractor form pdf
         * @param {ContractorFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfLink(requestParameters: ContractorFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormPdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfLink(requestParameters.contractorUuid, requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all contractor\'s forms  scope: `contractor_forms:read`
         * @summary Get all contractor forms
         * @param {ContractorFormsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: ContractorFormsApiListAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Form1099>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.contractorUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractorFormsApi - factory interface
 * @export
 */
export const ContractorFormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractorFormsApiFp(configuration)
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a 1099 document for testing purposes.  scope: `contractors:write`
         * @summary Generate a 1099 form [DEMO]
         * @param {ContractorFormsApiCreate1099FormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1099Form(requestParameters: ContractorFormsApiCreate1099FormRequest, options?: AxiosRequestConfig): AxiosPromise<Form1099> {
            return localVarFp.create1099Form(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a contractor form  scope: `contractor_forms:read`
         * @summary Get a contractor form
         * @param {ContractorFormsApiGetByIdFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdForm(requestParameters: ContractorFormsApiGetByIdFormRequest, options?: AxiosRequestConfig): AxiosPromise<Form1099> {
            return localVarFp.getByIdForm(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the link to the form PDF  scope: `contractor_forms:read`
         * @summary Get the contractor form pdf
         * @param {ContractorFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink(requestParameters: ContractorFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FormPdf> {
            return localVarFp.getPdfLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all contractor\'s forms  scope: `contractor_forms:read`
         * @summary Get all contractor forms
         * @param {ContractorFormsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: ContractorFormsApiListAllRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Form1099>> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create1099Form operation in ContractorFormsApi.
 * @export
 * @interface ContractorFormsApiCreate1099FormRequest
 */
export type ContractorFormsApiCreate1099FormRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorFormsApiCreate1099Form
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & ContractorFormsCreate1099FormRequest

/**
 * Request parameters for getByIdForm operation in ContractorFormsApi.
 * @export
 * @interface ContractorFormsApiGetByIdFormRequest
 */
export type ContractorFormsApiGetByIdFormRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorFormsApiGetByIdForm
    */
    readonly contractorUuid: string
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof ContractorFormsApiGetByIdForm
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorFormsApiGetByIdForm
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getPdfLink operation in ContractorFormsApi.
 * @export
 * @interface ContractorFormsApiGetPdfLinkRequest
 */
export type ContractorFormsApiGetPdfLinkRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorFormsApiGetPdfLink
    */
    readonly contractorUuid: string
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof ContractorFormsApiGetPdfLink
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorFormsApiGetPdfLink
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listAll operation in ContractorFormsApi.
 * @export
 * @interface ContractorFormsApiListAllRequest
 */
export type ContractorFormsApiListAllRequest = {
    
    /**
    * The UUID of the contractor
    * @type {string}
    * @memberof ContractorFormsApiListAll
    */
    readonly contractorUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof ContractorFormsApiListAll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * ContractorFormsApiGenerated - object-oriented interface
 * @export
 * @class ContractorFormsApiGenerated
 * @extends {BaseAPI}
 */
export class ContractorFormsApiGenerated extends BaseAPI {
    /**
     * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a 1099 document for testing purposes.  scope: `contractors:write`
     * @summary Generate a 1099 form [DEMO]
     * @param {ContractorFormsApiCreate1099FormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorFormsApiGenerated
     */
    public create1099Form(requestParameters: ContractorFormsApiCreate1099FormRequest, options?: AxiosRequestConfig) {
        return ContractorFormsApiFp(this.configuration).create1099Form(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a contractor form  scope: `contractor_forms:read`
     * @summary Get a contractor form
     * @param {ContractorFormsApiGetByIdFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorFormsApiGenerated
     */
    public getByIdForm(requestParameters: ContractorFormsApiGetByIdFormRequest, options?: AxiosRequestConfig) {
        return ContractorFormsApiFp(this.configuration).getByIdForm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the link to the form PDF  scope: `contractor_forms:read`
     * @summary Get the contractor form pdf
     * @param {ContractorFormsApiGetPdfLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorFormsApiGenerated
     */
    public getPdfLink(requestParameters: ContractorFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig) {
        return ContractorFormsApiFp(this.configuration).getPdfLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all contractor\'s forms  scope: `contractor_forms:read`
     * @summary Get all contractor forms
     * @param {ContractorFormsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractorFormsApiGenerated
     */
    public listAll(requestParameters: ContractorFormsApiListAllRequest, options?: AxiosRequestConfig) {
        return ContractorFormsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
