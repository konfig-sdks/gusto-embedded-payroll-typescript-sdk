/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Admin } from '../models';
// @ts-ignore
import { CompaniesAcceptTermsOfServiceRequest } from '../models';
// @ts-ignore
import { CompaniesAcceptTermsOfServiceResponse } from '../models';
// @ts-ignore
import { CompaniesCreateAdminRequest } from '../models';
// @ts-ignore
import { CompaniesCreatePartnerManagedCompanyRequest } from '../models';
// @ts-ignore
import { CompaniesCreatePartnerManagedCompanyRequestCompany } from '../models';
// @ts-ignore
import { CompaniesCreatePartnerManagedCompanyRequestUser } from '../models';
// @ts-ignore
import { CompaniesCreatePartnerManagedCompanyResponse } from '../models';
// @ts-ignore
import { CompaniesGetCustomFieldsResponse } from '../models';
// @ts-ignore
import { CompaniesGetTermsOfServiceStatusRequest } from '../models';
// @ts-ignore
import { CompaniesGetTermsOfServiceStatusResponse } from '../models';
// @ts-ignore
import { CompaniesMigrateToEmbeddedPayrollRequest } from '../models';
// @ts-ignore
import { CompaniesMigrateToEmbeddedPayrollResponse } from '../models';
// @ts-ignore
import { Company } from '../models';
// @ts-ignore
import { CompanyOnboardingStatus } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: `terms_of_services:write`
         * @summary Accept terms of service for a company user
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompaniesAcceptTermsOfServiceRequest} [companiesAcceptTermsOfServiceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTermsOfService: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', companiesAcceptTermsOfServiceRequest?: CompaniesAcceptTermsOfServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('acceptTermsOfService', 'companyUuid', companyUuid)
            const localVarPath = `/v1/partner_managed_companies/{company_uuid}/accept_terms_of_service`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesAcceptTermsOfServiceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/partner_managed_companies/{company_uuid}/accept_terms_of_service',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesAcceptTermsOfServiceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: `company_admin:write`
         * @summary Create an admin for the company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompaniesCreateAdminRequest} [companiesCreateAdminRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin: async (companyId: string, xGustoApiVersion?: '2024-03-01', companiesCreateAdminRequest?: CompaniesCreateAdminRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createAdmin', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/admins`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesCreateAdminRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/admins',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesCreateAdminRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  > ðŸ“˜ Token Authentication > > this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
         * @summary Create a partner managed company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompaniesCreatePartnerManagedCompanyRequest} [companiesCreatePartnerManagedCompanyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPartnerManagedCompany: async (xGustoApiVersion?: '2024-03-01', companiesCreatePartnerManagedCompanyRequest?: CompaniesCreatePartnerManagedCompanyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/partner_managed_companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesCreatePartnerManagedCompanyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/partner_managed_companies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesCreatePartnerManagedCompanyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finalize a given company\'s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint `PUT \'/v1/companies/{company_uuid}/approve\'` to facilitate company approvals in the demo environment.  ```shell PUT \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve\'  # Response: Company object, with company_status: \'Approved\' ```  scope: `companies:write`
         * @summary Finish company onboarding
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishOnboarding: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('finishOnboarding', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/finish_onboarding`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/finish_onboarding',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all the admins at a company  scope: `company_admin:read`
         * @summary Get all the admins at a company
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmins: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllAdmins', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/admins`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/admins',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: `companies:read`
         * @summary Get a company
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompany', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: `companies:read`
         * @summary Get the custom fields of a company
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomFields', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/custom_fields`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `company_onboarding_status:read`
         * @summary Get the company\'s onboarding status
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getOnboardingStatus', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/onboarding_status`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/onboarding_status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the user acceptance status of the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms).  scope: `terms_of_services:read`
         * @summary Retrieve terms of service status for a company user
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompaniesGetTermsOfServiceStatusRequest} [companiesGetTermsOfServiceStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTermsOfServiceStatus: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', companiesGetTermsOfServiceStatusRequest?: CompaniesGetTermsOfServiceStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getTermsOfServiceStatus', 'companyUuid', companyUuid)
            const localVarPath = `/v1/partner_managed_companies/{company_uuid}/retrieve_terms_of_service`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesGetTermsOfServiceStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/partner_managed_companies/{company_uuid}/retrieve_terms_of_service',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesGetTermsOfServiceStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: `partner_managed_companies:write`
         * @summary Migrate company to embedded payroll
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {CompaniesMigrateToEmbeddedPayrollRequest} [companiesMigrateToEmbeddedPayrollRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateToEmbeddedPayroll: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', companiesMigrateToEmbeddedPayrollRequest?: CompaniesMigrateToEmbeddedPayrollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('migrateToEmbeddedPayroll', 'companyUuid', companyUuid)
            const localVarPath = `/v1/partner_managed_companies/{company_uuid}/migrate`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companiesMigrateToEmbeddedPayrollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/partner_managed_companies/{company_uuid}/migrate',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companiesMigrateToEmbeddedPayrollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: `terms_of_services:write`
         * @summary Accept terms of service for a company user
         * @param {CompaniesApiAcceptTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptTermsOfService(requestParameters: CompaniesApiAcceptTermsOfServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesAcceptTermsOfServiceResponse>> {
            const companiesAcceptTermsOfServiceRequest: CompaniesAcceptTermsOfServiceRequest = {
                email: requestParameters.email,
                ip_address: requestParameters.ip_address,
                external_user_id: requestParameters.external_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptTermsOfService(requestParameters.companyUuid, requestParameters.xGustoApiVersion, companiesAcceptTermsOfServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: `company_admin:write`
         * @summary Create an admin for the company
         * @param {CompaniesApiCreateAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmin(requestParameters: CompaniesApiCreateAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const companiesCreateAdminRequest: CompaniesCreateAdminRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAdmin(requestParameters.companyId, requestParameters.xGustoApiVersion, companiesCreateAdminRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  > ðŸ“˜ Token Authentication > > this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
         * @summary Create a partner managed company
         * @param {CompaniesApiCreatePartnerManagedCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPartnerManagedCompany(requestParameters: CompaniesApiCreatePartnerManagedCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesCreatePartnerManagedCompanyResponse>> {
            const companiesCreatePartnerManagedCompanyRequest: CompaniesCreatePartnerManagedCompanyRequest = {
                user: requestParameters.user,
                company: requestParameters.company
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPartnerManagedCompany(requestParameters.xGustoApiVersion, companiesCreatePartnerManagedCompanyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finalize a given company\'s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint `PUT \'/v1/companies/{company_uuid}/approve\'` to facilitate company approvals in the demo environment.  ```shell PUT \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve\'  # Response: Company object, with company_status: \'Approved\' ```  scope: `companies:write`
         * @summary Finish company onboarding
         * @param {CompaniesApiFinishOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishOnboarding(requestParameters: CompaniesApiFinishOnboardingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyOnboardingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishOnboarding(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all the admins at a company  scope: `company_admin:read`
         * @summary Get all the admins at a company
         * @param {CompaniesApiGetAllAdminsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAdmins(requestParameters: CompaniesApiGetAllAdminsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Admin>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAdmins(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: `companies:read`
         * @summary Get a company
         * @param {CompaniesApiGetCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(requestParameters: CompaniesApiGetCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Company>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: `companies:read`
         * @summary Get the custom fields of a company
         * @param {CompaniesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: CompaniesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesGetCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get company\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `company_onboarding_status:read`
         * @summary Get the company\'s onboarding status
         * @param {CompaniesApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnboardingStatus(requestParameters: CompaniesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyOnboardingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnboardingStatus(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the user acceptance status of the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms).  scope: `terms_of_services:read`
         * @summary Retrieve terms of service status for a company user
         * @param {CompaniesApiGetTermsOfServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTermsOfServiceStatus(requestParameters: CompaniesApiGetTermsOfServiceStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesGetTermsOfServiceStatusResponse>> {
            const companiesGetTermsOfServiceStatusRequest: CompaniesGetTermsOfServiceStatusRequest = {
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTermsOfServiceStatus(requestParameters.companyUuid, requestParameters.xGustoApiVersion, companiesGetTermsOfServiceStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: `partner_managed_companies:write`
         * @summary Migrate company to embedded payroll
         * @param {CompaniesApiMigrateToEmbeddedPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrateToEmbeddedPayroll(requestParameters: CompaniesApiMigrateToEmbeddedPayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesMigrateToEmbeddedPayrollResponse>> {
            const companiesMigrateToEmbeddedPayrollRequest: CompaniesMigrateToEmbeddedPayrollRequest = {
                email: requestParameters.email,
                ip_address: requestParameters.ip_address,
                external_user_id: requestParameters.external_user_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrateToEmbeddedPayroll(requestParameters.companyUuid, requestParameters.xGustoApiVersion, companiesMigrateToEmbeddedPayrollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * Accept the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: `terms_of_services:write`
         * @summary Accept terms of service for a company user
         * @param {CompaniesApiAcceptTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptTermsOfService(requestParameters: CompaniesApiAcceptTermsOfServiceRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesAcceptTermsOfServiceResponse> {
            return localVarFp.acceptTermsOfService(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: `company_admin:write`
         * @summary Create an admin for the company
         * @param {CompaniesApiCreateAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin(requestParameters: CompaniesApiCreateAdminRequest, options?: AxiosRequestConfig): AxiosPromise<Admin> {
            return localVarFp.createAdmin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  > ðŸ“˜ Token Authentication > > this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
         * @summary Create a partner managed company
         * @param {CompaniesApiCreatePartnerManagedCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPartnerManagedCompany(requestParameters: CompaniesApiCreatePartnerManagedCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesCreatePartnerManagedCompanyResponse> {
            return localVarFp.createPartnerManagedCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Finalize a given company\'s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint `PUT \'/v1/companies/{company_uuid}/approve\'` to facilitate company approvals in the demo environment.  ```shell PUT \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve\'  # Response: Company object, with company_status: \'Approved\' ```  scope: `companies:write`
         * @summary Finish company onboarding
         * @param {CompaniesApiFinishOnboardingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishOnboarding(requestParameters: CompaniesApiFinishOnboardingRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyOnboardingStatus> {
            return localVarFp.finishOnboarding(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all the admins at a company  scope: `company_admin:read`
         * @summary Get all the admins at a company
         * @param {CompaniesApiGetAllAdminsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAdmins(requestParameters: CompaniesApiGetAllAdminsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Admin>> {
            return localVarFp.getAllAdmins(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: `companies:read`
         * @summary Get a company
         * @param {CompaniesApiGetCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(requestParameters: CompaniesApiGetCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Company> {
            return localVarFp.getCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: `companies:read`
         * @summary Get the custom fields of a company
         * @param {CompaniesApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: CompaniesApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesGetCustomFieldsResponse> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `company_onboarding_status:read`
         * @summary Get the company\'s onboarding status
         * @param {CompaniesApiGetOnboardingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnboardingStatus(requestParameters: CompaniesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyOnboardingStatus> {
            return localVarFp.getOnboardingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the user acceptance status of the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms).  scope: `terms_of_services:read`
         * @summary Retrieve terms of service status for a company user
         * @param {CompaniesApiGetTermsOfServiceStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTermsOfServiceStatus(requestParameters: CompaniesApiGetTermsOfServiceStatusRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesGetTermsOfServiceStatusResponse> {
            return localVarFp.getTermsOfServiceStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: `partner_managed_companies:write`
         * @summary Migrate company to embedded payroll
         * @param {CompaniesApiMigrateToEmbeddedPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateToEmbeddedPayroll(requestParameters: CompaniesApiMigrateToEmbeddedPayrollRequest, options?: AxiosRequestConfig): AxiosPromise<CompaniesMigrateToEmbeddedPayrollResponse> {
            return localVarFp.migrateToEmbeddedPayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acceptTermsOfService operation in CompaniesApi.
 * @export
 * @interface CompaniesApiAcceptTermsOfServiceRequest
 */
export type CompaniesApiAcceptTermsOfServiceRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiAcceptTermsOfService
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiAcceptTermsOfService
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompaniesAcceptTermsOfServiceRequest

/**
 * Request parameters for createAdmin operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCreateAdminRequest
 */
export type CompaniesApiCreateAdminRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiCreateAdmin
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiCreateAdmin
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompaniesCreateAdminRequest

/**
 * Request parameters for createPartnerManagedCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiCreatePartnerManagedCompanyRequest
 */
export type CompaniesApiCreatePartnerManagedCompanyRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiCreatePartnerManagedCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompaniesCreatePartnerManagedCompanyRequest

/**
 * Request parameters for finishOnboarding operation in CompaniesApi.
 * @export
 * @interface CompaniesApiFinishOnboardingRequest
 */
export type CompaniesApiFinishOnboardingRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiFinishOnboarding
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiFinishOnboarding
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getAllAdmins operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetAllAdminsRequest
 */
export type CompaniesApiGetAllAdminsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiGetAllAdmins
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof CompaniesApiGetAllAdmins
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof CompaniesApiGetAllAdmins
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiGetAllAdmins
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompany operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetCompanyRequest
 */
export type CompaniesApiGetCompanyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiGetCompany
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiGetCompany
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCustomFields operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetCustomFieldsRequest
 */
export type CompaniesApiGetCustomFieldsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiGetCustomFields
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof CompaniesApiGetCustomFields
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof CompaniesApiGetCustomFields
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiGetCustomFields
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getOnboardingStatus operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetOnboardingStatusRequest
 */
export type CompaniesApiGetOnboardingStatusRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiGetOnboardingStatus
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiGetOnboardingStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getTermsOfServiceStatus operation in CompaniesApi.
 * @export
 * @interface CompaniesApiGetTermsOfServiceStatusRequest
 */
export type CompaniesApiGetTermsOfServiceStatusRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiGetTermsOfServiceStatus
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiGetTermsOfServiceStatus
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompaniesGetTermsOfServiceStatusRequest

/**
 * Request parameters for migrateToEmbeddedPayroll operation in CompaniesApi.
 * @export
 * @interface CompaniesApiMigrateToEmbeddedPayrollRequest
 */
export type CompaniesApiMigrateToEmbeddedPayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof CompaniesApiMigrateToEmbeddedPayroll
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof CompaniesApiMigrateToEmbeddedPayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & CompaniesMigrateToEmbeddedPayrollRequest

/**
 * CompaniesApiGenerated - object-oriented interface
 * @export
 * @class CompaniesApiGenerated
 * @extends {BaseAPI}
 */
export class CompaniesApiGenerated extends BaseAPI {
    /**
     * Accept the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms). The user must have a role in the company in order to accept the Terms of Service.  scope: `terms_of_services:write`
     * @summary Accept terms of service for a company user
     * @param {CompaniesApiAcceptTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public acceptTermsOfService(requestParameters: CompaniesApiAcceptTermsOfServiceRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).acceptTermsOfService(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new admin for a company. If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.  scope: `company_admin:write`
     * @summary Create an admin for the company
     * @param {CompaniesApiCreateAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public createAdmin(requestParameters: CompaniesApiCreateAdminRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).createAdmin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a partner managed company. When you successfully call the API, it does the following: * Creates a new company in Gusto * Creates a new user using the provided email if the user does not already exist. * Makes the user the primary payroll administrator of the new company.  In response, you will receive oauth access tokens for the created company.  IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.  > ðŸ“˜ Token Authentication > > this endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#retrieving-access-tokens)
     * @summary Create a partner managed company
     * @param {CompaniesApiCreatePartnerManagedCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public createPartnerManagedCompany(requestParameters: CompaniesApiCreatePartnerManagedCompanyRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).createPartnerManagedCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finalize a given company\'s onboarding process.  ### Approve a company in demo After a company is finished onboarding, Gusto requires an additional step to review and approve that company. In production environments, this step is required for risk-analysis purposes.  We provide the endpoint `PUT \'/v1/companies/{company_uuid}/approve\'` to facilitate company approvals in the demo environment.  ```shell PUT \'/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve\'  # Response: Company object, with company_status: \'Approved\' ```  scope: `companies:write`
     * @summary Finish company onboarding
     * @param {CompaniesApiFinishOnboardingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public finishOnboarding(requestParameters: CompaniesApiFinishOnboardingRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).finishOnboarding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all the admins at a company  scope: `company_admin:read`
     * @summary Get all the admins at a company
     * @param {CompaniesApiGetAllAdminsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getAllAdmins(requestParameters: CompaniesApiGetAllAdminsRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getAllAdmins(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a company.          The employees:read scope is required to return home_address and non-work locations.          The company_admin:read scope is required to return primary_payroll_admin.          The signatories:read scope is required to return primary_signatory.           scope: `companies:read`
     * @summary Get a company
     * @param {CompaniesApiGetCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getCompany(requestParameters: CompaniesApiGetCompanyRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company  scope: `companies:read`
     * @summary Get the custom fields of a company
     * @param {CompaniesApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getCustomFields(requestParameters: CompaniesApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get company\'s onboarding status. The data returned helps inform the required onboarding steps and respective completion status.  scope: `company_onboarding_status:read`
     * @summary Get the company\'s onboarding status
     * @param {CompaniesApiGetOnboardingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getOnboardingStatus(requestParameters: CompaniesApiGetOnboardingStatusRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getOnboardingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the user acceptance status of the Gusto Embedded Payroll\'s [Terms of Service](https://flows.gusto.com/terms).  scope: `terms_of_services:read`
     * @summary Retrieve terms of service status for a company user
     * @param {CompaniesApiGetTermsOfServiceStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public getTermsOfServiceStatus(requestParameters: CompaniesApiGetTermsOfServiceStatusRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).getTermsOfServiceStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Migrate an existing Gusto customer to your embedded payroll product.  To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).  scope: `partner_managed_companies:write`
     * @summary Migrate company to embedded payroll
     * @param {CompaniesApiMigrateToEmbeddedPayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApiGenerated
     */
    public migrateToEmbeddedPayroll(requestParameters: CompaniesApiMigrateToEmbeddedPayrollRequest, options?: AxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).migrateToEmbeddedPayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
