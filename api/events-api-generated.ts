/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Event } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `events:read`
         * @summary Get all events
         * @param {string} [startingAfterUuid] A cursor for pagination. Returns all events occuring after the specified UUID (exclusive)
         * @param {string} [resourceUuid] The UUID of the company. If not specified, will return all events for all companies.
         * @param {string} [limit] Limits the number of objects returned in a single response, between 1 and 100. The default is 25
         * @param {string} [eventType] A string containing the exact event name (e.g. &#x60;employee.created&#x60;), or use a wildcard match to filter for a group of events (e.g. &#x60;employee.*&#x60;, &#x60;*.created&#x60;, &#x60;notification.*.created&#x60; etc.)
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get30DayEvents: async (startingAfterUuid?: string, resourceUuid?: string, limit?: string, eventType?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })
            if (startingAfterUuid !== undefined) {
                localVarQueryParameter['starting_after_uuid'] = startingAfterUuid;
            }

            if (resourceUuid !== undefined) {
                localVarQueryParameter['resource_uuid'] = resourceUuid;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `events:read`
         * @summary Get all events
         * @param {EventsApiGet30DayEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get30DayEvents(requestParameters: EventsApiGet30DayEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get30DayEvents(requestParameters.startingAfterUuid, requestParameters.resourceUuid, requestParameters.limit, requestParameters.eventType, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `events:read`
         * @summary Get all events
         * @param {EventsApiGet30DayEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get30DayEvents(requestParameters: EventsApiGet30DayEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Event>> {
            return localVarFp.get30DayEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get30DayEvents operation in EventsApi.
 * @export
 * @interface EventsApiGet30DayEventsRequest
 */
export type EventsApiGet30DayEventsRequest = {
    
    /**
    * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive)
    * @type {string}
    * @memberof EventsApiGet30DayEvents
    */
    readonly startingAfterUuid?: string
    
    /**
    * The UUID of the company. If not specified, will return all events for all companies.
    * @type {string}
    * @memberof EventsApiGet30DayEvents
    */
    readonly resourceUuid?: string
    
    /**
    * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
    * @type {string}
    * @memberof EventsApiGet30DayEvents
    */
    readonly limit?: string
    
    /**
    * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
    * @type {string}
    * @memberof EventsApiGet30DayEvents
    */
    readonly eventType?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EventsApiGet30DayEvents
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * EventsApiGenerated - object-oriented interface
 * @export
 * @class EventsApiGenerated
 * @extends {BaseAPI}
 */
export class EventsApiGenerated extends BaseAPI {
    /**
     * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.  > ðŸ“˜ Token Authentication > > This endpoint uses the [organization level api token and the Token scheme with HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/authentication#api-token-authentication).  scope: `events:read`
     * @summary Get all events
     * @param {EventsApiGet30DayEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiGenerated
     */
    public get30DayEvents(requestParameters: EventsApiGet30DayEventsRequest = {}, options?: AxiosRequestConfig) {
        return EventsApiFp(this.configuration).get30DayEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
