/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeEmploymentsCreateTerminationRequest } from '../models';
// @ts-ignore
import { EmployeeEmploymentsGetHistoryResponseInner } from '../models';
// @ts-ignore
import { EmployeeEmploymentsUpdateRehireRequest } from '../models';
// @ts-ignore
import { EmployeeEmploymentsUpdateTerminationRequest } from '../models';
// @ts-ignore
import { Rehire } from '../models';
// @ts-ignore
import { RehireBody } from '../models';
// @ts-ignore
import { Termination } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeEmploymentsApi - axios parameter creator
 * @export
 */
export const EmployeeEmploymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rehire is created whenever an employee is scheduled to return to the company.  scope: `employments:write`
         * @summary Create an employee rehire
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {RehireBody} [rehireBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRehire: async (employeeId: string, xGustoApiVersion?: '2024-03-01', rehireBody?: RehireBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createRehire', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/rehire`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: rehireBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/rehire',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(rehireBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Create an employee termination
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeEmploymentsCreateTerminationRequest} [employeeEmploymentsCreateTerminationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTermination: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeEmploymentsCreateTerminationRequest?: EmployeeEmploymentsCreateTerminationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createTermination', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/terminations`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeEmploymentsCreateTerminationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/terminations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeEmploymentsCreateTerminationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an employee termination.  scope: `employments:write`
         * @summary Delete an employee termination
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTermination: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteTermination', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/terminations`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/terminations',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: `employments:read`
         * @summary Get employment history for an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getHistory', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/employment_history`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/employment_history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an employee\'s rehire, which contains information on when the employee returns to work.  scope: `employments:read`
         * @summary Get an employee rehire
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRehire: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getRehire', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/rehire`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/rehire',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:read`
         * @summary Get terminations for an employee
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTerminations: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeeTerminations', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/terminations`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/terminations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an employee rehire. An employee rehire cannot be deleted if it\'s active (past effective date).  scope: `employments:write`
         * @summary Delete an employee rehire
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRehire: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('removeRehire', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/rehire`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/rehire',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an employee\'s rehire.  scope: `employments:write`
         * @summary Update an employee rehire
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeEmploymentsUpdateRehireRequest} [employeeEmploymentsUpdateRehireRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRehire: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeEmploymentsUpdateRehireRequest?: EmployeeEmploymentsUpdateRehireRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateRehire', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/rehire`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeEmploymentsUpdateRehireRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/rehire',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeEmploymentsUpdateRehireRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Update an employee termination
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeEmploymentsUpdateTerminationRequest} [employeeEmploymentsUpdateTerminationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTermination: async (employeeId: string, xGustoApiVersion?: '2024-03-01', employeeEmploymentsUpdateTerminationRequest?: EmployeeEmploymentsUpdateTerminationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateTermination', 'employeeId', employeeId)
            const localVarPath = `/v1/terminations/{employee_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeEmploymentsUpdateTerminationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/terminations/{employee_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeEmploymentsUpdateTerminationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeEmploymentsApi - functional programming interface
 * @export
 */
export const EmployeeEmploymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeEmploymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Rehire is created whenever an employee is scheduled to return to the company.  scope: `employments:write`
         * @summary Create an employee rehire
         * @param {EmployeeEmploymentsApiCreateRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRehire(requestParameters: EmployeeEmploymentsApiCreateRehireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rehire>> {
            const rehireBody: RehireBody = {
                effective_date: requestParameters.effective_date,
                file_new_hire_report: requestParameters.file_new_hire_report,
                work_location_uuid: requestParameters.work_location_uuid,
                employment_status: requestParameters.employment_status,
                two_percent_shareholder: requestParameters.two_percent_shareholder
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRehire(requestParameters.employeeId, requestParameters.xGustoApiVersion, rehireBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Create an employee termination
         * @param {EmployeeEmploymentsApiCreateTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTermination(requestParameters: EmployeeEmploymentsApiCreateTerminationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Termination>> {
            const employeeEmploymentsCreateTerminationRequest: EmployeeEmploymentsCreateTerminationRequest = {
                effective_date: requestParameters.effective_date,
                run_termination_payroll: requestParameters.run_termination_payroll
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTermination(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeEmploymentsCreateTerminationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an employee termination.  scope: `employments:write`
         * @summary Delete an employee termination
         * @param {EmployeeEmploymentsApiDeleteTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTermination(requestParameters: EmployeeEmploymentsApiDeleteTerminationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTermination(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: `employments:read`
         * @summary Get employment history for an employee
         * @param {EmployeeEmploymentsApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(requestParameters: EmployeeEmploymentsApiGetHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeEmploymentsGetHistoryResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an employee\'s rehire, which contains information on when the employee returns to work.  scope: `employments:read`
         * @summary Get an employee rehire
         * @param {EmployeeEmploymentsApiGetRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRehire(requestParameters: EmployeeEmploymentsApiGetRehireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rehire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRehire(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:read`
         * @summary Get terminations for an employee
         * @param {EmployeeEmploymentsApiListEmployeeTerminationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeTerminations(requestParameters: EmployeeEmploymentsApiListEmployeeTerminationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Termination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeTerminations(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an employee rehire. An employee rehire cannot be deleted if it\'s active (past effective date).  scope: `employments:write`
         * @summary Delete an employee rehire
         * @param {EmployeeEmploymentsApiRemoveRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRehire(requestParameters: EmployeeEmploymentsApiRemoveRehireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRehire(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an employee\'s rehire.  scope: `employments:write`
         * @summary Update an employee rehire
         * @param {EmployeeEmploymentsApiUpdateRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRehire(requestParameters: EmployeeEmploymentsApiUpdateRehireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rehire>> {
            const employeeEmploymentsUpdateRehireRequest: EmployeeEmploymentsUpdateRehireRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRehire(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeEmploymentsUpdateRehireRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Update an employee termination
         * @param {EmployeeEmploymentsApiUpdateTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTermination(requestParameters: EmployeeEmploymentsApiUpdateTerminationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Termination>> {
            const employeeEmploymentsUpdateTerminationRequest: EmployeeEmploymentsUpdateTerminationRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTermination(requestParameters.employeeId, requestParameters.xGustoApiVersion, employeeEmploymentsUpdateTerminationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeEmploymentsApi - factory interface
 * @export
 */
export const EmployeeEmploymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeEmploymentsApiFp(configuration)
    return {
        /**
         * Rehire is created whenever an employee is scheduled to return to the company.  scope: `employments:write`
         * @summary Create an employee rehire
         * @param {EmployeeEmploymentsApiCreateRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRehire(requestParameters: EmployeeEmploymentsApiCreateRehireRequest, options?: AxiosRequestConfig): AxiosPromise<Rehire> {
            return localVarFp.createRehire(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Create an employee termination
         * @param {EmployeeEmploymentsApiCreateTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTermination(requestParameters: EmployeeEmploymentsApiCreateTerminationRequest, options?: AxiosRequestConfig): AxiosPromise<Termination> {
            return localVarFp.createTermination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an employee termination.  scope: `employments:write`
         * @summary Delete an employee termination
         * @param {EmployeeEmploymentsApiDeleteTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTermination(requestParameters: EmployeeEmploymentsApiDeleteTerminationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTermination(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: `employments:read`
         * @summary Get employment history for an employee
         * @param {EmployeeEmploymentsApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(requestParameters: EmployeeEmploymentsApiGetHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeEmploymentsGetHistoryResponseInner>> {
            return localVarFp.getHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an employee\'s rehire, which contains information on when the employee returns to work.  scope: `employments:read`
         * @summary Get an employee rehire
         * @param {EmployeeEmploymentsApiGetRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRehire(requestParameters: EmployeeEmploymentsApiGetRehireRequest, options?: AxiosRequestConfig): AxiosPromise<Rehire> {
            return localVarFp.getRehire(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:read`
         * @summary Get terminations for an employee
         * @param {EmployeeEmploymentsApiListEmployeeTerminationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTerminations(requestParameters: EmployeeEmploymentsApiListEmployeeTerminationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Termination>> {
            return localVarFp.listEmployeeTerminations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an employee rehire. An employee rehire cannot be deleted if it\'s active (past effective date).  scope: `employments:write`
         * @summary Delete an employee rehire
         * @param {EmployeeEmploymentsApiRemoveRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRehire(requestParameters: EmployeeEmploymentsApiRemoveRehireRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeRehire(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an employee\'s rehire.  scope: `employments:write`
         * @summary Update an employee rehire
         * @param {EmployeeEmploymentsApiUpdateRehireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRehire(requestParameters: EmployeeEmploymentsApiUpdateRehireRequest, options?: AxiosRequestConfig): AxiosPromise<Rehire> {
            return localVarFp.updateRehire(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
         * @summary Update an employee termination
         * @param {EmployeeEmploymentsApiUpdateTerminationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTermination(requestParameters: EmployeeEmploymentsApiUpdateTerminationRequest, options?: AxiosRequestConfig): AxiosPromise<Termination> {
            return localVarFp.updateTermination(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRehire operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiCreateRehireRequest
 */
export type EmployeeEmploymentsApiCreateRehireRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiCreateRehire
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiCreateRehire
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & RehireBody

/**
 * Request parameters for createTermination operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiCreateTerminationRequest
 */
export type EmployeeEmploymentsApiCreateTerminationRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiCreateTermination
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiCreateTermination
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeEmploymentsCreateTerminationRequest

/**
 * Request parameters for deleteTermination operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiDeleteTerminationRequest
 */
export type EmployeeEmploymentsApiDeleteTerminationRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiDeleteTermination
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiDeleteTermination
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getHistory operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiGetHistoryRequest
 */
export type EmployeeEmploymentsApiGetHistoryRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiGetHistory
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiGetHistory
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getRehire operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiGetRehireRequest
 */
export type EmployeeEmploymentsApiGetRehireRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiGetRehire
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiGetRehire
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for listEmployeeTerminations operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiListEmployeeTerminationsRequest
 */
export type EmployeeEmploymentsApiListEmployeeTerminationsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiListEmployeeTerminations
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiListEmployeeTerminations
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for removeRehire operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiRemoveRehireRequest
 */
export type EmployeeEmploymentsApiRemoveRehireRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiRemoveRehire
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiRemoveRehire
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateRehire operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiUpdateRehireRequest
 */
export type EmployeeEmploymentsApiUpdateRehireRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiUpdateRehire
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiUpdateRehire
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeEmploymentsUpdateRehireRequest

/**
 * Request parameters for updateTermination operation in EmployeeEmploymentsApi.
 * @export
 * @interface EmployeeEmploymentsApiUpdateTerminationRequest
 */
export type EmployeeEmploymentsApiUpdateTerminationRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeEmploymentsApiUpdateTermination
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeEmploymentsApiUpdateTermination
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeEmploymentsUpdateTerminationRequest

/**
 * EmployeeEmploymentsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeEmploymentsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeEmploymentsApiGenerated extends BaseAPI {
    /**
     * Rehire is created whenever an employee is scheduled to return to the company.  scope: `employments:write`
     * @summary Create an employee rehire
     * @param {EmployeeEmploymentsApiCreateRehireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public createRehire(requestParameters: EmployeeEmploymentsApiCreateRehireRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).createRehire(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
     * @summary Create an employee termination
     * @param {EmployeeEmploymentsApiCreateTerminationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public createTermination(requestParameters: EmployeeEmploymentsApiCreateTerminationRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).createTermination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an employee termination.  scope: `employments:write`
     * @summary Delete an employee termination
     * @param {EmployeeEmploymentsApiDeleteTerminationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public deleteTermination(requestParameters: EmployeeEmploymentsApiDeleteTerminationRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).deleteTermination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the employment history for a given employee, which includes termination and rehire.  scope: `employments:read`
     * @summary Get employment history for an employee
     * @param {EmployeeEmploymentsApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public getHistory(requestParameters: EmployeeEmploymentsApiGetHistoryRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).getHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an employee\'s rehire, which contains information on when the employee returns to work.  scope: `employments:read`
     * @summary Get an employee rehire
     * @param {EmployeeEmploymentsApiGetRehireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public getRehire(requestParameters: EmployeeEmploymentsApiGetRehireRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).getRehire(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:read`
     * @summary Get terminations for an employee
     * @param {EmployeeEmploymentsApiListEmployeeTerminationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public listEmployeeTerminations(requestParameters: EmployeeEmploymentsApiListEmployeeTerminationsRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).listEmployeeTerminations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an employee rehire. An employee rehire cannot be deleted if it\'s active (past effective date).  scope: `employments:write`
     * @summary Delete an employee rehire
     * @param {EmployeeEmploymentsApiRemoveRehireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public removeRehire(requestParameters: EmployeeEmploymentsApiRemoveRehireRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).removeRehire(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an employee\'s rehire.  scope: `employments:write`
     * @summary Update an employee rehire
     * @param {EmployeeEmploymentsApiUpdateRehireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public updateRehire(requestParameters: EmployeeEmploymentsApiUpdateRehireRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).updateRehire(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.  Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.  scope: `employments:write`
     * @summary Update an employee termination
     * @param {EmployeeEmploymentsApiUpdateTerminationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentsApiGenerated
     */
    public updateTermination(requestParameters: EmployeeEmploymentsApiUpdateTerminationRequest, options?: AxiosRequestConfig) {
        return EmployeeEmploymentsApiFp(this.configuration).updateTermination(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
