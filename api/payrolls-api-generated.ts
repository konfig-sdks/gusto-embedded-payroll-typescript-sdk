/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeePayStub } from '../models';
// @ts-ignore
import { GrossUpPay } from '../models';
// @ts-ignore
import { Payroll } from '../models';
// @ts-ignore
import { PayrollBlocker } from '../models';
// @ts-ignore
import { PayrollCheck } from '../models';
// @ts-ignore
import { PayrollMinimal } from '../models';
// @ts-ignore
import { PayrollPrepared } from '../models';
// @ts-ignore
import { PayrollReceipt } from '../models';
// @ts-ignore
import { PayrollReversal } from '../models';
// @ts-ignore
import { PayrollsCalculateGrossUp422Response } from '../models';
// @ts-ignore
import { PayrollsCalculateGrossUpRequest } from '../models';
// @ts-ignore
import { PayrollsCalculateGrossUpResponse } from '../models';
// @ts-ignore
import { PayrollsCreateOffCyclePayrollRequest } from '../models';
// @ts-ignore
import { PayrollsGeneratePrintableChecksRequest } from '../models';
// @ts-ignore
import { PayrollsSkipPayrollRequest } from '../models';
// @ts-ignore
import { PayrollsSkipPayrollResponse } from '../models';
// @ts-ignore
import { PayrollsSubmitPayrollResponse } from '../models';
// @ts-ignore
import { PayrollsUpdatePayrollByIdRequest } from '../models';
// @ts-ignore
import { PayrollsUpdatePayrollByIdRequestEmployeeCompensationsInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollsApi - axios parameter creator
 * @export
 */
export const PayrollsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all approved Payroll Reversals for a Company.  scope: `payrolls:read`
         * @summary Get approved payroll reversals
         * @param {string} companyId The UUID of the company
         * @param {number} [page] The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         * @param {number} [per] Number of objects per page. For majority of endpoints will default to 25
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvedReversals: async (companyId: string, page?: number, per?: number, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('approvedReversals', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/payroll_reversals`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (per !== undefined) {
                localVarQueryParameter['per'] = per;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payroll_reversals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calculates gross up earnings for an employee\'s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.  scope: `payrolls:run`
         * @summary Calculate gross up
         * @param {string} payrollUuid The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsCalculateGrossUpRequest} [payrollsCalculateGrossUpRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateGrossUp: async (payrollUuid: string, xGustoApiVersion?: '2024-03-01', payrollsCalculateGrossUpRequest?: PayrollsCalculateGrossUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollUuid' is not null or undefined
            assertParamExists('calculateGrossUp', 'payrollUuid', payrollUuid)
            const localVarPath = `/v1/payrolls/{payroll_uuid}/gross_up`
                .replace(`{${"payroll_uuid"}}`, encodeURIComponent(String(payrollUuid !== undefined ? payrollUuid : `-payroll_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsCalculateGrossUpRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_uuid}/gross_up',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsCalculateGrossUpRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params. In v2023-04-01, *show_calculation=true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
         * @summary Calculate a payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateGrossUp_1: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('calculateGrossUp_1', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('calculateGrossUp_1', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}/calculate`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}/calculate',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria: - `processed` is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: `payrolls:run` 
         * @summary Cancel a payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayrollTransition: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('cancelPayrollTransition', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('cancelPayrollTransition', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}/cancel`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}/cancel',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new, unprocessed, off-cycle payroll.  ## `off_cycle_reason` - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`. - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.  scope: `payrolls:run`
         * @summary Create an off-cycle payroll
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsCreateOffCyclePayrollRequest} [payrollsCreateOffCyclePayrollRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffCyclePayroll: async (companyId: string, xGustoApiVersion?: '2024-03-01', payrollsCreateOffCyclePayrollRequest?: PayrollsCreateOffCyclePayrollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createOffCyclePayroll', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/payrolls`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsCreateOffCyclePayrollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsCreateOffCyclePayrollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.  scope: `payrolls:run`
         * @summary Delete a payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {boolean} [async] When true, request an asynchronous delete of the payroll.
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnprocessedPayroll: async (companyId: string, payrollId: string, async?: boolean, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteUnprocessedPayroll', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('deleteUnprocessedPayroll', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: `generated_documents:write`
         * @summary Generate payroll printable checks (pdf)
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsGeneratePrintableChecksRequest} [payrollsGeneratePrintableChecksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePrintableChecks: async (payrollId: string, xGustoApiVersion?: '2024-03-01', payrollsGeneratePrintableChecksRequest?: PayrollsGeneratePrintableChecksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('generatePrintableChecks', 'payrollId', payrollId)
            const localVarPath = `/v1/payrolls/{payroll_id}/generated_documents/printable_payroll_checks`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsGeneratePrintableChecksRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_id}/generated_documents/printable_payroll_checks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsGeneratePrintableChecksRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: `payrolls:run`
         * @summary Get all payroll blockers for a company
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayrollBlockers: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getAllPayrollBlockers', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/payrolls/blockers`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/payrolls/blockers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {string} companyId The UUID of the company
         * @param {'unprocessed' | 'processed'} [processingStatuses] Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. &#x60;?processing_statuses&#x3D;processed,unprocessed&#x60;
         * @param {'regular' | 'off_cycle' | 'external'} [payrollTypes] Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. &#x60;?payroll_types&#x3D;regular,off_cycle&#x60;
         * @param {'totals' | 'payroll_status_meta'} [include] Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;totals,payroll_status_meta&#x60;
         * @param {string} [startDate] Return payrolls whose pay period is after the start date
         * @param {string} [endDate] Return payrolls whose pay period is before the end date
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayrolls: async (companyId: string, processingStatuses?: 'unprocessed' | 'processed', payrollTypes?: 'regular' | 'off_cycle' | 'external', include?: 'totals' | 'payroll_status_meta', startDate?: string, endDate?: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPayrolls', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/payrolls`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (processingStatuses !== undefined) {
                localVarQueryParameter['processing_statuses'] = processingStatuses;
            }

            if (payrollTypes !== undefined) {
                localVarQueryParameter['payroll_types'] = payrollTypes;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: `pay_stubs:read`
         * @summary Get an employee pay stub (pdf)
         * @param {string} payrollId The UUID of the payroll
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePayStub: async (payrollId: string, employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('getEmployeePayStub', 'payrollId', payrollId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeePayStub', 'employeeId', employeeId)
            const localVarPath = `/v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub`
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)))
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s pay stubs  scope: `pay_stubs:read`
         * @summary Get an employee\'s pay stubs
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePayStubs: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeePayStubs', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/pay_stubs`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/pay_stubs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'} [include] Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. &#x60;?include&#x3D;benefits,deductions,taxes&#x60;
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayroll: async (companyId: string, payrollId: string, include?: 'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta', xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSinglePayroll', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('getSinglePayroll', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single payroll receipt
         * @param {string} payrollUuid The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleReceipt: async (payrollUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payrollUuid' is not null or undefined
            assertParamExists('getSingleReceipt', 'payrollUuid', payrollUuid)
            const localVarPath = `/v1/payrolls/{payroll_uuid}/receipt`
                .replace(`{${"payroll_uuid"}}`, encodeURIComponent(String(payrollUuid !== undefined ? payrollUuid : `-payroll_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payrolls/{payroll_uuid}/receipt',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareForUpdate: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('prepareForUpdate', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('prepareForUpdate', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}/prepare`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}/prepare',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Skip a payroll
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsSkipPayrollRequest} [payrollsSkipPayrollRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipPayroll: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', payrollsSkipPayrollRequest?: PayrollsSkipPayrollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('skipPayroll', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/payrolls/skip`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsSkipPayrollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/payrolls/skip',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsSkipPayrollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Submit payroll
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPayroll: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('submitPayroll', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('submitPayroll', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}/submit`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}/submit',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {string} companyId The UUID of the company
         * @param {string} payrollId The UUID of the payroll
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {PayrollsUpdatePayrollByIdRequest} [payrollsUpdatePayrollByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayrollById: async (companyId: string, payrollId: string, xGustoApiVersion?: '2024-03-01', payrollsUpdatePayrollByIdRequest?: PayrollsUpdatePayrollByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updatePayrollById', 'companyId', companyId)
            // verify required parameter 'payrollId' is not null or undefined
            assertParamExists('updatePayrollById', 'payrollId', payrollId)
            const localVarPath = `/v1/companies/{company_id}/payrolls/{payroll_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)))
                .replace(`{${"payroll_id"}}`, encodeURIComponent(String(payrollId !== undefined ? payrollId : `-payroll_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollsUpdatePayrollByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/payrolls/{payroll_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollsUpdatePayrollByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollsApi - functional programming interface
 * @export
 */
export const PayrollsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all approved Payroll Reversals for a Company.  scope: `payrolls:read`
         * @summary Get approved payroll reversals
         * @param {PayrollsApiApprovedReversalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvedReversals(requestParameters: PayrollsApiApprovedReversalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollReversal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvedReversals(requestParameters.companyId, requestParameters.page, requestParameters.per, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Calculates gross up earnings for an employee\'s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.  scope: `payrolls:run`
         * @summary Calculate gross up
         * @param {PayrollsApiCalculateGrossUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateGrossUp(requestParameters: PayrollsApiCalculateGrossUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrossUpPay>> {
            const payrollsCalculateGrossUpRequest: PayrollsCalculateGrossUpRequest = {
                employee_uuid: requestParameters.employee_uuid,
                net_pay: requestParameters.net_pay
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateGrossUp(requestParameters.payrollUuid, requestParameters.xGustoApiVersion, payrollsCalculateGrossUpRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params. In v2023-04-01, *show_calculation=true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
         * @summary Calculate a payroll
         * @param {PayrollsApiCalculateGrossUp0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateGrossUp_1(requestParameters: PayrollsApiCalculateGrossUp0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateGrossUp_1(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria: - `processed` is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: `payrolls:run` 
         * @summary Cancel a payroll
         * @param {PayrollsApiCancelPayrollTransitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPayrollTransition(requestParameters: PayrollsApiCancelPayrollTransitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPayrollTransition(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new, unprocessed, off-cycle payroll.  ## `off_cycle_reason` - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`. - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.  scope: `payrolls:run`
         * @summary Create an off-cycle payroll
         * @param {PayrollsApiCreateOffCyclePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOffCyclePayroll(requestParameters: PayrollsApiCreateOffCyclePayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollPrepared>> {
            const payrollsCreateOffCyclePayrollRequest: PayrollsCreateOffCyclePayrollRequest = {
                off_cycle: requestParameters.off_cycle,
                off_cycle_reason: requestParameters.off_cycle_reason,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                pay_schedule_uuid: requestParameters.pay_schedule_uuid,
                employee_uuids: requestParameters.employee_uuids,
                check_date: requestParameters.check_date,
                withholding_pay_period: requestParameters.withholding_pay_period,
                skip_regular_deductions: requestParameters.skip_regular_deductions,
                fixed_withholding_rate: requestParameters.fixed_withholding_rate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOffCyclePayroll(requestParameters.companyId, requestParameters.xGustoApiVersion, payrollsCreateOffCyclePayrollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.  scope: `payrolls:run`
         * @summary Delete a payroll
         * @param {PayrollsApiDeleteUnprocessedPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnprocessedPayroll(requestParameters: PayrollsApiDeleteUnprocessedPayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnprocessedPayroll(requestParameters.companyId, requestParameters.payrollId, requestParameters.async, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: `generated_documents:write`
         * @summary Generate payroll printable checks (pdf)
         * @param {PayrollsApiGeneratePrintableChecksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePrintableChecks(requestParameters: PayrollsApiGeneratePrintableChecksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollCheck>> {
            const payrollsGeneratePrintableChecksRequest: PayrollsGeneratePrintableChecksRequest = {
                printing_format: requestParameters.printing_format,
                starting_check_number: requestParameters.starting_check_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePrintableChecks(requestParameters.payrollId, requestParameters.xGustoApiVersion, payrollsGeneratePrintableChecksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: `payrolls:run`
         * @summary Get all payroll blockers for a company
         * @param {PayrollsApiGetAllPayrollBlockersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayrollBlockers(requestParameters: PayrollsApiGetAllPayrollBlockersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayrollBlocker>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayrollBlockers(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {PayrollsApiGetCompanyPayrollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPayrolls(requestParameters: PayrollsApiGetCompanyPayrollsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayrollMinimal>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPayrolls(requestParameters.companyId, requestParameters.processingStatuses, requestParameters.payrollTypes, requestParameters.include, requestParameters.startDate, requestParameters.endDate, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: `pay_stubs:read`
         * @summary Get an employee pay stub (pdf)
         * @param {PayrollsApiGetEmployeePayStubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeePayStub(requestParameters: PayrollsApiGetEmployeePayStubRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeePayStub(requestParameters.payrollId, requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s pay stubs  scope: `pay_stubs:read`
         * @summary Get an employee\'s pay stubs
         * @param {PayrollsApiGetEmployeePayStubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeePayStubs(requestParameters: PayrollsApiGetEmployeePayStubsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeePayStub>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeePayStubs(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payroll>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSinglePayroll(requestParameters.companyId, requestParameters.payrollId, requestParameters.include, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single payroll receipt
         * @param {PayrollsApiGetSingleReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleReceipt(requestParameters: PayrollsApiGetSingleReceiptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollReceipt>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleReceipt(requestParameters.payrollUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollPrepared>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prepareForUpdate(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Skip a payroll
         * @param {PayrollsApiSkipPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipPayroll(requestParameters: PayrollsApiSkipPayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const payrollsSkipPayrollRequest: PayrollsSkipPayrollRequest = {
                payroll_type: requestParameters.payroll_type,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                pay_schedule_uuid: requestParameters.pay_schedule_uuid,
                employee_uuids: requestParameters.employee_uuids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipPayroll(requestParameters.companyUuid, requestParameters.xGustoApiVersion, payrollsSkipPayrollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Submit payroll
         * @param {PayrollsApiSubmitPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitPayroll(requestParameters: PayrollsApiSubmitPayrollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitPayroll(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {PayrollsApiUpdatePayrollByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayrollById(requestParameters: PayrollsApiUpdatePayrollByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollPrepared>> {
            const payrollsUpdatePayrollByIdRequest: PayrollsUpdatePayrollByIdRequest = {
                employee_compensations: requestParameters.employee_compensations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayrollById(requestParameters.companyId, requestParameters.payrollId, requestParameters.xGustoApiVersion, payrollsUpdatePayrollByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollsApi - factory interface
 * @export
 */
export const PayrollsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollsApiFp(configuration)
    return {
        /**
         * Returns all approved Payroll Reversals for a Company.  scope: `payrolls:read`
         * @summary Get approved payroll reversals
         * @param {PayrollsApiApprovedReversalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvedReversals(requestParameters: PayrollsApiApprovedReversalsRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollReversal> {
            return localVarFp.approvedReversals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Calculates gross up earnings for an employee\'s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.  scope: `payrolls:run`
         * @summary Calculate gross up
         * @param {PayrollsApiCalculateGrossUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateGrossUp(requestParameters: PayrollsApiCalculateGrossUpRequest, options?: AxiosRequestConfig): AxiosPromise<GrossUpPay> {
            return localVarFp.calculateGrossUp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params. In v2023-04-01, *show_calculation=true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
         * @summary Calculate a payroll
         * @param {PayrollsApiCalculateGrossUp0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateGrossUp_1(requestParameters: PayrollsApiCalculateGrossUp0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.calculateGrossUp_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria: - `processed` is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: `payrolls:run` 
         * @summary Cancel a payroll
         * @param {PayrollsApiCancelPayrollTransitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayrollTransition(requestParameters: PayrollsApiCancelPayrollTransitionRequest, options?: AxiosRequestConfig): AxiosPromise<Payroll> {
            return localVarFp.cancelPayrollTransition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new, unprocessed, off-cycle payroll.  ## `off_cycle_reason` - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`. - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.  scope: `payrolls:run`
         * @summary Create an off-cycle payroll
         * @param {PayrollsApiCreateOffCyclePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOffCyclePayroll(requestParameters: PayrollsApiCreateOffCyclePayrollRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollPrepared> {
            return localVarFp.createOffCyclePayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.  scope: `payrolls:run`
         * @summary Delete a payroll
         * @param {PayrollsApiDeleteUnprocessedPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnprocessedPayroll(requestParameters: PayrollsApiDeleteUnprocessedPayrollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUnprocessedPayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: `generated_documents:write`
         * @summary Generate payroll printable checks (pdf)
         * @param {PayrollsApiGeneratePrintableChecksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePrintableChecks(requestParameters: PayrollsApiGeneratePrintableChecksRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollCheck> {
            return localVarFp.generatePrintableChecks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: `payrolls:run`
         * @summary Get all payroll blockers for a company
         * @param {PayrollsApiGetAllPayrollBlockersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayrollBlockers(requestParameters: PayrollsApiGetAllPayrollBlockersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayrollBlocker>> {
            return localVarFp.getAllPayrollBlockers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
         * @summary Get all payrolls for a company
         * @param {PayrollsApiGetCompanyPayrollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayrolls(requestParameters: PayrollsApiGetCompanyPayrollsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PayrollMinimal>> {
            return localVarFp.getCompanyPayrolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: `pay_stubs:read`
         * @summary Get an employee pay stub (pdf)
         * @param {PayrollsApiGetEmployeePayStubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePayStub(requestParameters: PayrollsApiGetEmployeePayStubRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeePayStub(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s pay stubs  scope: `pay_stubs:read`
         * @summary Get an employee\'s pay stubs
         * @param {PayrollsApiGetEmployeePayStubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePayStubs(requestParameters: PayrollsApiGetEmployeePayStubsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeePayStub>> {
            return localVarFp.getEmployeePayStubs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
         * @summary Get a single payroll
         * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig): AxiosPromise<Payroll> {
            return localVarFp.getSinglePayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
         * @summary Get a single payroll receipt
         * @param {PayrollsApiGetSingleReceiptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleReceipt(requestParameters: PayrollsApiGetSingleReceiptRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollReceipt> {
            return localVarFp.getSingleReceipt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
         * @summary Prepare a payroll for update
         * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollPrepared> {
            return localVarFp.prepareForUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Skip a payroll
         * @param {PayrollsApiSkipPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipPayroll(requestParameters: PayrollsApiSkipPayrollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.skipPayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
         * @summary Submit payroll
         * @param {PayrollsApiSubmitPayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitPayroll(requestParameters: PayrollsApiSubmitPayrollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitPayroll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
         * @summary Update a payroll by ID
         * @param {PayrollsApiUpdatePayrollByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayrollById(requestParameters: PayrollsApiUpdatePayrollByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollPrepared> {
            return localVarFp.updatePayrollById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approvedReversals operation in PayrollsApi.
 * @export
 * @interface PayrollsApiApprovedReversalsRequest
 */
export type PayrollsApiApprovedReversalsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiApprovedReversals
    */
    readonly companyId: string
    
    /**
    * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
    * @type {number}
    * @memberof PayrollsApiApprovedReversals
    */
    readonly page?: number
    
    /**
    * Number of objects per page. For majority of endpoints will default to 25
    * @type {number}
    * @memberof PayrollsApiApprovedReversals
    */
    readonly per?: number
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiApprovedReversals
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for calculateGrossUp operation in PayrollsApi.
 * @export
 * @interface PayrollsApiCalculateGrossUpRequest
 */
export type PayrollsApiCalculateGrossUpRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiCalculateGrossUp
    */
    readonly payrollUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiCalculateGrossUp
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsCalculateGrossUpRequest

/**
 * Request parameters for calculateGrossUp_1 operation in PayrollsApi.
 * @export
 * @interface PayrollsApiCalculateGrossUp0Request
 */
export type PayrollsApiCalculateGrossUp0Request = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiCalculateGrossUp0
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiCalculateGrossUp0
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiCalculateGrossUp0
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for cancelPayrollTransition operation in PayrollsApi.
 * @export
 * @interface PayrollsApiCancelPayrollTransitionRequest
 */
export type PayrollsApiCancelPayrollTransitionRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiCancelPayrollTransition
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiCancelPayrollTransition
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiCancelPayrollTransition
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for createOffCyclePayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiCreateOffCyclePayrollRequest
 */
export type PayrollsApiCreateOffCyclePayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiCreateOffCyclePayroll
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiCreateOffCyclePayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsCreateOffCyclePayrollRequest

/**
 * Request parameters for deleteUnprocessedPayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiDeleteUnprocessedPayrollRequest
 */
export type PayrollsApiDeleteUnprocessedPayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiDeleteUnprocessedPayroll
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiDeleteUnprocessedPayroll
    */
    readonly payrollId: string
    
    /**
    * When true, request an asynchronous delete of the payroll.
    * @type {boolean}
    * @memberof PayrollsApiDeleteUnprocessedPayroll
    */
    readonly async?: boolean
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiDeleteUnprocessedPayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for generatePrintableChecks operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGeneratePrintableChecksRequest
 */
export type PayrollsApiGeneratePrintableChecksRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiGeneratePrintableChecks
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGeneratePrintableChecks
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsGeneratePrintableChecksRequest

/**
 * Request parameters for getAllPayrollBlockers operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetAllPayrollBlockersRequest
 */
export type PayrollsApiGetAllPayrollBlockersRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiGetAllPayrollBlockers
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetAllPayrollBlockers
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanyPayrolls operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetCompanyPayrollsRequest
 */
export type PayrollsApiGetCompanyPayrollsRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly companyId: string
    
    /**
    * Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. `?processing_statuses=processed,unprocessed`
    * @type {'unprocessed' | 'processed'}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly processingStatuses?: 'unprocessed' | 'processed'
    
    /**
    * Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. `?payroll_types=regular,off_cycle`
    * @type {'regular' | 'off_cycle' | 'external'}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly payrollTypes?: 'regular' | 'off_cycle' | 'external'
    
    /**
    * Include the requested attribute in the response. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. `?include=totals,payroll_status_meta`
    * @type {'totals' | 'payroll_status_meta'}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly include?: 'totals' | 'payroll_status_meta'
    
    /**
    * Return payrolls whose pay period is after the start date
    * @type {string}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly startDate?: string
    
    /**
    * Return payrolls whose pay period is before the end date
    * @type {string}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly endDate?: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetCompanyPayrolls
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getEmployeePayStub operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetEmployeePayStubRequest
 */
export type PayrollsApiGetEmployeePayStubRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiGetEmployeePayStub
    */
    readonly payrollId: string
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof PayrollsApiGetEmployeePayStub
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetEmployeePayStub
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getEmployeePayStubs operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetEmployeePayStubsRequest
 */
export type PayrollsApiGetEmployeePayStubsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof PayrollsApiGetEmployeePayStubs
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetEmployeePayStubs
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSinglePayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetSinglePayrollRequest
 */
export type PayrollsApiGetSinglePayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly payrollId: string
    
    /**
    * Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. `?include=benefits,deductions,taxes`
    * @type {'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly include?: 'benefits' | 'deductions' | 'taxes' | 'payroll_status_meta'
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetSinglePayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getSingleReceipt operation in PayrollsApi.
 * @export
 * @interface PayrollsApiGetSingleReceiptRequest
 */
export type PayrollsApiGetSingleReceiptRequest = {
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiGetSingleReceipt
    */
    readonly payrollUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiGetSingleReceipt
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for prepareForUpdate operation in PayrollsApi.
 * @export
 * @interface PayrollsApiPrepareForUpdateRequest
 */
export type PayrollsApiPrepareForUpdateRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiPrepareForUpdate
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for skipPayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiSkipPayrollRequest
 */
export type PayrollsApiSkipPayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiSkipPayroll
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiSkipPayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsSkipPayrollRequest

/**
 * Request parameters for submitPayroll operation in PayrollsApi.
 * @export
 * @interface PayrollsApiSubmitPayrollRequest
 */
export type PayrollsApiSubmitPayrollRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiSubmitPayroll
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiSubmitPayroll
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiSubmitPayroll
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updatePayrollById operation in PayrollsApi.
 * @export
 * @interface PayrollsApiUpdatePayrollByIdRequest
 */
export type PayrollsApiUpdatePayrollByIdRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof PayrollsApiUpdatePayrollById
    */
    readonly companyId: string
    
    /**
    * The UUID of the payroll
    * @type {string}
    * @memberof PayrollsApiUpdatePayrollById
    */
    readonly payrollId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof PayrollsApiUpdatePayrollById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & PayrollsUpdatePayrollByIdRequest

/**
 * PayrollsApiGenerated - object-oriented interface
 * @export
 * @class PayrollsApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollsApiGenerated extends BaseAPI {
    /**
     * Returns all approved Payroll Reversals for a Company.  scope: `payrolls:read`
     * @summary Get approved payroll reversals
     * @param {PayrollsApiApprovedReversalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public approvedReversals(requestParameters: PayrollsApiApprovedReversalsRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).approvedReversals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calculates gross up earnings for an employee\'s payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.  The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.  scope: `payrolls:run`
     * @summary Calculate gross up
     * @param {PayrollsApiCalculateGrossUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public calculateGrossUp(requestParameters: PayrollsApiCalculateGrossUpRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).calculateGrossUp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.  This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params. In v2023-04-01, *show_calculation=true* is no longer required.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
     * @summary Calculate a payroll
     * @param {PayrollsApiCalculateGrossUp0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public calculateGrossUp_1(requestParameters: PayrollsApiCalculateGrossUp0Request, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).calculateGrossUp_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria: - `processed` is true - Current time is earlier than 3:30pm PT on the payroll_deadline  scope: `payrolls:run` 
     * @summary Cancel a payroll
     * @param {PayrollsApiCancelPayrollTransitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public cancelPayrollTransition(requestParameters: PayrollsApiCancelPayrollTransitionRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).cancelPayrollTransition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new, unprocessed, off-cycle payroll.  ## `off_cycle_reason` - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`. - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.  scope: `payrolls:run`
     * @summary Create an off-cycle payroll
     * @param {PayrollsApiCreateOffCyclePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public createOffCyclePayroll(requestParameters: PayrollsApiCreateOffCyclePayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).createOffCyclePayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to delete an **unprocessed** payroll.  By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.  scope: `payrolls:run`
     * @summary Delete a payroll
     * @param {PayrollsApiDeleteUnprocessedPayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public deleteUnprocessedPayroll(requestParameters: PayrollsApiDeleteUnprocessedPayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).deleteUnprocessedPayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_id. A generation status and corresponding generated document request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.  scope: `generated_documents:write`
     * @summary Generate payroll printable checks (pdf)
     * @param {PayrollsApiGeneratePrintableChecksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public generatePrintableChecks(requestParameters: PayrollsApiGeneratePrintableChecksRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).generatePrintableChecks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.  The list is empty if there are no payroll blockers.  scope: `payrolls:run`
     * @summary Get all payroll blockers for a company
     * @param {PayrollsApiGetAllPayrollBlockersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getAllPayrollBlockers(requestParameters: PayrollsApiGetAllPayrollBlockersRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getAllPayrollBlockers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.  By default, will return processed, regular payrolls for the past 6 months.  Notes: * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent. * end_date can be at most 3 months in the future and start_date and end_date can\'t be more than 1 year apart.  scope: `payrolls:read`
     * @summary Get all payrolls for a company
     * @param {PayrollsApiGetCompanyPayrollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getCompanyPayrolls(requestParameters: PayrollsApiGetCompanyPayrollsRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getCompanyPayrolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.  scope: `pay_stubs:read`
     * @summary Get an employee pay stub (pdf)
     * @param {PayrollsApiGetEmployeePayStubRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getEmployeePayStub(requestParameters: PayrollsApiGetEmployeePayStubRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getEmployeePayStub(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s pay stubs  scope: `pay_stubs:read`
     * @summary Get an employee\'s pay stubs
     * @param {PayrollsApiGetEmployeePayStubsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getEmployeePayStubs(requestParameters: PayrollsApiGetEmployeePayStubsRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getEmployeePayStubs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Hours are represented to the thousands place; dollar amounts are represented to the cent. * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ). * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope  scope: `payrolls:read`
     * @summary Get a single payroll
     * @param {PayrollsApiGetSinglePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getSinglePayroll(requestParameters: PayrollsApiGetSinglePayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getSinglePayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a payroll receipt.  Notes: * Hour and dollar amounts are returned as string representations of numeric decimals. * Dollar amounts are represented to the cent. * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).  scope: `payrolls:read`
     * @summary Get a single payroll receipt
     * @param {PayrollsApiGetSingleReceiptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public getSingleReceipt(requestParameters: PayrollsApiGetSingleReceiptRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).getSingleReceipt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.  Notes:  * Will null out calculated_at & totals if a payroll has already been calculated.  * Will return the version param used for updating the payroll  scope: `payrolls:write`
     * @summary Prepare a payroll for update
     * @param {PayrollsApiPrepareForUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public prepareForUpdate(requestParameters: PayrollsApiPrepareForUpdateRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).prepareForUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
     * @summary Skip a payroll
     * @param {PayrollsApiSkipPayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public skipPayroll(requestParameters: PayrollsApiSkipPayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).skipPayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the `processed` state.  If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.  scope: `payrolls:run`
     * @summary Submit payroll
     * @param {PayrollsApiSubmitPayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public submitPayroll(requestParameters: PayrollsApiSubmitPayrollRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).submitPayroll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed** payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they will not be removed from the payroll.  scope: `payrolls:write`
     * @summary Update a payroll by ID
     * @param {PayrollsApiUpdatePayrollByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollsApiGenerated
     */
    public updatePayrollById(requestParameters: PayrollsApiUpdatePayrollByIdRequest, options?: AxiosRequestConfig) {
        return PayrollsApiFp(this.configuration).updatePayrollById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
