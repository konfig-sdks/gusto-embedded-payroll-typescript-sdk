/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HolidayPayPoliciesAddEmployeesToPolicyRequest } from '../models';
// @ts-ignore
import { HolidayPayPoliciesCreateCompanyPolicyRequest } from '../models';
// @ts-ignore
import { HolidayPayPoliciesCreateCompanyPolicyRequestFederalHolidays } from '../models';
// @ts-ignore
import { HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest } from '../models';
// @ts-ignore
import { HolidayPayPoliciesRemoveEmployeesRequest } from '../models';
// @ts-ignore
import { HolidayPayPoliciesUpdatePolicyRequest } from '../models';
// @ts-ignore
import { HolidayPayPolicy } from '../models';
// @ts-ignore
import { PaidHolidays } from '../models';
// @ts-ignore
import { TimeOffPolicyEmployeesInner } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HolidayPayPoliciesApi - axios parameter creator
 * @export
 */
export const HolidayPayPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add employees to a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Add employees to a company\'s holiday pay policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {HolidayPayPoliciesAddEmployeesToPolicyRequest} [holidayPayPoliciesAddEmployeesToPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeesToPolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', holidayPayPoliciesAddEmployeesToPolicyRequest?: HolidayPayPoliciesAddEmployeesToPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('addEmployeesToPolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy/add`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayPayPoliciesAddEmployeesToPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy/add',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayPayPoliciesAddEmployeesToPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a holiday pay policy for a company  scope: `holiday_pay_policies:write`
         * @summary Create a holiday pay policy for a company
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {HolidayPayPoliciesCreateCompanyPolicyRequest} [holidayPayPoliciesCreateCompanyPolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyPolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', holidayPayPoliciesCreateCompanyPolicyRequest?: HolidayPayPoliciesCreateCompanyPolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('createCompanyPolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayPayPoliciesCreateCompanyPolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayPayPoliciesCreateCompanyPolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Delete a company\'s holiday pay policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('deletePolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a company\'s holiday pay policy  scope: `holiday_pay_policies:read`
         * @summary Get a company\'s holiday pay policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('getCompanyPolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Preview a company\'s paid holidays  scope: `holiday_pay_policies:read`
         * @summary Preview a company\'s paid holidays
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest} [holidayPayPoliciesPreviewCompanyPaidHolidaysRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewCompanyPaidHolidays: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', holidayPayPoliciesPreviewCompanyPaidHolidaysRequest?: HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('previewCompanyPaidHolidays', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/paid_holidays`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayPayPoliciesPreviewCompanyPaidHolidaysRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/paid_holidays',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove employees from a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Remove employees from a company\'s holiday pay policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {HolidayPayPoliciesRemoveEmployeesRequest} [holidayPayPoliciesRemoveEmployeesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployees: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', holidayPayPoliciesRemoveEmployeesRequest?: HolidayPayPoliciesRemoveEmployeesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('removeEmployees', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy/remove`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayPayPoliciesRemoveEmployeesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy/remove',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayPayPoliciesRemoveEmployeesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Update a company\'s holiday pay policy
         * @param {string} companyUuid The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {HolidayPayPoliciesUpdatePolicyRequest} [holidayPayPoliciesUpdatePolicyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (companyUuid: string, xGustoApiVersion?: '2024-03-01', holidayPayPoliciesUpdatePolicyRequest?: HolidayPayPoliciesUpdatePolicyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUuid' is not null or undefined
            assertParamExists('updatePolicy', 'companyUuid', companyUuid)
            const localVarPath = `/v1/companies/{company_uuid}/holiday_pay_policy`
                .replace(`{${"company_uuid"}}`, encodeURIComponent(String(companyUuid !== undefined ? companyUuid : `-company_uuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: holidayPayPoliciesUpdatePolicyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_uuid}/holiday_pay_policy',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(holidayPayPoliciesUpdatePolicyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HolidayPayPoliciesApi - functional programming interface
 * @export
 */
export const HolidayPayPoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HolidayPayPoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add employees to a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Add employees to a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeesToPolicy(requestParameters: HolidayPayPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayPayPolicy>> {
            const holidayPayPoliciesAddEmployeesToPolicyRequest: HolidayPayPoliciesAddEmployeesToPolicyRequest = {
                version: requestParameters.version,
                employees: requestParameters.employees
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeesToPolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, holidayPayPoliciesAddEmployeesToPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a holiday pay policy for a company  scope: `holiday_pay_policies:write`
         * @summary Create a holiday pay policy for a company
         * @param {HolidayPayPoliciesApiCreateCompanyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompanyPolicy(requestParameters: HolidayPayPoliciesApiCreateCompanyPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayPayPolicy>> {
            const holidayPayPoliciesCreateCompanyPolicyRequest: HolidayPayPoliciesCreateCompanyPolicyRequest = {
                federal_holidays: requestParameters.federal_holidays
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompanyPolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, holidayPayPoliciesCreateCompanyPolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Delete a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(requestParameters: HolidayPayPoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a company\'s holiday pay policy  scope: `holiday_pay_policies:read`
         * @summary Get a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiGetCompanyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPolicy(requestParameters: HolidayPayPoliciesApiGetCompanyPolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayPayPolicy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Preview a company\'s paid holidays  scope: `holiday_pay_policies:read`
         * @summary Preview a company\'s paid holidays
         * @param {HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewCompanyPaidHolidays(requestParameters: HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaidHolidays>> {
            const holidayPayPoliciesPreviewCompanyPaidHolidaysRequest: HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest = {
                year: requestParameters.year
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewCompanyPaidHolidays(requestParameters.companyUuid, requestParameters.xGustoApiVersion, holidayPayPoliciesPreviewCompanyPaidHolidaysRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove employees from a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Remove employees from a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEmployees(requestParameters: HolidayPayPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayPayPolicy>> {
            const holidayPayPoliciesRemoveEmployeesRequest: HolidayPayPoliciesRemoveEmployeesRequest = {
                version: requestParameters.version,
                employees: requestParameters.employees
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEmployees(requestParameters.companyUuid, requestParameters.xGustoApiVersion, holidayPayPoliciesRemoveEmployeesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Update a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(requestParameters: HolidayPayPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HolidayPayPolicy>> {
            const holidayPayPoliciesUpdatePolicyRequest: HolidayPayPoliciesUpdatePolicyRequest = {
                version: requestParameters.version,
                federal_holidays: requestParameters.federal_holidays
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(requestParameters.companyUuid, requestParameters.xGustoApiVersion, holidayPayPoliciesUpdatePolicyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HolidayPayPoliciesApi - factory interface
 * @export
 */
export const HolidayPayPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HolidayPayPoliciesApiFp(configuration)
    return {
        /**
         * Add employees to a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Add employees to a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeesToPolicy(requestParameters: HolidayPayPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayPayPolicy> {
            return localVarFp.addEmployeesToPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a holiday pay policy for a company  scope: `holiday_pay_policies:write`
         * @summary Create a holiday pay policy for a company
         * @param {HolidayPayPoliciesApiCreateCompanyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompanyPolicy(requestParameters: HolidayPayPoliciesApiCreateCompanyPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayPayPolicy> {
            return localVarFp.createCompanyPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Delete a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: HolidayPayPoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a company\'s holiday pay policy  scope: `holiday_pay_policies:read`
         * @summary Get a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiGetCompanyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPolicy(requestParameters: HolidayPayPoliciesApiGetCompanyPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayPayPolicy> {
            return localVarFp.getCompanyPolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Preview a company\'s paid holidays  scope: `holiday_pay_policies:read`
         * @summary Preview a company\'s paid holidays
         * @param {HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewCompanyPaidHolidays(requestParameters: HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest, options?: AxiosRequestConfig): AxiosPromise<PaidHolidays> {
            return localVarFp.previewCompanyPaidHolidays(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove employees from a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Remove employees from a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEmployees(requestParameters: HolidayPayPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayPayPolicy> {
            return localVarFp.removeEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
         * @summary Update a company\'s holiday pay policy
         * @param {HolidayPayPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(requestParameters: HolidayPayPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<HolidayPayPolicy> {
            return localVarFp.updatePolicy(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEmployeesToPolicy operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiAddEmployeesToPolicyRequest
 */
export type HolidayPayPoliciesApiAddEmployeesToPolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiAddEmployeesToPolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiAddEmployeesToPolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & HolidayPayPoliciesAddEmployeesToPolicyRequest

/**
 * Request parameters for createCompanyPolicy operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiCreateCompanyPolicyRequest
 */
export type HolidayPayPoliciesApiCreateCompanyPolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiCreateCompanyPolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiCreateCompanyPolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & HolidayPayPoliciesCreateCompanyPolicyRequest

/**
 * Request parameters for deletePolicy operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiDeletePolicyRequest
 */
export type HolidayPayPoliciesApiDeletePolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiDeletePolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiDeletePolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getCompanyPolicy operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiGetCompanyPolicyRequest
 */
export type HolidayPayPoliciesApiGetCompanyPolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiGetCompanyPolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiGetCompanyPolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for previewCompanyPaidHolidays operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest
 */
export type HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiPreviewCompanyPaidHolidays
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiPreviewCompanyPaidHolidays
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & HolidayPayPoliciesPreviewCompanyPaidHolidaysRequest

/**
 * Request parameters for removeEmployees operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiRemoveEmployeesRequest
 */
export type HolidayPayPoliciesApiRemoveEmployeesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiRemoveEmployees
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiRemoveEmployees
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & HolidayPayPoliciesRemoveEmployeesRequest

/**
 * Request parameters for updatePolicy operation in HolidayPayPoliciesApi.
 * @export
 * @interface HolidayPayPoliciesApiUpdatePolicyRequest
 */
export type HolidayPayPoliciesApiUpdatePolicyRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof HolidayPayPoliciesApiUpdatePolicy
    */
    readonly companyUuid: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof HolidayPayPoliciesApiUpdatePolicy
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & HolidayPayPoliciesUpdatePolicyRequest

/**
 * HolidayPayPoliciesApiGenerated - object-oriented interface
 * @export
 * @class HolidayPayPoliciesApiGenerated
 * @extends {BaseAPI}
 */
export class HolidayPayPoliciesApiGenerated extends BaseAPI {
    /**
     * Add employees to a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
     * @summary Add employees to a company\'s holiday pay policy
     * @param {HolidayPayPoliciesApiAddEmployeesToPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public addEmployeesToPolicy(requestParameters: HolidayPayPoliciesApiAddEmployeesToPolicyRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).addEmployeesToPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a holiday pay policy for a company  scope: `holiday_pay_policies:write`
     * @summary Create a holiday pay policy for a company
     * @param {HolidayPayPoliciesApiCreateCompanyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public createCompanyPolicy(requestParameters: HolidayPayPoliciesApiCreateCompanyPolicyRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).createCompanyPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
     * @summary Delete a company\'s holiday pay policy
     * @param {HolidayPayPoliciesApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public deletePolicy(requestParameters: HolidayPayPoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).deletePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a company\'s holiday pay policy  scope: `holiday_pay_policies:read`
     * @summary Get a company\'s holiday pay policy
     * @param {HolidayPayPoliciesApiGetCompanyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public getCompanyPolicy(requestParameters: HolidayPayPoliciesApiGetCompanyPolicyRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).getCompanyPolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Preview a company\'s paid holidays  scope: `holiday_pay_policies:read`
     * @summary Preview a company\'s paid holidays
     * @param {HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public previewCompanyPaidHolidays(requestParameters: HolidayPayPoliciesApiPreviewCompanyPaidHolidaysRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).previewCompanyPaidHolidays(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove employees from a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
     * @summary Remove employees from a company\'s holiday pay policy
     * @param {HolidayPayPoliciesApiRemoveEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public removeEmployees(requestParameters: HolidayPayPoliciesApiRemoveEmployeesRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).removeEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a company\'s holiday pay policy  scope: `holiday_pay_policies:write`
     * @summary Update a company\'s holiday pay policy
     * @param {HolidayPayPoliciesApiUpdatePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HolidayPayPoliciesApiGenerated
     */
    public updatePolicy(requestParameters: HolidayPayPoliciesApiUpdatePolicyRequest, options?: AxiosRequestConfig) {
        return HolidayPayPoliciesApiFp(this.configuration).updatePolicy(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
