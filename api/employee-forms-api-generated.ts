/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeFormsGenerateW2DocumentRequest } from '../models';
// @ts-ignore
import { EmployeeFormsGenerateW2DocumentResponse } from '../models';
// @ts-ignore
import { EmployeeFormsSignFormRequest } from '../models';
// @ts-ignore
import { Form } from '../models';
// @ts-ignore
import { FormPdf } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeFormsApi - axios parameter creator
 * @export
 */
export const EmployeeFormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a W2 document for testing purposes.  scope: `employees:write`
         * @summary Generate a W2 form [DEMO]
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeFormsGenerateW2DocumentRequest} [employeeFormsGenerateW2DocumentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateW2Document: async (xGustoApiVersion?: '2024-03-01', employeeFormsGenerateW2DocumentRequest?: EmployeeFormsGenerateW2DocumentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sandbox/generate_w2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeFormsGenerateW2DocumentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/sandbox/generate_w2',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeFormsGenerateW2DocumentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all employee\'s forms  scope: `employee_forms:read`
         * @summary Get all employee forms
         * @param {string} employeeId The UUID of the employee
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployeeForms: async (employeeId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllEmployeeForms', 'employeeId', employeeId)
            const localVarPath = `/v1/employees/{employee_id}/forms`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/forms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee form  scope: `employee_forms:read`
         * @summary Get an employee form
         * @param {string} employeeId The UUID of the employee
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById: async (employeeId: string, formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getFormById', 'employeeId', employeeId)
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getFormById', 'formId', formId)
            const localVarPath = `/v1/employees/{employee_id}/forms/{form_id}`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/forms/{form_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the link to the form PDF  scope: `employee_forms:read`
         * @summary Get the employee form pdf
         * @param {string} employeeId The UUID of the employee
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink: async (employeeId: string, formId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getPdfLink', 'employeeId', employeeId)
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('getPdfLink', 'formId', formId)
            const localVarPath = `/v1/employees/{employee_id}/forms/{form_id}/pdf`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/forms/{form_id}/pdf',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign a company form  scope: `employee_forms:sign`
         * @summary Sign an employee form
         * @param {string} employeeId The UUID of the employee
         * @param {string} formId The UUID of the form
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {EmployeeFormsSignFormRequest} [employeeFormsSignFormRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signForm: async (employeeId: string, formId: string, xGustoApiVersion?: '2024-03-01', employeeFormsSignFormRequest?: EmployeeFormsSignFormRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('signForm', 'employeeId', employeeId)
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('signForm', 'formId', formId)
            const localVarPath = `/v1/employees/{employee_id}/forms/{form_id}/sign`
                .replace(`{${"employee_id"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employee_id-`)))
                .replace(`{${"form_id"}}`, encodeURIComponent(String(formId !== undefined ? formId : `-form_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeFormsSignFormRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/employees/{employee_id}/forms/{form_id}/sign',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeFormsSignFormRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeFormsApi - functional programming interface
 * @export
 */
export const EmployeeFormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeFormsApiAxiosParamCreator(configuration)
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a W2 document for testing purposes.  scope: `employees:write`
         * @summary Generate a W2 form [DEMO]
         * @param {EmployeeFormsApiGenerateW2DocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateW2Document(requestParameters: EmployeeFormsApiGenerateW2DocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeeFormsGenerateW2DocumentResponse>> {
            const employeeFormsGenerateW2DocumentRequest: EmployeeFormsGenerateW2DocumentRequest = {
                employee_id: requestParameters.employee_id,
                year: requestParameters.year
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateW2Document(requestParameters.xGustoApiVersion, employeeFormsGenerateW2DocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all employee\'s forms  scope: `employee_forms:read`
         * @summary Get all employee forms
         * @param {EmployeeFormsApiGetAllEmployeeFormsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEmployeeForms(requestParameters: EmployeeFormsApiGetAllEmployeeFormsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Form>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEmployeeForms(requestParameters.employeeId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee form  scope: `employee_forms:read`
         * @summary Get an employee form
         * @param {EmployeeFormsApiGetFormByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormById(requestParameters: EmployeeFormsApiGetFormByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormById(requestParameters.employeeId, requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the link to the form PDF  scope: `employee_forms:read`
         * @summary Get the employee form pdf
         * @param {EmployeeFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPdfLink(requestParameters: EmployeeFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormPdf>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPdfLink(requestParameters.employeeId, requestParameters.formId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sign a company form  scope: `employee_forms:sign`
         * @summary Sign an employee form
         * @param {EmployeeFormsApiSignFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signForm(requestParameters: EmployeeFormsApiSignFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Form>> {
            const employeeFormsSignFormRequest: EmployeeFormsSignFormRequest = {
                signature_text: requestParameters.signature_text,
                agree: requestParameters.agree,
                signed_by_ip_address: requestParameters.signed_by_ip_address
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.signForm(requestParameters.employeeId, requestParameters.formId, requestParameters.xGustoApiVersion, employeeFormsSignFormRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeFormsApi - factory interface
 * @export
 */
export const EmployeeFormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeFormsApiFp(configuration)
    return {
        /**
         * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a W2 document for testing purposes.  scope: `employees:write`
         * @summary Generate a W2 form [DEMO]
         * @param {EmployeeFormsApiGenerateW2DocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateW2Document(requestParameters: EmployeeFormsApiGenerateW2DocumentRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeeFormsGenerateW2DocumentResponse> {
            return localVarFp.generateW2Document(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all employee\'s forms  scope: `employee_forms:read`
         * @summary Get all employee forms
         * @param {EmployeeFormsApiGetAllEmployeeFormsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmployeeForms(requestParameters: EmployeeFormsApiGetAllEmployeeFormsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Form>> {
            return localVarFp.getAllEmployeeForms(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee form  scope: `employee_forms:read`
         * @summary Get an employee form
         * @param {EmployeeFormsApiGetFormByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormById(requestParameters: EmployeeFormsApiGetFormByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Form> {
            return localVarFp.getFormById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the link to the form PDF  scope: `employee_forms:read`
         * @summary Get the employee form pdf
         * @param {EmployeeFormsApiGetPdfLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPdfLink(requestParameters: EmployeeFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig): AxiosPromise<FormPdf> {
            return localVarFp.getPdfLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign a company form  scope: `employee_forms:sign`
         * @summary Sign an employee form
         * @param {EmployeeFormsApiSignFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signForm(requestParameters: EmployeeFormsApiSignFormRequest, options?: AxiosRequestConfig): AxiosPromise<Form> {
            return localVarFp.signForm(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateW2Document operation in EmployeeFormsApi.
 * @export
 * @interface EmployeeFormsApiGenerateW2DocumentRequest
 */
export type EmployeeFormsApiGenerateW2DocumentRequest = {
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeFormsApiGenerateW2Document
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeFormsGenerateW2DocumentRequest

/**
 * Request parameters for getAllEmployeeForms operation in EmployeeFormsApi.
 * @export
 * @interface EmployeeFormsApiGetAllEmployeeFormsRequest
 */
export type EmployeeFormsApiGetAllEmployeeFormsRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeFormsApiGetAllEmployeeForms
    */
    readonly employeeId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeFormsApiGetAllEmployeeForms
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getFormById operation in EmployeeFormsApi.
 * @export
 * @interface EmployeeFormsApiGetFormByIdRequest
 */
export type EmployeeFormsApiGetFormByIdRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeFormsApiGetFormById
    */
    readonly employeeId: string
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof EmployeeFormsApiGetFormById
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeFormsApiGetFormById
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for getPdfLink operation in EmployeeFormsApi.
 * @export
 * @interface EmployeeFormsApiGetPdfLinkRequest
 */
export type EmployeeFormsApiGetPdfLinkRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeFormsApiGetPdfLink
    */
    readonly employeeId: string
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof EmployeeFormsApiGetPdfLink
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeFormsApiGetPdfLink
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for signForm operation in EmployeeFormsApi.
 * @export
 * @interface EmployeeFormsApiSignFormRequest
 */
export type EmployeeFormsApiSignFormRequest = {
    
    /**
    * The UUID of the employee
    * @type {string}
    * @memberof EmployeeFormsApiSignForm
    */
    readonly employeeId: string
    
    /**
    * The UUID of the form
    * @type {string}
    * @memberof EmployeeFormsApiSignForm
    */
    readonly formId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof EmployeeFormsApiSignForm
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & EmployeeFormsSignFormRequest

/**
 * EmployeeFormsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeFormsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeFormsApiGenerated extends BaseAPI {
    /**
     * > ðŸš§ Demo action > > This action is only available in the Demo environment  Generates a W2 document for testing purposes.  scope: `employees:write`
     * @summary Generate a W2 form [DEMO]
     * @param {EmployeeFormsApiGenerateW2DocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFormsApiGenerated
     */
    public generateW2Document(requestParameters: EmployeeFormsApiGenerateW2DocumentRequest, options?: AxiosRequestConfig) {
        return EmployeeFormsApiFp(this.configuration).generateW2Document(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all employee\'s forms  scope: `employee_forms:read`
     * @summary Get all employee forms
     * @param {EmployeeFormsApiGetAllEmployeeFormsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFormsApiGenerated
     */
    public getAllEmployeeForms(requestParameters: EmployeeFormsApiGetAllEmployeeFormsRequest, options?: AxiosRequestConfig) {
        return EmployeeFormsApiFp(this.configuration).getAllEmployeeForms(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee form  scope: `employee_forms:read`
     * @summary Get an employee form
     * @param {EmployeeFormsApiGetFormByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFormsApiGenerated
     */
    public getFormById(requestParameters: EmployeeFormsApiGetFormByIdRequest, options?: AxiosRequestConfig) {
        return EmployeeFormsApiFp(this.configuration).getFormById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the link to the form PDF  scope: `employee_forms:read`
     * @summary Get the employee form pdf
     * @param {EmployeeFormsApiGetPdfLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFormsApiGenerated
     */
    public getPdfLink(requestParameters: EmployeeFormsApiGetPdfLinkRequest, options?: AxiosRequestConfig) {
        return EmployeeFormsApiFp(this.configuration).getPdfLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign a company form  scope: `employee_forms:sign`
     * @summary Sign an employee form
     * @param {EmployeeFormsApiSignFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFormsApiGenerated
     */
    public signForm(requestParameters: EmployeeFormsApiSignFormRequest, options?: AxiosRequestConfig) {
        return EmployeeFormsApiFp(this.configuration).signForm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
