/* tslint:disable */
/* eslint-disable */
/*
Gusto API

Welcome to Gusto's Embedded Payroll API documentation!

The version of the OpenAPI document: 2024-03-01
Contact: developer@gusto.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FederalTaxDetails } from '../models';
// @ts-ignore
import { FederalTaxDetailsUpdateAttributesRequest } from '../models';
// @ts-ignore
import { UnprocessableEntityErrorObject } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FederalTaxDetailsApi - axios parameter creator
 * @export
 */
export const FederalTaxDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetches attributes relevant for a company\'s federal taxes.  scope: `company_federal_taxes:read`
         * @summary Get Federal Tax Details
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (companyId: string, xGustoApiVersion?: '2024-03-01', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAttributes', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/federal_tax_details`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/federal_tax_details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates attributes relevant for a company\'s federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.  scope: `company_federal_taxes:write`
         * @summary Update Federal Tax Details
         * @param {string} companyId The UUID of the company
         * @param {'2024-03-01'} [xGustoApiVersion] Determines the date-based API version associated with your API call. If none is provided, your application\&#39;s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         * @param {FederalTaxDetailsUpdateAttributesRequest} [federalTaxDetailsUpdateAttributesRequest] Attributes related to federal tax details that can be updated via this endpoint include:
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes: async (companyId: string, xGustoApiVersion?: '2024-03-01', federalTaxDetailsUpdateAttributesRequest?: FederalTaxDetailsUpdateAttributesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateAttributes', 'companyId', companyId)
            const localVarPath = `/v1/companies/{company_id}/federal_tax_details`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-company_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (xGustoApiVersion != null) {
                localVarHeaderParameter['X-Gusto-API-Version'] = String(xGustoApiVersion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: federalTaxDetailsUpdateAttributesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/companies/{company_id}/federal_tax_details',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(federalTaxDetailsUpdateAttributesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FederalTaxDetailsApi - functional programming interface
 * @export
 */
export const FederalTaxDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FederalTaxDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetches attributes relevant for a company\'s federal taxes.  scope: `company_federal_taxes:read`
         * @summary Get Federal Tax Details
         * @param {FederalTaxDetailsApiGetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(requestParameters: FederalTaxDetailsApiGetAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FederalTaxDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributes(requestParameters.companyId, requestParameters.xGustoApiVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates attributes relevant for a company\'s federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.  scope: `company_federal_taxes:write`
         * @summary Update Federal Tax Details
         * @param {FederalTaxDetailsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttributes(requestParameters: FederalTaxDetailsApiUpdateAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FederalTaxDetails>> {
            const federalTaxDetailsUpdateAttributesRequest: FederalTaxDetailsUpdateAttributesRequest = {
                version: requestParameters.version,
                legal_name: requestParameters.legal_name,
                ein: requestParameters.ein,
                tax_payer_type: requestParameters.tax_payer_type,
                filing_form: requestParameters.filing_form,
                taxable_as_scorp: requestParameters.taxable_as_scorp
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributes(requestParameters.companyId, requestParameters.xGustoApiVersion, federalTaxDetailsUpdateAttributesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FederalTaxDetailsApi - factory interface
 * @export
 */
export const FederalTaxDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FederalTaxDetailsApiFp(configuration)
    return {
        /**
         * Fetches attributes relevant for a company\'s federal taxes.  scope: `company_federal_taxes:read`
         * @summary Get Federal Tax Details
         * @param {FederalTaxDetailsApiGetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(requestParameters: FederalTaxDetailsApiGetAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<FederalTaxDetails> {
            return localVarFp.getAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates attributes relevant for a company\'s federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.  scope: `company_federal_taxes:write`
         * @summary Update Federal Tax Details
         * @param {FederalTaxDetailsApiUpdateAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributes(requestParameters: FederalTaxDetailsApiUpdateAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<FederalTaxDetails> {
            return localVarFp.updateAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAttributes operation in FederalTaxDetailsApi.
 * @export
 * @interface FederalTaxDetailsApiGetAttributesRequest
 */
export type FederalTaxDetailsApiGetAttributesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof FederalTaxDetailsApiGetAttributes
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof FederalTaxDetailsApiGetAttributes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
}

/**
 * Request parameters for updateAttributes operation in FederalTaxDetailsApi.
 * @export
 * @interface FederalTaxDetailsApiUpdateAttributesRequest
 */
export type FederalTaxDetailsApiUpdateAttributesRequest = {
    
    /**
    * The UUID of the company
    * @type {string}
    * @memberof FederalTaxDetailsApiUpdateAttributes
    */
    readonly companyId: string
    
    /**
    * Determines the date-based API version associated with your API call. If none is provided, your application\'s [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
    * @type {'2024-03-01'}
    * @memberof FederalTaxDetailsApiUpdateAttributes
    */
    readonly xGustoApiVersion?: '2024-03-01'
    
} & FederalTaxDetailsUpdateAttributesRequest

/**
 * FederalTaxDetailsApiGenerated - object-oriented interface
 * @export
 * @class FederalTaxDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class FederalTaxDetailsApiGenerated extends BaseAPI {
    /**
     * Fetches attributes relevant for a company\'s federal taxes.  scope: `company_federal_taxes:read`
     * @summary Get Federal Tax Details
     * @param {FederalTaxDetailsApiGetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FederalTaxDetailsApiGenerated
     */
    public getAttributes(requestParameters: FederalTaxDetailsApiGetAttributesRequest, options?: AxiosRequestConfig) {
        return FederalTaxDetailsApiFp(this.configuration).getAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates attributes relevant for a company\'s federal taxes. This information is required is to onboard a company for use with Gusto Embedded Payroll.  scope: `company_federal_taxes:write`
     * @summary Update Federal Tax Details
     * @param {FederalTaxDetailsApiUpdateAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FederalTaxDetailsApiGenerated
     */
    public updateAttributes(requestParameters: FederalTaxDetailsApiUpdateAttributesRequest, options?: AxiosRequestConfig) {
        return FederalTaxDetailsApiFp(this.configuration).updateAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
